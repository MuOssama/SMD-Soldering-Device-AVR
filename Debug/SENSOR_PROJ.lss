
SENSOR_PROJ.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000338a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  00800060  0000338a  000033fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002724  00000000  00000000  00003460  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001085  00000000  00000000  00005b84  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00006c09  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00006d69  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00006ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00008f3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  0000a03e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000afc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000b140  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000b402  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000bc90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e8       	ldi	r30, 0x8A	; 138
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3c       	cpi	r26, 0xC0	; 192
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 96 18 	call	0x312c	; 0x312c <main>
      7a:	0c 94 c3 19 	jmp	0x3386	; 0x3386 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 47 19 	jmp	0x328e	; 0x328e <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a7 ea       	ldi	r26, 0xA7	; 167
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 63 19 	jmp	0x32c6	; 0x32c6 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 53 19 	jmp	0x32a6	; 0x32a6 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 6f 19 	jmp	0x32de	; 0x32de <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 53 19 	jmp	0x32a6	; 0x32a6 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 6f 19 	jmp	0x32de	; 0x32de <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 47 19 	jmp	0x328e	; 0x328e <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	87 ea       	ldi	r24, 0xA7	; 167
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 63 19 	jmp	0x32c6	; 0x32c6 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 4f 19 	jmp	0x329e	; 0x329e <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	67 ea       	ldi	r22, 0xA7	; 167
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 6b 19 	jmp	0x32d6	; 0x32d6 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 53 19 	jmp	0x32a6	; 0x32a6 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 6f 19 	jmp	0x32de	; 0x32de <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 53 19 	jmp	0x32a6	; 0x32a6 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 6f 19 	jmp	0x32de	; 0x32de <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 53 19 	jmp	0x32a6	; 0x32a6 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 6f 19 	jmp	0x32de	; 0x32de <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 57 19 	jmp	0x32ae	; 0x32ae <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 73 19 	jmp	0x32e6	; 0x32e6 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <init_master>:
/****************************
 function return type : void
 init the master --> SPCR
 *****************************/
void init_master(void)
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
	/*
	 setting the output of SPI pins
	 */
	SPI_DDR |= ((1 << SPI_SS) | (1 << SPI_SCK) | (1 << SPI_MOSI));
     c96:	a7 e3       	ldi	r26, 0x37	; 55
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	e7 e3       	ldi	r30, 0x37	; 55
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	80 81       	ld	r24, Z
     ca0:	80 6b       	ori	r24, 0xB0	; 176
     ca2:	8c 93       	st	X, r24
	/*
	 SET BIT 4 TO BECOME A MSTER (MSTR)
	 SET BIT 2 TO ENABLE THE SPI (SPE)
	 frequancy 125k
	 */
	SPCR |= ((1 << 6) | (1 << 4) | (1 << 1));
     ca4:	ad e2       	ldi	r26, 0x2D	; 45
     ca6:	b0 e0       	ldi	r27, 0x00	; 0
     ca8:	ed e2       	ldi	r30, 0x2D	; 45
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 81       	ld	r24, Z
     cae:	82 65       	ori	r24, 0x52	; 82
     cb0:	8c 93       	st	X, r24
}
     cb2:	cf 91       	pop	r28
     cb4:	df 91       	pop	r29
     cb6:	08 95       	ret

00000cb8 <transfer_BLOCK>:

u8 transfer_BLOCK(u8 data)
{
     cb8:	df 93       	push	r29
     cba:	cf 93       	push	r28
     cbc:	0f 92       	push	r0
     cbe:	cd b7       	in	r28, 0x3d	; 61
     cc0:	de b7       	in	r29, 0x3e	; 62
     cc2:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data;
     cc4:	ef e2       	ldi	r30, 0x2F	; 47
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	89 81       	ldd	r24, Y+1	; 0x01
     cca:	80 83       	st	Z, r24
	while (!(SPSR & (1 << 7))); // waiting 8 clocks
     ccc:	ee e2       	ldi	r30, 0x2E	; 46
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	88 23       	and	r24, r24
     cd4:	dc f7       	brge	.-10     	; 0xccc <transfer_BLOCK+0x14>
	return SPDR;
     cd6:	ef e2       	ldi	r30, 0x2F	; 47
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
}
     cdc:	0f 90       	pop	r0
     cde:	cf 91       	pop	r28
     ce0:	df 91       	pop	r29
     ce2:	08 95       	ret

00000ce4 <init_slave>:

void init_slave(void)
{
     ce4:	df 93       	push	r29
     ce6:	cf 93       	push	r28
     ce8:	cd b7       	in	r28, 0x3d	; 61
     cea:	de b7       	in	r29, 0x3e	; 62
	SPI_DDR = (1 << SPI_MISO);
     cec:	e7 e3       	ldi	r30, 0x37	; 55
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	80 e4       	ldi	r24, 0x40	; 64
     cf2:	80 83       	st	Z, r24
	SPCR = (1 << SPE);
     cf4:	ed e2       	ldi	r30, 0x2D	; 45
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 e4       	ldi	r24, 0x40	; 64
     cfa:	80 83       	st	Z, r24
}
     cfc:	cf 91       	pop	r28
     cfe:	df 91       	pop	r29
     d00:	08 95       	ret

00000d02 <DIO_SetPinDirection>:
#include "DIO_REG.h"
#include "../../uitils/BIT_MATH.h"
#include "DIO.h"

void DIO_SetPinDirection(u8 GropuIDcopy, u8 PinIDcopy, u8 DirId)
{
     d02:	df 93       	push	r29
     d04:	cf 93       	push	r28
     d06:	cd b7       	in	r28, 0x3d	; 61
     d08:	de b7       	in	r29, 0x3e	; 62
     d0a:	27 97       	sbiw	r28, 0x07	; 7
     d0c:	0f b6       	in	r0, 0x3f	; 63
     d0e:	f8 94       	cli
     d10:	de bf       	out	0x3e, r29	; 62
     d12:	0f be       	out	0x3f, r0	; 63
     d14:	cd bf       	out	0x3d, r28	; 61
     d16:	89 83       	std	Y+1, r24	; 0x01
     d18:	6a 83       	std	Y+2, r22	; 0x02
     d1a:	4b 83       	std	Y+3, r20	; 0x03
    if (DirId == INPUT)
     d1c:	8b 81       	ldd	r24, Y+3	; 0x03
     d1e:	88 23       	and	r24, r24
     d20:	09 f0       	breq	.+2      	; 0xd24 <DIO_SetPinDirection+0x22>
     d22:	74 c0       	rjmp	.+232    	; 0xe0c <DIO_SetPinDirection+0x10a>
    {
        switch (GropuIDcopy)
     d24:	89 81       	ldd	r24, Y+1	; 0x01
     d26:	28 2f       	mov	r18, r24
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	3f 83       	std	Y+7, r19	; 0x07
     d2c:	2e 83       	std	Y+6, r18	; 0x06
     d2e:	8e 81       	ldd	r24, Y+6	; 0x06
     d30:	9f 81       	ldd	r25, Y+7	; 0x07
     d32:	81 30       	cpi	r24, 0x01	; 1
     d34:	91 05       	cpc	r25, r1
     d36:	59 f1       	breq	.+86     	; 0xd8e <DIO_SetPinDirection+0x8c>
     d38:	2e 81       	ldd	r18, Y+6	; 0x06
     d3a:	3f 81       	ldd	r19, Y+7	; 0x07
     d3c:	22 30       	cpi	r18, 0x02	; 2
     d3e:	31 05       	cpc	r19, r1
     d40:	2c f4       	brge	.+10     	; 0xd4c <DIO_SetPinDirection+0x4a>
     d42:	8e 81       	ldd	r24, Y+6	; 0x06
     d44:	9f 81       	ldd	r25, Y+7	; 0x07
     d46:	00 97       	sbiw	r24, 0x00	; 0
     d48:	69 f0       	breq	.+26     	; 0xd64 <DIO_SetPinDirection+0x62>
     d4a:	d2 c0       	rjmp	.+420    	; 0xef0 <DIO_SetPinDirection+0x1ee>
     d4c:	2e 81       	ldd	r18, Y+6	; 0x06
     d4e:	3f 81       	ldd	r19, Y+7	; 0x07
     d50:	22 30       	cpi	r18, 0x02	; 2
     d52:	31 05       	cpc	r19, r1
     d54:	89 f1       	breq	.+98     	; 0xdb8 <DIO_SetPinDirection+0xb6>
     d56:	8e 81       	ldd	r24, Y+6	; 0x06
     d58:	9f 81       	ldd	r25, Y+7	; 0x07
     d5a:	83 30       	cpi	r24, 0x03	; 3
     d5c:	91 05       	cpc	r25, r1
     d5e:	09 f4       	brne	.+2      	; 0xd62 <DIO_SetPinDirection+0x60>
     d60:	40 c0       	rjmp	.+128    	; 0xde2 <DIO_SetPinDirection+0xe0>
     d62:	c6 c0       	rjmp	.+396    	; 0xef0 <DIO_SetPinDirection+0x1ee>
        {
        case GROUPA:
            CLR_BIT(DDRA_Register, PinIDcopy);
     d64:	aa e3       	ldi	r26, 0x3A	; 58
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	ea e3       	ldi	r30, 0x3A	; 58
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	48 2f       	mov	r20, r24
     d70:	8a 81       	ldd	r24, Y+2	; 0x02
     d72:	28 2f       	mov	r18, r24
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	02 2e       	mov	r0, r18
     d7c:	02 c0       	rjmp	.+4      	; 0xd82 <DIO_SetPinDirection+0x80>
     d7e:	88 0f       	add	r24, r24
     d80:	99 1f       	adc	r25, r25
     d82:	0a 94       	dec	r0
     d84:	e2 f7       	brpl	.-8      	; 0xd7e <DIO_SetPinDirection+0x7c>
     d86:	80 95       	com	r24
     d88:	84 23       	and	r24, r20
     d8a:	8c 93       	st	X, r24
     d8c:	b1 c0       	rjmp	.+354    	; 0xef0 <DIO_SetPinDirection+0x1ee>
            break;
        case GROUPB:
            CLR_BIT(DDRB_Register, PinIDcopy);
     d8e:	a7 e3       	ldi	r26, 0x37	; 55
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	e7 e3       	ldi	r30, 0x37	; 55
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	48 2f       	mov	r20, r24
     d9a:	8a 81       	ldd	r24, Y+2	; 0x02
     d9c:	28 2f       	mov	r18, r24
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	02 2e       	mov	r0, r18
     da6:	02 c0       	rjmp	.+4      	; 0xdac <DIO_SetPinDirection+0xaa>
     da8:	88 0f       	add	r24, r24
     daa:	99 1f       	adc	r25, r25
     dac:	0a 94       	dec	r0
     dae:	e2 f7       	brpl	.-8      	; 0xda8 <DIO_SetPinDirection+0xa6>
     db0:	80 95       	com	r24
     db2:	84 23       	and	r24, r20
     db4:	8c 93       	st	X, r24
     db6:	9c c0       	rjmp	.+312    	; 0xef0 <DIO_SetPinDirection+0x1ee>
            break;
        case GROUPC:
            CLR_BIT(DDRC_Register, PinIDcopy);
     db8:	a4 e3       	ldi	r26, 0x34	; 52
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	e4 e3       	ldi	r30, 0x34	; 52
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	48 2f       	mov	r20, r24
     dc4:	8a 81       	ldd	r24, Y+2	; 0x02
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	02 2e       	mov	r0, r18
     dd0:	02 c0       	rjmp	.+4      	; 0xdd6 <DIO_SetPinDirection+0xd4>
     dd2:	88 0f       	add	r24, r24
     dd4:	99 1f       	adc	r25, r25
     dd6:	0a 94       	dec	r0
     dd8:	e2 f7       	brpl	.-8      	; 0xdd2 <DIO_SetPinDirection+0xd0>
     dda:	80 95       	com	r24
     ddc:	84 23       	and	r24, r20
     dde:	8c 93       	st	X, r24
     de0:	87 c0       	rjmp	.+270    	; 0xef0 <DIO_SetPinDirection+0x1ee>
            break;
        case GROUPD:
            CLR_BIT(DDRD_Register, PinIDcopy);
     de2:	a1 e3       	ldi	r26, 0x31	; 49
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e1 e3       	ldi	r30, 0x31	; 49
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <DIO_SetPinDirection+0xfe>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <DIO_SetPinDirection+0xfa>
     e04:	80 95       	com	r24
     e06:	84 23       	and	r24, r20
     e08:	8c 93       	st	X, r24
     e0a:	72 c0       	rjmp	.+228    	; 0xef0 <DIO_SetPinDirection+0x1ee>
            break;
        }
    }
    else if (DirId == OUTPUT)
     e0c:	8b 81       	ldd	r24, Y+3	; 0x03
     e0e:	81 30       	cpi	r24, 0x01	; 1
     e10:	09 f0       	breq	.+2      	; 0xe14 <DIO_SetPinDirection+0x112>
     e12:	6e c0       	rjmp	.+220    	; 0xef0 <DIO_SetPinDirection+0x1ee>
    {
        switch (GropuIDcopy)
     e14:	89 81       	ldd	r24, Y+1	; 0x01
     e16:	28 2f       	mov	r18, r24
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	3d 83       	std	Y+5, r19	; 0x05
     e1c:	2c 83       	std	Y+4, r18	; 0x04
     e1e:	8c 81       	ldd	r24, Y+4	; 0x04
     e20:	9d 81       	ldd	r25, Y+5	; 0x05
     e22:	81 30       	cpi	r24, 0x01	; 1
     e24:	91 05       	cpc	r25, r1
     e26:	49 f1       	breq	.+82     	; 0xe7a <DIO_SetPinDirection+0x178>
     e28:	2c 81       	ldd	r18, Y+4	; 0x04
     e2a:	3d 81       	ldd	r19, Y+5	; 0x05
     e2c:	22 30       	cpi	r18, 0x02	; 2
     e2e:	31 05       	cpc	r19, r1
     e30:	2c f4       	brge	.+10     	; 0xe3c <DIO_SetPinDirection+0x13a>
     e32:	8c 81       	ldd	r24, Y+4	; 0x04
     e34:	9d 81       	ldd	r25, Y+5	; 0x05
     e36:	00 97       	sbiw	r24, 0x00	; 0
     e38:	61 f0       	breq	.+24     	; 0xe52 <DIO_SetPinDirection+0x150>
     e3a:	5a c0       	rjmp	.+180    	; 0xef0 <DIO_SetPinDirection+0x1ee>
     e3c:	2c 81       	ldd	r18, Y+4	; 0x04
     e3e:	3d 81       	ldd	r19, Y+5	; 0x05
     e40:	22 30       	cpi	r18, 0x02	; 2
     e42:	31 05       	cpc	r19, r1
     e44:	71 f1       	breq	.+92     	; 0xea2 <DIO_SetPinDirection+0x1a0>
     e46:	8c 81       	ldd	r24, Y+4	; 0x04
     e48:	9d 81       	ldd	r25, Y+5	; 0x05
     e4a:	83 30       	cpi	r24, 0x03	; 3
     e4c:	91 05       	cpc	r25, r1
     e4e:	e9 f1       	breq	.+122    	; 0xeca <DIO_SetPinDirection+0x1c8>
     e50:	4f c0       	rjmp	.+158    	; 0xef0 <DIO_SetPinDirection+0x1ee>
        {
        case GROUPA:
            SET_BIT(DDRA_Register, PinIDcopy);
     e52:	aa e3       	ldi	r26, 0x3A	; 58
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	ea e3       	ldi	r30, 0x3A	; 58
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	48 2f       	mov	r20, r24
     e5e:	8a 81       	ldd	r24, Y+2	; 0x02
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	02 2e       	mov	r0, r18
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <DIO_SetPinDirection+0x16e>
     e6c:	88 0f       	add	r24, r24
     e6e:	99 1f       	adc	r25, r25
     e70:	0a 94       	dec	r0
     e72:	e2 f7       	brpl	.-8      	; 0xe6c <DIO_SetPinDirection+0x16a>
     e74:	84 2b       	or	r24, r20
     e76:	8c 93       	st	X, r24
     e78:	3b c0       	rjmp	.+118    	; 0xef0 <DIO_SetPinDirection+0x1ee>
            break;
        case GROUPB:
            SET_BIT(DDRB_Register, PinIDcopy);
     e7a:	a7 e3       	ldi	r26, 0x37	; 55
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	e7 e3       	ldi	r30, 0x37	; 55
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	48 2f       	mov	r20, r24
     e86:	8a 81       	ldd	r24, Y+2	; 0x02
     e88:	28 2f       	mov	r18, r24
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	02 2e       	mov	r0, r18
     e92:	02 c0       	rjmp	.+4      	; 0xe98 <DIO_SetPinDirection+0x196>
     e94:	88 0f       	add	r24, r24
     e96:	99 1f       	adc	r25, r25
     e98:	0a 94       	dec	r0
     e9a:	e2 f7       	brpl	.-8      	; 0xe94 <DIO_SetPinDirection+0x192>
     e9c:	84 2b       	or	r24, r20
     e9e:	8c 93       	st	X, r24
     ea0:	27 c0       	rjmp	.+78     	; 0xef0 <DIO_SetPinDirection+0x1ee>
            break;
        case GROUPC:
            SET_BIT(DDRC_Register, PinIDcopy);
     ea2:	a4 e3       	ldi	r26, 0x34	; 52
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	e4 e3       	ldi	r30, 0x34	; 52
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	48 2f       	mov	r20, r24
     eae:	8a 81       	ldd	r24, Y+2	; 0x02
     eb0:	28 2f       	mov	r18, r24
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	02 2e       	mov	r0, r18
     eba:	02 c0       	rjmp	.+4      	; 0xec0 <DIO_SetPinDirection+0x1be>
     ebc:	88 0f       	add	r24, r24
     ebe:	99 1f       	adc	r25, r25
     ec0:	0a 94       	dec	r0
     ec2:	e2 f7       	brpl	.-8      	; 0xebc <DIO_SetPinDirection+0x1ba>
     ec4:	84 2b       	or	r24, r20
     ec6:	8c 93       	st	X, r24
     ec8:	13 c0       	rjmp	.+38     	; 0xef0 <DIO_SetPinDirection+0x1ee>
            break;
        case GROUPD:
            SET_BIT(DDRD_Register, PinIDcopy);
     eca:	a1 e3       	ldi	r26, 0x31	; 49
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	e1 e3       	ldi	r30, 0x31	; 49
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	48 2f       	mov	r20, r24
     ed6:	8a 81       	ldd	r24, Y+2	; 0x02
     ed8:	28 2f       	mov	r18, r24
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	02 2e       	mov	r0, r18
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <DIO_SetPinDirection+0x1e6>
     ee4:	88 0f       	add	r24, r24
     ee6:	99 1f       	adc	r25, r25
     ee8:	0a 94       	dec	r0
     eea:	e2 f7       	brpl	.-8      	; 0xee4 <DIO_SetPinDirection+0x1e2>
     eec:	84 2b       	or	r24, r20
     eee:	8c 93       	st	X, r24
    }
    else
    {

    }
}
     ef0:	27 96       	adiw	r28, 0x07	; 7
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	f8 94       	cli
     ef6:	de bf       	out	0x3e, r29	; 62
     ef8:	0f be       	out	0x3f, r0	; 63
     efa:	cd bf       	out	0x3d, r28	; 61
     efc:	cf 91       	pop	r28
     efe:	df 91       	pop	r29
     f00:	08 95       	ret

00000f02 <DIO_SetPinValue>:

void DIO_SetPinValue(u8 GropuIDcopy, u8 PinIDcopy, u8 ValueId)
{
     f02:	df 93       	push	r29
     f04:	cf 93       	push	r28
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
     f0a:	27 97       	sbiw	r28, 0x07	; 7
     f0c:	0f b6       	in	r0, 0x3f	; 63
     f0e:	f8 94       	cli
     f10:	de bf       	out	0x3e, r29	; 62
     f12:	0f be       	out	0x3f, r0	; 63
     f14:	cd bf       	out	0x3d, r28	; 61
     f16:	89 83       	std	Y+1, r24	; 0x01
     f18:	6a 83       	std	Y+2, r22	; 0x02
     f1a:	4b 83       	std	Y+3, r20	; 0x03
    if (ValueId == LOW)
     f1c:	8b 81       	ldd	r24, Y+3	; 0x03
     f1e:	88 23       	and	r24, r24
     f20:	09 f0       	breq	.+2      	; 0xf24 <DIO_SetPinValue+0x22>
     f22:	74 c0       	rjmp	.+232    	; 0x100c <DIO_SetPinValue+0x10a>
    {
        switch (GropuIDcopy)
     f24:	89 81       	ldd	r24, Y+1	; 0x01
     f26:	28 2f       	mov	r18, r24
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	3f 83       	std	Y+7, r19	; 0x07
     f2c:	2e 83       	std	Y+6, r18	; 0x06
     f2e:	8e 81       	ldd	r24, Y+6	; 0x06
     f30:	9f 81       	ldd	r25, Y+7	; 0x07
     f32:	81 30       	cpi	r24, 0x01	; 1
     f34:	91 05       	cpc	r25, r1
     f36:	59 f1       	breq	.+86     	; 0xf8e <DIO_SetPinValue+0x8c>
     f38:	2e 81       	ldd	r18, Y+6	; 0x06
     f3a:	3f 81       	ldd	r19, Y+7	; 0x07
     f3c:	22 30       	cpi	r18, 0x02	; 2
     f3e:	31 05       	cpc	r19, r1
     f40:	2c f4       	brge	.+10     	; 0xf4c <DIO_SetPinValue+0x4a>
     f42:	8e 81       	ldd	r24, Y+6	; 0x06
     f44:	9f 81       	ldd	r25, Y+7	; 0x07
     f46:	00 97       	sbiw	r24, 0x00	; 0
     f48:	69 f0       	breq	.+26     	; 0xf64 <DIO_SetPinValue+0x62>
     f4a:	d2 c0       	rjmp	.+420    	; 0x10f0 <DIO_SetPinValue+0x1ee>
     f4c:	2e 81       	ldd	r18, Y+6	; 0x06
     f4e:	3f 81       	ldd	r19, Y+7	; 0x07
     f50:	22 30       	cpi	r18, 0x02	; 2
     f52:	31 05       	cpc	r19, r1
     f54:	89 f1       	breq	.+98     	; 0xfb8 <DIO_SetPinValue+0xb6>
     f56:	8e 81       	ldd	r24, Y+6	; 0x06
     f58:	9f 81       	ldd	r25, Y+7	; 0x07
     f5a:	83 30       	cpi	r24, 0x03	; 3
     f5c:	91 05       	cpc	r25, r1
     f5e:	09 f4       	brne	.+2      	; 0xf62 <DIO_SetPinValue+0x60>
     f60:	40 c0       	rjmp	.+128    	; 0xfe2 <DIO_SetPinValue+0xe0>
     f62:	c6 c0       	rjmp	.+396    	; 0x10f0 <DIO_SetPinValue+0x1ee>
        {
        case GROUPA:
            CLR_BIT(PORTA_Register, PinIDcopy);
     f64:	ab e3       	ldi	r26, 0x3B	; 59
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	eb e3       	ldi	r30, 0x3B	; 59
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	48 2f       	mov	r20, r24
     f70:	8a 81       	ldd	r24, Y+2	; 0x02
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	02 2e       	mov	r0, r18
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <DIO_SetPinValue+0x80>
     f7e:	88 0f       	add	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	0a 94       	dec	r0
     f84:	e2 f7       	brpl	.-8      	; 0xf7e <DIO_SetPinValue+0x7c>
     f86:	80 95       	com	r24
     f88:	84 23       	and	r24, r20
     f8a:	8c 93       	st	X, r24
     f8c:	b1 c0       	rjmp	.+354    	; 0x10f0 <DIO_SetPinValue+0x1ee>
            break;
        case GROUPB:
            CLR_BIT(PORTB_Register, PinIDcopy);
     f8e:	a8 e3       	ldi	r26, 0x38	; 56
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	e8 e3       	ldi	r30, 0x38	; 56
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	48 2f       	mov	r20, r24
     f9a:	8a 81       	ldd	r24, Y+2	; 0x02
     f9c:	28 2f       	mov	r18, r24
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	02 2e       	mov	r0, r18
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <DIO_SetPinValue+0xaa>
     fa8:	88 0f       	add	r24, r24
     faa:	99 1f       	adc	r25, r25
     fac:	0a 94       	dec	r0
     fae:	e2 f7       	brpl	.-8      	; 0xfa8 <DIO_SetPinValue+0xa6>
     fb0:	80 95       	com	r24
     fb2:	84 23       	and	r24, r20
     fb4:	8c 93       	st	X, r24
     fb6:	9c c0       	rjmp	.+312    	; 0x10f0 <DIO_SetPinValue+0x1ee>
            break;
        case GROUPC:
            CLR_BIT(PORTC_Register, PinIDcopy);
     fb8:	a5 e3       	ldi	r26, 0x35	; 53
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	e5 e3       	ldi	r30, 0x35	; 53
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	48 2f       	mov	r20, r24
     fc4:	8a 81       	ldd	r24, Y+2	; 0x02
     fc6:	28 2f       	mov	r18, r24
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	02 2e       	mov	r0, r18
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <DIO_SetPinValue+0xd4>
     fd2:	88 0f       	add	r24, r24
     fd4:	99 1f       	adc	r25, r25
     fd6:	0a 94       	dec	r0
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <DIO_SetPinValue+0xd0>
     fda:	80 95       	com	r24
     fdc:	84 23       	and	r24, r20
     fde:	8c 93       	st	X, r24
     fe0:	87 c0       	rjmp	.+270    	; 0x10f0 <DIO_SetPinValue+0x1ee>
            break;
        case GROUPD:
            CLR_BIT(PORTD_Register, PinIDcopy);
     fe2:	a2 e3       	ldi	r26, 0x32	; 50
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	e2 e3       	ldi	r30, 0x32	; 50
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	48 2f       	mov	r20, r24
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	28 2f       	mov	r18, r24
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	02 2e       	mov	r0, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <DIO_SetPinValue+0xfe>
     ffc:	88 0f       	add	r24, r24
     ffe:	99 1f       	adc	r25, r25
    1000:	0a 94       	dec	r0
    1002:	e2 f7       	brpl	.-8      	; 0xffc <DIO_SetPinValue+0xfa>
    1004:	80 95       	com	r24
    1006:	84 23       	and	r24, r20
    1008:	8c 93       	st	X, r24
    100a:	72 c0       	rjmp	.+228    	; 0x10f0 <DIO_SetPinValue+0x1ee>
            break;
        }
    }
    else if (ValueId == HIGH)
    100c:	8b 81       	ldd	r24, Y+3	; 0x03
    100e:	81 30       	cpi	r24, 0x01	; 1
    1010:	09 f0       	breq	.+2      	; 0x1014 <DIO_SetPinValue+0x112>
    1012:	6e c0       	rjmp	.+220    	; 0x10f0 <DIO_SetPinValue+0x1ee>
    {
        switch (GropuIDcopy)
    1014:	89 81       	ldd	r24, Y+1	; 0x01
    1016:	28 2f       	mov	r18, r24
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	3d 83       	std	Y+5, r19	; 0x05
    101c:	2c 83       	std	Y+4, r18	; 0x04
    101e:	8c 81       	ldd	r24, Y+4	; 0x04
    1020:	9d 81       	ldd	r25, Y+5	; 0x05
    1022:	81 30       	cpi	r24, 0x01	; 1
    1024:	91 05       	cpc	r25, r1
    1026:	49 f1       	breq	.+82     	; 0x107a <DIO_SetPinValue+0x178>
    1028:	2c 81       	ldd	r18, Y+4	; 0x04
    102a:	3d 81       	ldd	r19, Y+5	; 0x05
    102c:	22 30       	cpi	r18, 0x02	; 2
    102e:	31 05       	cpc	r19, r1
    1030:	2c f4       	brge	.+10     	; 0x103c <DIO_SetPinValue+0x13a>
    1032:	8c 81       	ldd	r24, Y+4	; 0x04
    1034:	9d 81       	ldd	r25, Y+5	; 0x05
    1036:	00 97       	sbiw	r24, 0x00	; 0
    1038:	61 f0       	breq	.+24     	; 0x1052 <DIO_SetPinValue+0x150>
    103a:	5a c0       	rjmp	.+180    	; 0x10f0 <DIO_SetPinValue+0x1ee>
    103c:	2c 81       	ldd	r18, Y+4	; 0x04
    103e:	3d 81       	ldd	r19, Y+5	; 0x05
    1040:	22 30       	cpi	r18, 0x02	; 2
    1042:	31 05       	cpc	r19, r1
    1044:	71 f1       	breq	.+92     	; 0x10a2 <DIO_SetPinValue+0x1a0>
    1046:	8c 81       	ldd	r24, Y+4	; 0x04
    1048:	9d 81       	ldd	r25, Y+5	; 0x05
    104a:	83 30       	cpi	r24, 0x03	; 3
    104c:	91 05       	cpc	r25, r1
    104e:	e9 f1       	breq	.+122    	; 0x10ca <DIO_SetPinValue+0x1c8>
    1050:	4f c0       	rjmp	.+158    	; 0x10f0 <DIO_SetPinValue+0x1ee>
        {
        case GROUPA:
            SET_BIT(PORTA_Register, PinIDcopy);
    1052:	ab e3       	ldi	r26, 0x3B	; 59
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	eb e3       	ldi	r30, 0x3B	; 59
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	48 2f       	mov	r20, r24
    105e:	8a 81       	ldd	r24, Y+2	; 0x02
    1060:	28 2f       	mov	r18, r24
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	02 2e       	mov	r0, r18
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <DIO_SetPinValue+0x16e>
    106c:	88 0f       	add	r24, r24
    106e:	99 1f       	adc	r25, r25
    1070:	0a 94       	dec	r0
    1072:	e2 f7       	brpl	.-8      	; 0x106c <DIO_SetPinValue+0x16a>
    1074:	84 2b       	or	r24, r20
    1076:	8c 93       	st	X, r24
    1078:	3b c0       	rjmp	.+118    	; 0x10f0 <DIO_SetPinValue+0x1ee>
            break;
        case GROUPB:
            SET_BIT(PORTB_Register, PinIDcopy);
    107a:	a8 e3       	ldi	r26, 0x38	; 56
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	e8 e3       	ldi	r30, 0x38	; 56
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	48 2f       	mov	r20, r24
    1086:	8a 81       	ldd	r24, Y+2	; 0x02
    1088:	28 2f       	mov	r18, r24
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	02 2e       	mov	r0, r18
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <DIO_SetPinValue+0x196>
    1094:	88 0f       	add	r24, r24
    1096:	99 1f       	adc	r25, r25
    1098:	0a 94       	dec	r0
    109a:	e2 f7       	brpl	.-8      	; 0x1094 <DIO_SetPinValue+0x192>
    109c:	84 2b       	or	r24, r20
    109e:	8c 93       	st	X, r24
    10a0:	27 c0       	rjmp	.+78     	; 0x10f0 <DIO_SetPinValue+0x1ee>
            break;
        case GROUPC:
            SET_BIT(PORTC_Register, PinIDcopy);
    10a2:	a5 e3       	ldi	r26, 0x35	; 53
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	e5 e3       	ldi	r30, 0x35	; 53
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	48 2f       	mov	r20, r24
    10ae:	8a 81       	ldd	r24, Y+2	; 0x02
    10b0:	28 2f       	mov	r18, r24
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	02 2e       	mov	r0, r18
    10ba:	02 c0       	rjmp	.+4      	; 0x10c0 <DIO_SetPinValue+0x1be>
    10bc:	88 0f       	add	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	0a 94       	dec	r0
    10c2:	e2 f7       	brpl	.-8      	; 0x10bc <DIO_SetPinValue+0x1ba>
    10c4:	84 2b       	or	r24, r20
    10c6:	8c 93       	st	X, r24
    10c8:	13 c0       	rjmp	.+38     	; 0x10f0 <DIO_SetPinValue+0x1ee>
            break;
        case GROUPD:
            SET_BIT(PORTD_Register, PinIDcopy);
    10ca:	a2 e3       	ldi	r26, 0x32	; 50
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	e2 e3       	ldi	r30, 0x32	; 50
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	48 2f       	mov	r20, r24
    10d6:	8a 81       	ldd	r24, Y+2	; 0x02
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	02 2e       	mov	r0, r18
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <DIO_SetPinValue+0x1e6>
    10e4:	88 0f       	add	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	0a 94       	dec	r0
    10ea:	e2 f7       	brpl	.-8      	; 0x10e4 <DIO_SetPinValue+0x1e2>
    10ec:	84 2b       	or	r24, r20
    10ee:	8c 93       	st	X, r24
            break;
        }
    }
}
    10f0:	27 96       	adiw	r28, 0x07	; 7
    10f2:	0f b6       	in	r0, 0x3f	; 63
    10f4:	f8 94       	cli
    10f6:	de bf       	out	0x3e, r29	; 62
    10f8:	0f be       	out	0x3f, r0	; 63
    10fa:	cd bf       	out	0x3d, r28	; 61
    10fc:	cf 91       	pop	r28
    10fe:	df 91       	pop	r29
    1100:	08 95       	ret

00001102 <DIO_GetPinValue>:

u8 DIO_GetPinValue(u8 GropuIDcopy, u8 PinIDcopy)
{
    1102:	df 93       	push	r29
    1104:	cf 93       	push	r28
    1106:	00 d0       	rcall	.+0      	; 0x1108 <DIO_GetPinValue+0x6>
    1108:	00 d0       	rcall	.+0      	; 0x110a <DIO_GetPinValue+0x8>
    110a:	0f 92       	push	r0
    110c:	cd b7       	in	r28, 0x3d	; 61
    110e:	de b7       	in	r29, 0x3e	; 62
    1110:	8a 83       	std	Y+2, r24	; 0x02
    1112:	6b 83       	std	Y+3, r22	; 0x03
    u8 result = 0xFF;
    1114:	8f ef       	ldi	r24, 0xFF	; 255
    1116:	89 83       	std	Y+1, r24	; 0x01
    switch (GropuIDcopy)
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	3d 83       	std	Y+5, r19	; 0x05
    1120:	2c 83       	std	Y+4, r18	; 0x04
    1122:	4c 81       	ldd	r20, Y+4	; 0x04
    1124:	5d 81       	ldd	r21, Y+5	; 0x05
    1126:	41 30       	cpi	r20, 0x01	; 1
    1128:	51 05       	cpc	r21, r1
    112a:	41 f1       	breq	.+80     	; 0x117c <DIO_GetPinValue+0x7a>
    112c:	8c 81       	ldd	r24, Y+4	; 0x04
    112e:	9d 81       	ldd	r25, Y+5	; 0x05
    1130:	82 30       	cpi	r24, 0x02	; 2
    1132:	91 05       	cpc	r25, r1
    1134:	34 f4       	brge	.+12     	; 0x1142 <DIO_GetPinValue+0x40>
    1136:	2c 81       	ldd	r18, Y+4	; 0x04
    1138:	3d 81       	ldd	r19, Y+5	; 0x05
    113a:	21 15       	cp	r18, r1
    113c:	31 05       	cpc	r19, r1
    113e:	61 f0       	breq	.+24     	; 0x1158 <DIO_GetPinValue+0x56>
    1140:	52 c0       	rjmp	.+164    	; 0x11e6 <DIO_GetPinValue+0xe4>
    1142:	4c 81       	ldd	r20, Y+4	; 0x04
    1144:	5d 81       	ldd	r21, Y+5	; 0x05
    1146:	42 30       	cpi	r20, 0x02	; 2
    1148:	51 05       	cpc	r21, r1
    114a:	51 f1       	breq	.+84     	; 0x11a0 <DIO_GetPinValue+0x9e>
    114c:	8c 81       	ldd	r24, Y+4	; 0x04
    114e:	9d 81       	ldd	r25, Y+5	; 0x05
    1150:	83 30       	cpi	r24, 0x03	; 3
    1152:	91 05       	cpc	r25, r1
    1154:	b9 f1       	breq	.+110    	; 0x11c4 <DIO_GetPinValue+0xc2>
    1156:	47 c0       	rjmp	.+142    	; 0x11e6 <DIO_GetPinValue+0xe4>
    {
    case GROUPA:
        result = GET_BIT(PINA_Register, PinIDcopy);
    1158:	e9 e3       	ldi	r30, 0x39	; 57
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	8b 81       	ldd	r24, Y+3	; 0x03
    1164:	88 2f       	mov	r24, r24
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	a9 01       	movw	r20, r18
    116a:	02 c0       	rjmp	.+4      	; 0x1170 <DIO_GetPinValue+0x6e>
    116c:	55 95       	asr	r21
    116e:	47 95       	ror	r20
    1170:	8a 95       	dec	r24
    1172:	e2 f7       	brpl	.-8      	; 0x116c <DIO_GetPinValue+0x6a>
    1174:	ca 01       	movw	r24, r20
    1176:	81 70       	andi	r24, 0x01	; 1
    1178:	89 83       	std	Y+1, r24	; 0x01
    117a:	35 c0       	rjmp	.+106    	; 0x11e6 <DIO_GetPinValue+0xe4>
        break;
    case GROUPB:
        result = GET_BIT(PINB_Register, PinIDcopy);
    117c:	e6 e3       	ldi	r30, 0x36	; 54
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	28 2f       	mov	r18, r24
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	8b 81       	ldd	r24, Y+3	; 0x03
    1188:	88 2f       	mov	r24, r24
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	a9 01       	movw	r20, r18
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <DIO_GetPinValue+0x92>
    1190:	55 95       	asr	r21
    1192:	47 95       	ror	r20
    1194:	8a 95       	dec	r24
    1196:	e2 f7       	brpl	.-8      	; 0x1190 <DIO_GetPinValue+0x8e>
    1198:	ca 01       	movw	r24, r20
    119a:	81 70       	andi	r24, 0x01	; 1
    119c:	89 83       	std	Y+1, r24	; 0x01
    119e:	23 c0       	rjmp	.+70     	; 0x11e6 <DIO_GetPinValue+0xe4>
        break;
    case GROUPC:
        result = GET_BIT(PINC_Register, PinIDcopy);
    11a0:	e3 e3       	ldi	r30, 0x33	; 51
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	28 2f       	mov	r18, r24
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	8b 81       	ldd	r24, Y+3	; 0x03
    11ac:	88 2f       	mov	r24, r24
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	a9 01       	movw	r20, r18
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <DIO_GetPinValue+0xb6>
    11b4:	55 95       	asr	r21
    11b6:	47 95       	ror	r20
    11b8:	8a 95       	dec	r24
    11ba:	e2 f7       	brpl	.-8      	; 0x11b4 <DIO_GetPinValue+0xb2>
    11bc:	ca 01       	movw	r24, r20
    11be:	81 70       	andi	r24, 0x01	; 1
    11c0:	89 83       	std	Y+1, r24	; 0x01
    11c2:	11 c0       	rjmp	.+34     	; 0x11e6 <DIO_GetPinValue+0xe4>
        break;
    case GROUPD:
        result = GET_BIT(PIND_Register, PinIDcopy);
    11c4:	e0 e3       	ldi	r30, 0x30	; 48
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	8b 81       	ldd	r24, Y+3	; 0x03
    11d0:	88 2f       	mov	r24, r24
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	a9 01       	movw	r20, r18
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <DIO_GetPinValue+0xda>
    11d8:	55 95       	asr	r21
    11da:	47 95       	ror	r20
    11dc:	8a 95       	dec	r24
    11de:	e2 f7       	brpl	.-8      	; 0x11d8 <DIO_GetPinValue+0xd6>
    11e0:	ca 01       	movw	r24, r20
    11e2:	81 70       	andi	r24, 0x01	; 1
    11e4:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return result;
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    11e8:	0f 90       	pop	r0
    11ea:	0f 90       	pop	r0
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	0f 90       	pop	r0
    11f2:	cf 91       	pop	r28
    11f4:	df 91       	pop	r29
    11f6:	08 95       	ret

000011f8 <DIO_SetGroupDirection>:

void DIO_SetGroupDirection(u8 GropuIDcopy, u8 DirID)
{
    11f8:	df 93       	push	r29
    11fa:	cf 93       	push	r28
    11fc:	00 d0       	rcall	.+0      	; 0x11fe <DIO_SetGroupDirection+0x6>
    11fe:	00 d0       	rcall	.+0      	; 0x1200 <DIO_SetGroupDirection+0x8>
    1200:	cd b7       	in	r28, 0x3d	; 61
    1202:	de b7       	in	r29, 0x3e	; 62
    1204:	89 83       	std	Y+1, r24	; 0x01
    1206:	6a 83       	std	Y+2, r22	; 0x02
    switch (GropuIDcopy)
    1208:	89 81       	ldd	r24, Y+1	; 0x01
    120a:	28 2f       	mov	r18, r24
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	3c 83       	std	Y+4, r19	; 0x04
    1210:	2b 83       	std	Y+3, r18	; 0x03
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
    1214:	9c 81       	ldd	r25, Y+4	; 0x04
    1216:	81 30       	cpi	r24, 0x01	; 1
    1218:	91 05       	cpc	r25, r1
    121a:	d1 f0       	breq	.+52     	; 0x1250 <DIO_SetGroupDirection+0x58>
    121c:	2b 81       	ldd	r18, Y+3	; 0x03
    121e:	3c 81       	ldd	r19, Y+4	; 0x04
    1220:	22 30       	cpi	r18, 0x02	; 2
    1222:	31 05       	cpc	r19, r1
    1224:	2c f4       	brge	.+10     	; 0x1230 <DIO_SetGroupDirection+0x38>
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	9c 81       	ldd	r25, Y+4	; 0x04
    122a:	00 97       	sbiw	r24, 0x00	; 0
    122c:	61 f0       	breq	.+24     	; 0x1246 <DIO_SetGroupDirection+0x4e>
    122e:	1e c0       	rjmp	.+60     	; 0x126c <DIO_SetGroupDirection+0x74>
    1230:	2b 81       	ldd	r18, Y+3	; 0x03
    1232:	3c 81       	ldd	r19, Y+4	; 0x04
    1234:	22 30       	cpi	r18, 0x02	; 2
    1236:	31 05       	cpc	r19, r1
    1238:	81 f0       	breq	.+32     	; 0x125a <DIO_SetGroupDirection+0x62>
    123a:	8b 81       	ldd	r24, Y+3	; 0x03
    123c:	9c 81       	ldd	r25, Y+4	; 0x04
    123e:	83 30       	cpi	r24, 0x03	; 3
    1240:	91 05       	cpc	r25, r1
    1242:	81 f0       	breq	.+32     	; 0x1264 <DIO_SetGroupDirection+0x6c>
    1244:	13 c0       	rjmp	.+38     	; 0x126c <DIO_SetGroupDirection+0x74>
    {
    case GROUPA:
        DDRA_Register = DirID;
    1246:	ea e3       	ldi	r30, 0x3A	; 58
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	8a 81       	ldd	r24, Y+2	; 0x02
    124c:	80 83       	st	Z, r24
    124e:	0e c0       	rjmp	.+28     	; 0x126c <DIO_SetGroupDirection+0x74>
        break;
    case GROUPB:
        DDRB_Register = DirID;
    1250:	e7 e3       	ldi	r30, 0x37	; 55
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	80 83       	st	Z, r24
    1258:	09 c0       	rjmp	.+18     	; 0x126c <DIO_SetGroupDirection+0x74>
        break;
    case GROUPC:
        DDRC_Register = DirID;
    125a:	e4 e3       	ldi	r30, 0x34	; 52
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	80 83       	st	Z, r24
    1262:	04 c0       	rjmp	.+8      	; 0x126c <DIO_SetGroupDirection+0x74>
        break;
    case GROUPD:
        DDRD_Register = DirID;
    1264:	e1 e3       	ldi	r30, 0x31	; 49
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	8a 81       	ldd	r24, Y+2	; 0x02
    126a:	80 83       	st	Z, r24
        break;
    }
}
    126c:	0f 90       	pop	r0
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	cf 91       	pop	r28
    1276:	df 91       	pop	r29
    1278:	08 95       	ret

0000127a <DIO_SetGroupValue>:

void DIO_SetGroupValue(u8 GropuIDcopy, u8 valueID)
{
    127a:	df 93       	push	r29
    127c:	cf 93       	push	r28
    127e:	00 d0       	rcall	.+0      	; 0x1280 <DIO_SetGroupValue+0x6>
    1280:	00 d0       	rcall	.+0      	; 0x1282 <DIO_SetGroupValue+0x8>
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62
    1286:	89 83       	std	Y+1, r24	; 0x01
    1288:	6a 83       	std	Y+2, r22	; 0x02

    switch (GropuIDcopy)
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	28 2f       	mov	r18, r24
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	3c 83       	std	Y+4, r19	; 0x04
    1292:	2b 83       	std	Y+3, r18	; 0x03
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	9c 81       	ldd	r25, Y+4	; 0x04
    1298:	81 30       	cpi	r24, 0x01	; 1
    129a:	91 05       	cpc	r25, r1
    129c:	d1 f0       	breq	.+52     	; 0x12d2 <DIO_SetGroupValue+0x58>
    129e:	2b 81       	ldd	r18, Y+3	; 0x03
    12a0:	3c 81       	ldd	r19, Y+4	; 0x04
    12a2:	22 30       	cpi	r18, 0x02	; 2
    12a4:	31 05       	cpc	r19, r1
    12a6:	2c f4       	brge	.+10     	; 0x12b2 <DIO_SetGroupValue+0x38>
    12a8:	8b 81       	ldd	r24, Y+3	; 0x03
    12aa:	9c 81       	ldd	r25, Y+4	; 0x04
    12ac:	00 97       	sbiw	r24, 0x00	; 0
    12ae:	61 f0       	breq	.+24     	; 0x12c8 <DIO_SetGroupValue+0x4e>
    12b0:	1e c0       	rjmp	.+60     	; 0x12ee <DIO_SetGroupValue+0x74>
    12b2:	2b 81       	ldd	r18, Y+3	; 0x03
    12b4:	3c 81       	ldd	r19, Y+4	; 0x04
    12b6:	22 30       	cpi	r18, 0x02	; 2
    12b8:	31 05       	cpc	r19, r1
    12ba:	81 f0       	breq	.+32     	; 0x12dc <DIO_SetGroupValue+0x62>
    12bc:	8b 81       	ldd	r24, Y+3	; 0x03
    12be:	9c 81       	ldd	r25, Y+4	; 0x04
    12c0:	83 30       	cpi	r24, 0x03	; 3
    12c2:	91 05       	cpc	r25, r1
    12c4:	81 f0       	breq	.+32     	; 0x12e6 <DIO_SetGroupValue+0x6c>
    12c6:	13 c0       	rjmp	.+38     	; 0x12ee <DIO_SetGroupValue+0x74>
    {
    case GROUPA:
        PORTA_Register = valueID;
    12c8:	eb e3       	ldi	r30, 0x3B	; 59
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	8a 81       	ldd	r24, Y+2	; 0x02
    12ce:	80 83       	st	Z, r24
    12d0:	0e c0       	rjmp	.+28     	; 0x12ee <DIO_SetGroupValue+0x74>
        break;
    case GROUPB:
        PORTB_Register = valueID;
    12d2:	e8 e3       	ldi	r30, 0x38	; 56
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	8a 81       	ldd	r24, Y+2	; 0x02
    12d8:	80 83       	st	Z, r24
    12da:	09 c0       	rjmp	.+18     	; 0x12ee <DIO_SetGroupValue+0x74>
        break;
    case GROUPC:
        PORTC_Register = valueID;
    12dc:	e5 e3       	ldi	r30, 0x35	; 53
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	8a 81       	ldd	r24, Y+2	; 0x02
    12e2:	80 83       	st	Z, r24
    12e4:	04 c0       	rjmp	.+8      	; 0x12ee <DIO_SetGroupValue+0x74>
        break;
    case GROUPD:
        PORTD_Register = valueID;
    12e6:	e2 e3       	ldi	r30, 0x32	; 50
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	80 83       	st	Z, r24
        break;
    }
}
    12ee:	0f 90       	pop	r0
    12f0:	0f 90       	pop	r0
    12f2:	0f 90       	pop	r0
    12f4:	0f 90       	pop	r0
    12f6:	cf 91       	pop	r28
    12f8:	df 91       	pop	r29
    12fa:	08 95       	ret

000012fc <DIO_TogPin>:


void DIO_TogPin(u8 GropuIDcopy, u8 PinIDcopy) {
    12fc:	df 93       	push	r29
    12fe:	cf 93       	push	r28
    1300:	00 d0       	rcall	.+0      	; 0x1302 <DIO_TogPin+0x6>
    1302:	00 d0       	rcall	.+0      	; 0x1304 <DIO_TogPin+0x8>
    1304:	cd b7       	in	r28, 0x3d	; 61
    1306:	de b7       	in	r29, 0x3e	; 62
    1308:	89 83       	std	Y+1, r24	; 0x01
    130a:	6a 83       	std	Y+2, r22	; 0x02
	switch (GropuIDcopy) {
    130c:	89 81       	ldd	r24, Y+1	; 0x01
    130e:	28 2f       	mov	r18, r24
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	3c 83       	std	Y+4, r19	; 0x04
    1314:	2b 83       	std	Y+3, r18	; 0x03
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	9c 81       	ldd	r25, Y+4	; 0x04
    131a:	81 30       	cpi	r24, 0x01	; 1
    131c:	91 05       	cpc	r25, r1
    131e:	49 f1       	breq	.+82     	; 0x1372 <DIO_TogPin+0x76>
    1320:	2b 81       	ldd	r18, Y+3	; 0x03
    1322:	3c 81       	ldd	r19, Y+4	; 0x04
    1324:	22 30       	cpi	r18, 0x02	; 2
    1326:	31 05       	cpc	r19, r1
    1328:	2c f4       	brge	.+10     	; 0x1334 <DIO_TogPin+0x38>
    132a:	8b 81       	ldd	r24, Y+3	; 0x03
    132c:	9c 81       	ldd	r25, Y+4	; 0x04
    132e:	00 97       	sbiw	r24, 0x00	; 0
    1330:	61 f0       	breq	.+24     	; 0x134a <DIO_TogPin+0x4e>
    1332:	5a c0       	rjmp	.+180    	; 0x13e8 <DIO_TogPin+0xec>
    1334:	2b 81       	ldd	r18, Y+3	; 0x03
    1336:	3c 81       	ldd	r19, Y+4	; 0x04
    1338:	22 30       	cpi	r18, 0x02	; 2
    133a:	31 05       	cpc	r19, r1
    133c:	71 f1       	breq	.+92     	; 0x139a <DIO_TogPin+0x9e>
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	9c 81       	ldd	r25, Y+4	; 0x04
    1342:	83 30       	cpi	r24, 0x03	; 3
    1344:	91 05       	cpc	r25, r1
    1346:	e9 f1       	breq	.+122    	; 0x13c2 <DIO_TogPin+0xc6>
    1348:	4f c0       	rjmp	.+158    	; 0x13e8 <DIO_TogPin+0xec>
	case GROUPA:
		PORTA_Register ^= (1 << PinIDcopy);
    134a:	ab e3       	ldi	r26, 0x3B	; 59
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	eb e3       	ldi	r30, 0x3B	; 59
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	48 2f       	mov	r20, r24
    1356:	8a 81       	ldd	r24, Y+2	; 0x02
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	02 2e       	mov	r0, r18
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <DIO_TogPin+0x6c>
    1364:	88 0f       	add	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	0a 94       	dec	r0
    136a:	e2 f7       	brpl	.-8      	; 0x1364 <DIO_TogPin+0x68>
    136c:	84 27       	eor	r24, r20
    136e:	8c 93       	st	X, r24
    1370:	3b c0       	rjmp	.+118    	; 0x13e8 <DIO_TogPin+0xec>
		break;
	case GROUPB:
		PORTB_Register ^= (1 << PinIDcopy);
    1372:	a8 e3       	ldi	r26, 0x38	; 56
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	e8 e3       	ldi	r30, 0x38	; 56
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	48 2f       	mov	r20, r24
    137e:	8a 81       	ldd	r24, Y+2	; 0x02
    1380:	28 2f       	mov	r18, r24
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	02 2e       	mov	r0, r18
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <DIO_TogPin+0x94>
    138c:	88 0f       	add	r24, r24
    138e:	99 1f       	adc	r25, r25
    1390:	0a 94       	dec	r0
    1392:	e2 f7       	brpl	.-8      	; 0x138c <DIO_TogPin+0x90>
    1394:	84 27       	eor	r24, r20
    1396:	8c 93       	st	X, r24
    1398:	27 c0       	rjmp	.+78     	; 0x13e8 <DIO_TogPin+0xec>
		break;
	case GROUPC:
		PORTC_Register ^= (1 << PinIDcopy);
    139a:	a5 e3       	ldi	r26, 0x35	; 53
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	e5 e3       	ldi	r30, 0x35	; 53
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	48 2f       	mov	r20, r24
    13a6:	8a 81       	ldd	r24, Y+2	; 0x02
    13a8:	28 2f       	mov	r18, r24
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	02 2e       	mov	r0, r18
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <DIO_TogPin+0xbc>
    13b4:	88 0f       	add	r24, r24
    13b6:	99 1f       	adc	r25, r25
    13b8:	0a 94       	dec	r0
    13ba:	e2 f7       	brpl	.-8      	; 0x13b4 <DIO_TogPin+0xb8>
    13bc:	84 27       	eor	r24, r20
    13be:	8c 93       	st	X, r24
    13c0:	13 c0       	rjmp	.+38     	; 0x13e8 <DIO_TogPin+0xec>
		break;
	case GROUPD:
		PORTD_Register ^= (1 << PinIDcopy);
    13c2:	a2 e3       	ldi	r26, 0x32	; 50
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	e2 e3       	ldi	r30, 0x32	; 50
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	48 2f       	mov	r20, r24
    13ce:	8a 81       	ldd	r24, Y+2	; 0x02
    13d0:	28 2f       	mov	r18, r24
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	02 2e       	mov	r0, r18
    13da:	02 c0       	rjmp	.+4      	; 0x13e0 <DIO_TogPin+0xe4>
    13dc:	88 0f       	add	r24, r24
    13de:	99 1f       	adc	r25, r25
    13e0:	0a 94       	dec	r0
    13e2:	e2 f7       	brpl	.-8      	; 0x13dc <DIO_TogPin+0xe0>
    13e4:	84 27       	eor	r24, r20
    13e6:	8c 93       	st	X, r24
		break;
	}
}
    13e8:	0f 90       	pop	r0
    13ea:	0f 90       	pop	r0
    13ec:	0f 90       	pop	r0
    13ee:	0f 90       	pop	r0
    13f0:	cf 91       	pop	r28
    13f2:	df 91       	pop	r29
    13f4:	08 95       	ret

000013f6 <ADC_init>:
#include "ADC.h"

#define ADCD *((volatile u16*)(0x24))

void ADC_init( )
{
    13f6:	df 93       	push	r29
    13f8:	cf 93       	push	r28
    13fa:	cd b7       	in	r28, 0x3d	; 61
    13fc:	de b7       	in	r29, 0x3e	; 62
	ADMUX |= (1 << 6);
    13fe:	a7 e2       	ldi	r26, 0x27	; 39
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	e7 e2       	ldi	r30, 0x27	; 39
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	80 64       	ori	r24, 0x40	; 64
    140a:	8c 93       	st	X, r24
	ADMUX &= ~(1 << 7);
    140c:	a7 e2       	ldi	r26, 0x27	; 39
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	e7 e2       	ldi	r30, 0x27	; 39
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	8f 77       	andi	r24, 0x7F	; 127
    1418:	8c 93       	st	X, r24
	ADMUX &= ~(1 << 5);
    141a:	a7 e2       	ldi	r26, 0x27	; 39
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e7 e2       	ldi	r30, 0x27	; 39
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	8f 7d       	andi	r24, 0xDF	; 223
    1426:	8c 93       	st	X, r24
	ADCSRA &= ~(1 << 0);
    1428:	a6 e2       	ldi	r26, 0x26	; 38
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	e6 e2       	ldi	r30, 0x26	; 38
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	8e 7f       	andi	r24, 0xFE	; 254
    1434:	8c 93       	st	X, r24
	ADCSRA |= (1 << 1);
    1436:	a6 e2       	ldi	r26, 0x26	; 38
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	e6 e2       	ldi	r30, 0x26	; 38
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	82 60       	ori	r24, 0x02	; 2
    1442:	8c 93       	st	X, r24
	ADCSRA |= (1 << 2);
    1444:	a6 e2       	ldi	r26, 0x26	; 38
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	e6 e2       	ldi	r30, 0x26	; 38
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	84 60       	ori	r24, 0x04	; 4
    1450:	8c 93       	st	X, r24
	ADCSRA |= (1 << 7);
    1452:	a6 e2       	ldi	r26, 0x26	; 38
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	e6 e2       	ldi	r30, 0x26	; 38
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	80 68       	ori	r24, 0x80	; 128
    145e:	8c 93       	st	X, r24
}
    1460:	cf 91       	pop	r28
    1462:	df 91       	pop	r29
    1464:	08 95       	ret

00001466 <ADC_read>:

u16 ADC_read(u8 channel)
{
    1466:	df 93       	push	r29
    1468:	cf 93       	push	r28
    146a:	0f 92       	push	r0
    146c:	cd b7       	in	r28, 0x3d	; 61
    146e:	de b7       	in	r29, 0x3e	; 62
    1470:	89 83       	std	Y+1, r24	; 0x01
	if (channel <= 7) {
    1472:	89 81       	ldd	r24, Y+1	; 0x01
    1474:	88 30       	cpi	r24, 0x08	; 8
    1476:	40 f5       	brcc	.+80     	; 0x14c8 <ADC_read+0x62>
		ADMUX &= 0XE0;
    1478:	a7 e2       	ldi	r26, 0x27	; 39
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	e7 e2       	ldi	r30, 0x27	; 39
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	80 7e       	andi	r24, 0xE0	; 224
    1484:	8c 93       	st	X, r24
		ADMUX |= channel;
    1486:	a7 e2       	ldi	r26, 0x27	; 39
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	e7 e2       	ldi	r30, 0x27	; 39
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	90 81       	ld	r25, Z
    1490:	89 81       	ldd	r24, Y+1	; 0x01
    1492:	89 2b       	or	r24, r25
    1494:	8c 93       	st	X, r24
		ADCSRA |= (1 << 6);
    1496:	a6 e2       	ldi	r26, 0x26	; 38
    1498:	b0 e0       	ldi	r27, 0x00	; 0
    149a:	e6 e2       	ldi	r30, 0x26	; 38
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	80 81       	ld	r24, Z
    14a0:	80 64       	ori	r24, 0x40	; 64
    14a2:	8c 93       	st	X, r24
		while (GET_BIT(ADCSRA,4) != 1) {
    14a4:	e6 e2       	ldi	r30, 0x26	; 38
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	82 95       	swap	r24
    14ac:	8f 70       	andi	r24, 0x0F	; 15
    14ae:	88 2f       	mov	r24, r24
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	81 70       	andi	r24, 0x01	; 1
    14b4:	90 70       	andi	r25, 0x00	; 0
    14b6:	00 97       	sbiw	r24, 0x00	; 0
    14b8:	a9 f3       	breq	.-22     	; 0x14a4 <ADC_read+0x3e>

		}
		ADCSRA |= (1 << 4);
    14ba:	a6 e2       	ldi	r26, 0x26	; 38
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	e6 e2       	ldi	r30, 0x26	; 38
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	80 61       	ori	r24, 0x10	; 16
    14c6:	8c 93       	st	X, r24
	}
	return ADCD;
    14c8:	e4 e2       	ldi	r30, 0x24	; 36
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	91 81       	ldd	r25, Z+1	; 0x01
}
    14d0:	0f 90       	pop	r0
    14d2:	cf 91       	pop	r28
    14d4:	df 91       	pop	r29
    14d6:	08 95       	ret

000014d8 <LCD_Vinit>:
#define LCD_CLEAR 0x01
#define LCD_DATA_ENTERY 0x06
#define LCD_DISPLAY_ON 0x0C

void LCD_Vinit(void)
{
    14d8:	0f 93       	push	r16
    14da:	1f 93       	push	r17
    14dc:	df 93       	push	r29
    14de:	cf 93       	push	r28
    14e0:	cd b7       	in	r28, 0x3d	; 61
    14e2:	de b7       	in	r29, 0x3e	; 62
    14e4:	c4 55       	subi	r28, 0x54	; 84
    14e6:	d0 40       	sbci	r29, 0x00	; 0
    14e8:	0f b6       	in	r0, 0x3f	; 63
    14ea:	f8 94       	cli
    14ec:	de bf       	out	0x3e, r29	; 62
    14ee:	0f be       	out	0x3f, r0	; 63
    14f0:	cd bf       	out	0x3d, r28	; 61
    /* set DDRA as OUTPUTs pins */
DIO_SetGroupDirection(LCD_GROUP_DATA,0xFF);
    14f2:	83 e0       	ldi	r24, 0x03	; 3
    14f4:	6f ef       	ldi	r22, 0xFF	; 255
    14f6:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <DIO_SetGroupDirection>
/* confguire RS & E as output */
DIO_SetPinDirection(LCD_GROUP_CONTROL , LCD_RS_PIN , OUTPUT);
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	60 e0       	ldi	r22, 0x00	; 0
    14fe:	41 e0       	ldi	r20, 0x01	; 1
    1500:	0e 94 81 06 	call	0xd02	; 0xd02 <DIO_SetPinDirection>
DIO_SetPinDirection(LCD_GROUP_CONTROL , LCD_E_PIN , OUTPUT);
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	61 e0       	ldi	r22, 0x01	; 1
    1508:	41 e0       	ldi	r20, 0x01	; 1
    150a:	0e 94 81 06 	call	0xd02	; 0xd02 <DIO_SetPinDirection>
    150e:	fe 01       	movw	r30, r28
    1510:	ef 5a       	subi	r30, 0xAF	; 175
    1512:	ff 4f       	sbci	r31, 0xFF	; 255
    1514:	80 e0       	ldi	r24, 0x00	; 0
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	a0 ef       	ldi	r26, 0xF0	; 240
    151a:	b1 e4       	ldi	r27, 0x41	; 65
    151c:	80 83       	st	Z, r24
    151e:	91 83       	std	Z+1, r25	; 0x01
    1520:	a2 83       	std	Z+2, r26	; 0x02
    1522:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1524:	8e 01       	movw	r16, r28
    1526:	03 5b       	subi	r16, 0xB3	; 179
    1528:	1f 4f       	sbci	r17, 0xFF	; 255
    152a:	fe 01       	movw	r30, r28
    152c:	ef 5a       	subi	r30, 0xAF	; 175
    152e:	ff 4f       	sbci	r31, 0xFF	; 255
    1530:	60 81       	ld	r22, Z
    1532:	71 81       	ldd	r23, Z+1	; 0x01
    1534:	82 81       	ldd	r24, Z+2	; 0x02
    1536:	93 81       	ldd	r25, Z+3	; 0x03
    1538:	20 e0       	ldi	r18, 0x00	; 0
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	4a ef       	ldi	r20, 0xFA	; 250
    153e:	54 e4       	ldi	r21, 0x44	; 68
    1540:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1544:	dc 01       	movw	r26, r24
    1546:	cb 01       	movw	r24, r22
    1548:	f8 01       	movw	r30, r16
    154a:	80 83       	st	Z, r24
    154c:	91 83       	std	Z+1, r25	; 0x01
    154e:	a2 83       	std	Z+2, r26	; 0x02
    1550:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1552:	fe 01       	movw	r30, r28
    1554:	e3 5b       	subi	r30, 0xB3	; 179
    1556:	ff 4f       	sbci	r31, 0xFF	; 255
    1558:	60 81       	ld	r22, Z
    155a:	71 81       	ldd	r23, Z+1	; 0x01
    155c:	82 81       	ldd	r24, Z+2	; 0x02
    155e:	93 81       	ldd	r25, Z+3	; 0x03
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	40 e8       	ldi	r20, 0x80	; 128
    1566:	5f e3       	ldi	r21, 0x3F	; 63
    1568:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    156c:	88 23       	and	r24, r24
    156e:	44 f4       	brge	.+16     	; 0x1580 <LCD_Vinit+0xa8>
		__ticks = 1;
    1570:	fe 01       	movw	r30, r28
    1572:	e5 5b       	subi	r30, 0xB5	; 181
    1574:	ff 4f       	sbci	r31, 0xFF	; 255
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	91 83       	std	Z+1, r25	; 0x01
    157c:	80 83       	st	Z, r24
    157e:	64 c0       	rjmp	.+200    	; 0x1648 <LCD_Vinit+0x170>
	else if (__tmp > 65535)
    1580:	fe 01       	movw	r30, r28
    1582:	e3 5b       	subi	r30, 0xB3	; 179
    1584:	ff 4f       	sbci	r31, 0xFF	; 255
    1586:	60 81       	ld	r22, Z
    1588:	71 81       	ldd	r23, Z+1	; 0x01
    158a:	82 81       	ldd	r24, Z+2	; 0x02
    158c:	93 81       	ldd	r25, Z+3	; 0x03
    158e:	20 e0       	ldi	r18, 0x00	; 0
    1590:	3f ef       	ldi	r19, 0xFF	; 255
    1592:	4f e7       	ldi	r20, 0x7F	; 127
    1594:	57 e4       	ldi	r21, 0x47	; 71
    1596:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    159a:	18 16       	cp	r1, r24
    159c:	0c f0       	brlt	.+2      	; 0x15a0 <LCD_Vinit+0xc8>
    159e:	43 c0       	rjmp	.+134    	; 0x1626 <LCD_Vinit+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15a0:	fe 01       	movw	r30, r28
    15a2:	ef 5a       	subi	r30, 0xAF	; 175
    15a4:	ff 4f       	sbci	r31, 0xFF	; 255
    15a6:	60 81       	ld	r22, Z
    15a8:	71 81       	ldd	r23, Z+1	; 0x01
    15aa:	82 81       	ldd	r24, Z+2	; 0x02
    15ac:	93 81       	ldd	r25, Z+3	; 0x03
    15ae:	20 e0       	ldi	r18, 0x00	; 0
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	40 e2       	ldi	r20, 0x20	; 32
    15b4:	51 e4       	ldi	r21, 0x41	; 65
    15b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15ba:	dc 01       	movw	r26, r24
    15bc:	cb 01       	movw	r24, r22
    15be:	8e 01       	movw	r16, r28
    15c0:	05 5b       	subi	r16, 0xB5	; 181
    15c2:	1f 4f       	sbci	r17, 0xFF	; 255
    15c4:	bc 01       	movw	r22, r24
    15c6:	cd 01       	movw	r24, r26
    15c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15cc:	dc 01       	movw	r26, r24
    15ce:	cb 01       	movw	r24, r22
    15d0:	f8 01       	movw	r30, r16
    15d2:	91 83       	std	Z+1, r25	; 0x01
    15d4:	80 83       	st	Z, r24
    15d6:	1f c0       	rjmp	.+62     	; 0x1616 <LCD_Vinit+0x13e>
    15d8:	fe 01       	movw	r30, r28
    15da:	e7 5b       	subi	r30, 0xB7	; 183
    15dc:	ff 4f       	sbci	r31, 0xFF	; 255
    15de:	88 ec       	ldi	r24, 0xC8	; 200
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	91 83       	std	Z+1, r25	; 0x01
    15e4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15e6:	fe 01       	movw	r30, r28
    15e8:	e7 5b       	subi	r30, 0xB7	; 183
    15ea:	ff 4f       	sbci	r31, 0xFF	; 255
    15ec:	80 81       	ld	r24, Z
    15ee:	91 81       	ldd	r25, Z+1	; 0x01
    15f0:	01 97       	sbiw	r24, 0x01	; 1
    15f2:	f1 f7       	brne	.-4      	; 0x15f0 <LCD_Vinit+0x118>
    15f4:	fe 01       	movw	r30, r28
    15f6:	e7 5b       	subi	r30, 0xB7	; 183
    15f8:	ff 4f       	sbci	r31, 0xFF	; 255
    15fa:	91 83       	std	Z+1, r25	; 0x01
    15fc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15fe:	de 01       	movw	r26, r28
    1600:	a5 5b       	subi	r26, 0xB5	; 181
    1602:	bf 4f       	sbci	r27, 0xFF	; 255
    1604:	fe 01       	movw	r30, r28
    1606:	e5 5b       	subi	r30, 0xB5	; 181
    1608:	ff 4f       	sbci	r31, 0xFF	; 255
    160a:	80 81       	ld	r24, Z
    160c:	91 81       	ldd	r25, Z+1	; 0x01
    160e:	01 97       	sbiw	r24, 0x01	; 1
    1610:	11 96       	adiw	r26, 0x01	; 1
    1612:	9c 93       	st	X, r25
    1614:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1616:	fe 01       	movw	r30, r28
    1618:	e5 5b       	subi	r30, 0xB5	; 181
    161a:	ff 4f       	sbci	r31, 0xFF	; 255
    161c:	80 81       	ld	r24, Z
    161e:	91 81       	ldd	r25, Z+1	; 0x01
    1620:	00 97       	sbiw	r24, 0x00	; 0
    1622:	d1 f6       	brne	.-76     	; 0x15d8 <LCD_Vinit+0x100>
    1624:	27 c0       	rjmp	.+78     	; 0x1674 <LCD_Vinit+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1626:	8e 01       	movw	r16, r28
    1628:	05 5b       	subi	r16, 0xB5	; 181
    162a:	1f 4f       	sbci	r17, 0xFF	; 255
    162c:	fe 01       	movw	r30, r28
    162e:	e3 5b       	subi	r30, 0xB3	; 179
    1630:	ff 4f       	sbci	r31, 0xFF	; 255
    1632:	60 81       	ld	r22, Z
    1634:	71 81       	ldd	r23, Z+1	; 0x01
    1636:	82 81       	ldd	r24, Z+2	; 0x02
    1638:	93 81       	ldd	r25, Z+3	; 0x03
    163a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    163e:	dc 01       	movw	r26, r24
    1640:	cb 01       	movw	r24, r22
    1642:	f8 01       	movw	r30, r16
    1644:	91 83       	std	Z+1, r25	; 0x01
    1646:	80 83       	st	Z, r24
    1648:	de 01       	movw	r26, r28
    164a:	a9 5b       	subi	r26, 0xB9	; 185
    164c:	bf 4f       	sbci	r27, 0xFF	; 255
    164e:	fe 01       	movw	r30, r28
    1650:	e5 5b       	subi	r30, 0xB5	; 181
    1652:	ff 4f       	sbci	r31, 0xFF	; 255
    1654:	80 81       	ld	r24, Z
    1656:	91 81       	ldd	r25, Z+1	; 0x01
    1658:	8d 93       	st	X+, r24
    165a:	9c 93       	st	X, r25
    165c:	fe 01       	movw	r30, r28
    165e:	e9 5b       	subi	r30, 0xB9	; 185
    1660:	ff 4f       	sbci	r31, 0xFF	; 255
    1662:	80 81       	ld	r24, Z
    1664:	91 81       	ldd	r25, Z+1	; 0x01
    1666:	01 97       	sbiw	r24, 0x01	; 1
    1668:	f1 f7       	brne	.-4      	; 0x1666 <LCD_Vinit+0x18e>
    166a:	fe 01       	movw	r30, r28
    166c:	e9 5b       	subi	r30, 0xB9	; 185
    166e:	ff 4f       	sbci	r31, 0xFF	; 255
    1670:	91 83       	std	Z+1, r25	; 0x01
    1672:	80 83       	st	Z, r24

_delay_ms(30);
LCD_Send_Command(LCD_HOME);
    1674:	82 e0       	ldi	r24, 0x02	; 2
    1676:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <LCD_Send_Command>
    167a:	fe 01       	movw	r30, r28
    167c:	ed 5b       	subi	r30, 0xBD	; 189
    167e:	ff 4f       	sbci	r31, 0xFF	; 255
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	a0 e7       	ldi	r26, 0x70	; 112
    1686:	b1 e4       	ldi	r27, 0x41	; 65
    1688:	80 83       	st	Z, r24
    168a:	91 83       	std	Z+1, r25	; 0x01
    168c:	a2 83       	std	Z+2, r26	; 0x02
    168e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1690:	8e 01       	movw	r16, r28
    1692:	01 5c       	subi	r16, 0xC1	; 193
    1694:	1f 4f       	sbci	r17, 0xFF	; 255
    1696:	fe 01       	movw	r30, r28
    1698:	ed 5b       	subi	r30, 0xBD	; 189
    169a:	ff 4f       	sbci	r31, 0xFF	; 255
    169c:	60 81       	ld	r22, Z
    169e:	71 81       	ldd	r23, Z+1	; 0x01
    16a0:	82 81       	ldd	r24, Z+2	; 0x02
    16a2:	93 81       	ldd	r25, Z+3	; 0x03
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	4a ef       	ldi	r20, 0xFA	; 250
    16aa:	54 e4       	ldi	r21, 0x44	; 68
    16ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16b0:	dc 01       	movw	r26, r24
    16b2:	cb 01       	movw	r24, r22
    16b4:	f8 01       	movw	r30, r16
    16b6:	80 83       	st	Z, r24
    16b8:	91 83       	std	Z+1, r25	; 0x01
    16ba:	a2 83       	std	Z+2, r26	; 0x02
    16bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16be:	fe 01       	movw	r30, r28
    16c0:	ff 96       	adiw	r30, 0x3f	; 63
    16c2:	60 81       	ld	r22, Z
    16c4:	71 81       	ldd	r23, Z+1	; 0x01
    16c6:	82 81       	ldd	r24, Z+2	; 0x02
    16c8:	93 81       	ldd	r25, Z+3	; 0x03
    16ca:	20 e0       	ldi	r18, 0x00	; 0
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	40 e8       	ldi	r20, 0x80	; 128
    16d0:	5f e3       	ldi	r21, 0x3F	; 63
    16d2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16d6:	88 23       	and	r24, r24
    16d8:	2c f4       	brge	.+10     	; 0x16e4 <LCD_Vinit+0x20c>
		__ticks = 1;
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	9e af       	std	Y+62, r25	; 0x3e
    16e0:	8d af       	std	Y+61, r24	; 0x3d
    16e2:	46 c0       	rjmp	.+140    	; 0x1770 <LCD_Vinit+0x298>
	else if (__tmp > 65535)
    16e4:	fe 01       	movw	r30, r28
    16e6:	ff 96       	adiw	r30, 0x3f	; 63
    16e8:	60 81       	ld	r22, Z
    16ea:	71 81       	ldd	r23, Z+1	; 0x01
    16ec:	82 81       	ldd	r24, Z+2	; 0x02
    16ee:	93 81       	ldd	r25, Z+3	; 0x03
    16f0:	20 e0       	ldi	r18, 0x00	; 0
    16f2:	3f ef       	ldi	r19, 0xFF	; 255
    16f4:	4f e7       	ldi	r20, 0x7F	; 127
    16f6:	57 e4       	ldi	r21, 0x47	; 71
    16f8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16fc:	18 16       	cp	r1, r24
    16fe:	64 f5       	brge	.+88     	; 0x1758 <LCD_Vinit+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1700:	fe 01       	movw	r30, r28
    1702:	ed 5b       	subi	r30, 0xBD	; 189
    1704:	ff 4f       	sbci	r31, 0xFF	; 255
    1706:	60 81       	ld	r22, Z
    1708:	71 81       	ldd	r23, Z+1	; 0x01
    170a:	82 81       	ldd	r24, Z+2	; 0x02
    170c:	93 81       	ldd	r25, Z+3	; 0x03
    170e:	20 e0       	ldi	r18, 0x00	; 0
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	40 e2       	ldi	r20, 0x20	; 32
    1714:	51 e4       	ldi	r21, 0x41	; 65
    1716:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    171a:	dc 01       	movw	r26, r24
    171c:	cb 01       	movw	r24, r22
    171e:	bc 01       	movw	r22, r24
    1720:	cd 01       	movw	r24, r26
    1722:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1726:	dc 01       	movw	r26, r24
    1728:	cb 01       	movw	r24, r22
    172a:	9e af       	std	Y+62, r25	; 0x3e
    172c:	8d af       	std	Y+61, r24	; 0x3d
    172e:	0f c0       	rjmp	.+30     	; 0x174e <LCD_Vinit+0x276>
    1730:	88 ec       	ldi	r24, 0xC8	; 200
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	9c af       	std	Y+60, r25	; 0x3c
    1736:	8b af       	std	Y+59, r24	; 0x3b
    1738:	8b ad       	ldd	r24, Y+59	; 0x3b
    173a:	9c ad       	ldd	r25, Y+60	; 0x3c
    173c:	01 97       	sbiw	r24, 0x01	; 1
    173e:	f1 f7       	brne	.-4      	; 0x173c <LCD_Vinit+0x264>
    1740:	9c af       	std	Y+60, r25	; 0x3c
    1742:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1744:	8d ad       	ldd	r24, Y+61	; 0x3d
    1746:	9e ad       	ldd	r25, Y+62	; 0x3e
    1748:	01 97       	sbiw	r24, 0x01	; 1
    174a:	9e af       	std	Y+62, r25	; 0x3e
    174c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    174e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1750:	9e ad       	ldd	r25, Y+62	; 0x3e
    1752:	00 97       	sbiw	r24, 0x00	; 0
    1754:	69 f7       	brne	.-38     	; 0x1730 <LCD_Vinit+0x258>
    1756:	16 c0       	rjmp	.+44     	; 0x1784 <LCD_Vinit+0x2ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1758:	fe 01       	movw	r30, r28
    175a:	ff 96       	adiw	r30, 0x3f	; 63
    175c:	60 81       	ld	r22, Z
    175e:	71 81       	ldd	r23, Z+1	; 0x01
    1760:	82 81       	ldd	r24, Z+2	; 0x02
    1762:	93 81       	ldd	r25, Z+3	; 0x03
    1764:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1768:	dc 01       	movw	r26, r24
    176a:	cb 01       	movw	r24, r22
    176c:	9e af       	std	Y+62, r25	; 0x3e
    176e:	8d af       	std	Y+61, r24	; 0x3d
    1770:	8d ad       	ldd	r24, Y+61	; 0x3d
    1772:	9e ad       	ldd	r25, Y+62	; 0x3e
    1774:	9a af       	std	Y+58, r25	; 0x3a
    1776:	89 af       	std	Y+57, r24	; 0x39
    1778:	89 ad       	ldd	r24, Y+57	; 0x39
    177a:	9a ad       	ldd	r25, Y+58	; 0x3a
    177c:	01 97       	sbiw	r24, 0x01	; 1
    177e:	f1 f7       	brne	.-4      	; 0x177c <LCD_Vinit+0x2a4>
    1780:	9a af       	std	Y+58, r25	; 0x3a
    1782:	89 af       	std	Y+57, r24	; 0x39
_delay_ms(15);

LCD_Send_Command(LCD_SET_8FUNCTION);
    1784:	88 e3       	ldi	r24, 0x38	; 56
    1786:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <LCD_Send_Command>
    178a:	80 e0       	ldi	r24, 0x00	; 0
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	a0 e8       	ldi	r26, 0x80	; 128
    1790:	bf e3       	ldi	r27, 0x3F	; 63
    1792:	8d ab       	std	Y+53, r24	; 0x35
    1794:	9e ab       	std	Y+54, r25	; 0x36
    1796:	af ab       	std	Y+55, r26	; 0x37
    1798:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    179a:	6d a9       	ldd	r22, Y+53	; 0x35
    179c:	7e a9       	ldd	r23, Y+54	; 0x36
    179e:	8f a9       	ldd	r24, Y+55	; 0x37
    17a0:	98 ad       	ldd	r25, Y+56	; 0x38
    17a2:	20 e0       	ldi	r18, 0x00	; 0
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	4a ef       	ldi	r20, 0xFA	; 250
    17a8:	54 e4       	ldi	r21, 0x44	; 68
    17aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17ae:	dc 01       	movw	r26, r24
    17b0:	cb 01       	movw	r24, r22
    17b2:	89 ab       	std	Y+49, r24	; 0x31
    17b4:	9a ab       	std	Y+50, r25	; 0x32
    17b6:	ab ab       	std	Y+51, r26	; 0x33
    17b8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    17ba:	69 a9       	ldd	r22, Y+49	; 0x31
    17bc:	7a a9       	ldd	r23, Y+50	; 0x32
    17be:	8b a9       	ldd	r24, Y+51	; 0x33
    17c0:	9c a9       	ldd	r25, Y+52	; 0x34
    17c2:	20 e0       	ldi	r18, 0x00	; 0
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	40 e8       	ldi	r20, 0x80	; 128
    17c8:	5f e3       	ldi	r21, 0x3F	; 63
    17ca:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    17ce:	88 23       	and	r24, r24
    17d0:	2c f4       	brge	.+10     	; 0x17dc <LCD_Vinit+0x304>
		__ticks = 1;
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	98 ab       	std	Y+48, r25	; 0x30
    17d8:	8f a7       	std	Y+47, r24	; 0x2f
    17da:	3f c0       	rjmp	.+126    	; 0x185a <LCD_Vinit+0x382>
	else if (__tmp > 65535)
    17dc:	69 a9       	ldd	r22, Y+49	; 0x31
    17de:	7a a9       	ldd	r23, Y+50	; 0x32
    17e0:	8b a9       	ldd	r24, Y+51	; 0x33
    17e2:	9c a9       	ldd	r25, Y+52	; 0x34
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	3f ef       	ldi	r19, 0xFF	; 255
    17e8:	4f e7       	ldi	r20, 0x7F	; 127
    17ea:	57 e4       	ldi	r21, 0x47	; 71
    17ec:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    17f0:	18 16       	cp	r1, r24
    17f2:	4c f5       	brge	.+82     	; 0x1846 <LCD_Vinit+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17f4:	6d a9       	ldd	r22, Y+53	; 0x35
    17f6:	7e a9       	ldd	r23, Y+54	; 0x36
    17f8:	8f a9       	ldd	r24, Y+55	; 0x37
    17fa:	98 ad       	ldd	r25, Y+56	; 0x38
    17fc:	20 e0       	ldi	r18, 0x00	; 0
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	40 e2       	ldi	r20, 0x20	; 32
    1802:	51 e4       	ldi	r21, 0x41	; 65
    1804:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1808:	dc 01       	movw	r26, r24
    180a:	cb 01       	movw	r24, r22
    180c:	bc 01       	movw	r22, r24
    180e:	cd 01       	movw	r24, r26
    1810:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1814:	dc 01       	movw	r26, r24
    1816:	cb 01       	movw	r24, r22
    1818:	98 ab       	std	Y+48, r25	; 0x30
    181a:	8f a7       	std	Y+47, r24	; 0x2f
    181c:	0f c0       	rjmp	.+30     	; 0x183c <LCD_Vinit+0x364>
    181e:	88 ec       	ldi	r24, 0xC8	; 200
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	9e a7       	std	Y+46, r25	; 0x2e
    1824:	8d a7       	std	Y+45, r24	; 0x2d
    1826:	8d a5       	ldd	r24, Y+45	; 0x2d
    1828:	9e a5       	ldd	r25, Y+46	; 0x2e
    182a:	01 97       	sbiw	r24, 0x01	; 1
    182c:	f1 f7       	brne	.-4      	; 0x182a <LCD_Vinit+0x352>
    182e:	9e a7       	std	Y+46, r25	; 0x2e
    1830:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1832:	8f a5       	ldd	r24, Y+47	; 0x2f
    1834:	98 a9       	ldd	r25, Y+48	; 0x30
    1836:	01 97       	sbiw	r24, 0x01	; 1
    1838:	98 ab       	std	Y+48, r25	; 0x30
    183a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    183c:	8f a5       	ldd	r24, Y+47	; 0x2f
    183e:	98 a9       	ldd	r25, Y+48	; 0x30
    1840:	00 97       	sbiw	r24, 0x00	; 0
    1842:	69 f7       	brne	.-38     	; 0x181e <LCD_Vinit+0x346>
    1844:	14 c0       	rjmp	.+40     	; 0x186e <LCD_Vinit+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1846:	69 a9       	ldd	r22, Y+49	; 0x31
    1848:	7a a9       	ldd	r23, Y+50	; 0x32
    184a:	8b a9       	ldd	r24, Y+51	; 0x33
    184c:	9c a9       	ldd	r25, Y+52	; 0x34
    184e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1852:	dc 01       	movw	r26, r24
    1854:	cb 01       	movw	r24, r22
    1856:	98 ab       	std	Y+48, r25	; 0x30
    1858:	8f a7       	std	Y+47, r24	; 0x2f
    185a:	8f a5       	ldd	r24, Y+47	; 0x2f
    185c:	98 a9       	ldd	r25, Y+48	; 0x30
    185e:	9c a7       	std	Y+44, r25	; 0x2c
    1860:	8b a7       	std	Y+43, r24	; 0x2b
    1862:	8b a5       	ldd	r24, Y+43	; 0x2b
    1864:	9c a5       	ldd	r25, Y+44	; 0x2c
    1866:	01 97       	sbiw	r24, 0x01	; 1
    1868:	f1 f7       	brne	.-4      	; 0x1866 <LCD_Vinit+0x38e>
    186a:	9c a7       	std	Y+44, r25	; 0x2c
    186c:	8b a7       	std	Y+43, r24	; 0x2b
_delay_ms(1);

LCD_Send_Command(LCD_DISPLAY_ON);
    186e:	8c e0       	ldi	r24, 0x0C	; 12
    1870:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <LCD_Send_Command>
    1874:	80 e0       	ldi	r24, 0x00	; 0
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	a0 e8       	ldi	r26, 0x80	; 128
    187a:	bf e3       	ldi	r27, 0x3F	; 63
    187c:	8f a3       	std	Y+39, r24	; 0x27
    187e:	98 a7       	std	Y+40, r25	; 0x28
    1880:	a9 a7       	std	Y+41, r26	; 0x29
    1882:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1884:	6f a1       	ldd	r22, Y+39	; 0x27
    1886:	78 a5       	ldd	r23, Y+40	; 0x28
    1888:	89 a5       	ldd	r24, Y+41	; 0x29
    188a:	9a a5       	ldd	r25, Y+42	; 0x2a
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	4a ef       	ldi	r20, 0xFA	; 250
    1892:	54 e4       	ldi	r21, 0x44	; 68
    1894:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1898:	dc 01       	movw	r26, r24
    189a:	cb 01       	movw	r24, r22
    189c:	8b a3       	std	Y+35, r24	; 0x23
    189e:	9c a3       	std	Y+36, r25	; 0x24
    18a0:	ad a3       	std	Y+37, r26	; 0x25
    18a2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18a4:	6b a1       	ldd	r22, Y+35	; 0x23
    18a6:	7c a1       	ldd	r23, Y+36	; 0x24
    18a8:	8d a1       	ldd	r24, Y+37	; 0x25
    18aa:	9e a1       	ldd	r25, Y+38	; 0x26
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	40 e8       	ldi	r20, 0x80	; 128
    18b2:	5f e3       	ldi	r21, 0x3F	; 63
    18b4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    18b8:	88 23       	and	r24, r24
    18ba:	2c f4       	brge	.+10     	; 0x18c6 <LCD_Vinit+0x3ee>
		__ticks = 1;
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	9a a3       	std	Y+34, r25	; 0x22
    18c2:	89 a3       	std	Y+33, r24	; 0x21
    18c4:	3f c0       	rjmp	.+126    	; 0x1944 <LCD_Vinit+0x46c>
	else if (__tmp > 65535)
    18c6:	6b a1       	ldd	r22, Y+35	; 0x23
    18c8:	7c a1       	ldd	r23, Y+36	; 0x24
    18ca:	8d a1       	ldd	r24, Y+37	; 0x25
    18cc:	9e a1       	ldd	r25, Y+38	; 0x26
    18ce:	20 e0       	ldi	r18, 0x00	; 0
    18d0:	3f ef       	ldi	r19, 0xFF	; 255
    18d2:	4f e7       	ldi	r20, 0x7F	; 127
    18d4:	57 e4       	ldi	r21, 0x47	; 71
    18d6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    18da:	18 16       	cp	r1, r24
    18dc:	4c f5       	brge	.+82     	; 0x1930 <LCD_Vinit+0x458>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18de:	6f a1       	ldd	r22, Y+39	; 0x27
    18e0:	78 a5       	ldd	r23, Y+40	; 0x28
    18e2:	89 a5       	ldd	r24, Y+41	; 0x29
    18e4:	9a a5       	ldd	r25, Y+42	; 0x2a
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	40 e2       	ldi	r20, 0x20	; 32
    18ec:	51 e4       	ldi	r21, 0x41	; 65
    18ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18f2:	dc 01       	movw	r26, r24
    18f4:	cb 01       	movw	r24, r22
    18f6:	bc 01       	movw	r22, r24
    18f8:	cd 01       	movw	r24, r26
    18fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18fe:	dc 01       	movw	r26, r24
    1900:	cb 01       	movw	r24, r22
    1902:	9a a3       	std	Y+34, r25	; 0x22
    1904:	89 a3       	std	Y+33, r24	; 0x21
    1906:	0f c0       	rjmp	.+30     	; 0x1926 <LCD_Vinit+0x44e>
    1908:	88 ec       	ldi	r24, 0xC8	; 200
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	98 a3       	std	Y+32, r25	; 0x20
    190e:	8f 8f       	std	Y+31, r24	; 0x1f
    1910:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1912:	98 a1       	ldd	r25, Y+32	; 0x20
    1914:	01 97       	sbiw	r24, 0x01	; 1
    1916:	f1 f7       	brne	.-4      	; 0x1914 <LCD_Vinit+0x43c>
    1918:	98 a3       	std	Y+32, r25	; 0x20
    191a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    191c:	89 a1       	ldd	r24, Y+33	; 0x21
    191e:	9a a1       	ldd	r25, Y+34	; 0x22
    1920:	01 97       	sbiw	r24, 0x01	; 1
    1922:	9a a3       	std	Y+34, r25	; 0x22
    1924:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1926:	89 a1       	ldd	r24, Y+33	; 0x21
    1928:	9a a1       	ldd	r25, Y+34	; 0x22
    192a:	00 97       	sbiw	r24, 0x00	; 0
    192c:	69 f7       	brne	.-38     	; 0x1908 <LCD_Vinit+0x430>
    192e:	14 c0       	rjmp	.+40     	; 0x1958 <LCD_Vinit+0x480>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1930:	6b a1       	ldd	r22, Y+35	; 0x23
    1932:	7c a1       	ldd	r23, Y+36	; 0x24
    1934:	8d a1       	ldd	r24, Y+37	; 0x25
    1936:	9e a1       	ldd	r25, Y+38	; 0x26
    1938:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    193c:	dc 01       	movw	r26, r24
    193e:	cb 01       	movw	r24, r22
    1940:	9a a3       	std	Y+34, r25	; 0x22
    1942:	89 a3       	std	Y+33, r24	; 0x21
    1944:	89 a1       	ldd	r24, Y+33	; 0x21
    1946:	9a a1       	ldd	r25, Y+34	; 0x22
    1948:	9e 8f       	std	Y+30, r25	; 0x1e
    194a:	8d 8f       	std	Y+29, r24	; 0x1d
    194c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    194e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1950:	01 97       	sbiw	r24, 0x01	; 1
    1952:	f1 f7       	brne	.-4      	; 0x1950 <LCD_Vinit+0x478>
    1954:	9e 8f       	std	Y+30, r25	; 0x1e
    1956:	8d 8f       	std	Y+29, r24	; 0x1d
_delay_ms(1);

LCD_Send_Command(LCD_CLEAR);
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <LCD_Send_Command>
    195e:	80 e0       	ldi	r24, 0x00	; 0
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	a0 e0       	ldi	r26, 0x00	; 0
    1964:	b0 e4       	ldi	r27, 0x40	; 64
    1966:	89 8f       	std	Y+25, r24	; 0x19
    1968:	9a 8f       	std	Y+26, r25	; 0x1a
    196a:	ab 8f       	std	Y+27, r26	; 0x1b
    196c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    196e:	69 8d       	ldd	r22, Y+25	; 0x19
    1970:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1972:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1974:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1976:	20 e0       	ldi	r18, 0x00	; 0
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	4a ef       	ldi	r20, 0xFA	; 250
    197c:	54 e4       	ldi	r21, 0x44	; 68
    197e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1982:	dc 01       	movw	r26, r24
    1984:	cb 01       	movw	r24, r22
    1986:	8d 8b       	std	Y+21, r24	; 0x15
    1988:	9e 8b       	std	Y+22, r25	; 0x16
    198a:	af 8b       	std	Y+23, r26	; 0x17
    198c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    198e:	6d 89       	ldd	r22, Y+21	; 0x15
    1990:	7e 89       	ldd	r23, Y+22	; 0x16
    1992:	8f 89       	ldd	r24, Y+23	; 0x17
    1994:	98 8d       	ldd	r25, Y+24	; 0x18
    1996:	20 e0       	ldi	r18, 0x00	; 0
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	40 e8       	ldi	r20, 0x80	; 128
    199c:	5f e3       	ldi	r21, 0x3F	; 63
    199e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    19a2:	88 23       	and	r24, r24
    19a4:	2c f4       	brge	.+10     	; 0x19b0 <LCD_Vinit+0x4d8>
		__ticks = 1;
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	9c 8b       	std	Y+20, r25	; 0x14
    19ac:	8b 8b       	std	Y+19, r24	; 0x13
    19ae:	3f c0       	rjmp	.+126    	; 0x1a2e <LCD_Vinit+0x556>
	else if (__tmp > 65535)
    19b0:	6d 89       	ldd	r22, Y+21	; 0x15
    19b2:	7e 89       	ldd	r23, Y+22	; 0x16
    19b4:	8f 89       	ldd	r24, Y+23	; 0x17
    19b6:	98 8d       	ldd	r25, Y+24	; 0x18
    19b8:	20 e0       	ldi	r18, 0x00	; 0
    19ba:	3f ef       	ldi	r19, 0xFF	; 255
    19bc:	4f e7       	ldi	r20, 0x7F	; 127
    19be:	57 e4       	ldi	r21, 0x47	; 71
    19c0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19c4:	18 16       	cp	r1, r24
    19c6:	4c f5       	brge	.+82     	; 0x1a1a <LCD_Vinit+0x542>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19c8:	69 8d       	ldd	r22, Y+25	; 0x19
    19ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19d0:	20 e0       	ldi	r18, 0x00	; 0
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	40 e2       	ldi	r20, 0x20	; 32
    19d6:	51 e4       	ldi	r21, 0x41	; 65
    19d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19dc:	dc 01       	movw	r26, r24
    19de:	cb 01       	movw	r24, r22
    19e0:	bc 01       	movw	r22, r24
    19e2:	cd 01       	movw	r24, r26
    19e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19e8:	dc 01       	movw	r26, r24
    19ea:	cb 01       	movw	r24, r22
    19ec:	9c 8b       	std	Y+20, r25	; 0x14
    19ee:	8b 8b       	std	Y+19, r24	; 0x13
    19f0:	0f c0       	rjmp	.+30     	; 0x1a10 <LCD_Vinit+0x538>
    19f2:	88 ec       	ldi	r24, 0xC8	; 200
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	9a 8b       	std	Y+18, r25	; 0x12
    19f8:	89 8b       	std	Y+17, r24	; 0x11
    19fa:	89 89       	ldd	r24, Y+17	; 0x11
    19fc:	9a 89       	ldd	r25, Y+18	; 0x12
    19fe:	01 97       	sbiw	r24, 0x01	; 1
    1a00:	f1 f7       	brne	.-4      	; 0x19fe <LCD_Vinit+0x526>
    1a02:	9a 8b       	std	Y+18, r25	; 0x12
    1a04:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a06:	8b 89       	ldd	r24, Y+19	; 0x13
    1a08:	9c 89       	ldd	r25, Y+20	; 0x14
    1a0a:	01 97       	sbiw	r24, 0x01	; 1
    1a0c:	9c 8b       	std	Y+20, r25	; 0x14
    1a0e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a10:	8b 89       	ldd	r24, Y+19	; 0x13
    1a12:	9c 89       	ldd	r25, Y+20	; 0x14
    1a14:	00 97       	sbiw	r24, 0x00	; 0
    1a16:	69 f7       	brne	.-38     	; 0x19f2 <LCD_Vinit+0x51a>
    1a18:	14 c0       	rjmp	.+40     	; 0x1a42 <LCD_Vinit+0x56a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a1a:	6d 89       	ldd	r22, Y+21	; 0x15
    1a1c:	7e 89       	ldd	r23, Y+22	; 0x16
    1a1e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a20:	98 8d       	ldd	r25, Y+24	; 0x18
    1a22:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a26:	dc 01       	movw	r26, r24
    1a28:	cb 01       	movw	r24, r22
    1a2a:	9c 8b       	std	Y+20, r25	; 0x14
    1a2c:	8b 8b       	std	Y+19, r24	; 0x13
    1a2e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a30:	9c 89       	ldd	r25, Y+20	; 0x14
    1a32:	98 8b       	std	Y+16, r25	; 0x10
    1a34:	8f 87       	std	Y+15, r24	; 0x0f
    1a36:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a38:	98 89       	ldd	r25, Y+16	; 0x10
    1a3a:	01 97       	sbiw	r24, 0x01	; 1
    1a3c:	f1 f7       	brne	.-4      	; 0x1a3a <LCD_Vinit+0x562>
    1a3e:	98 8b       	std	Y+16, r25	; 0x10
    1a40:	8f 87       	std	Y+15, r24	; 0x0f
_delay_ms(2);

LCD_Send_Command(LCD_DATA_ENTERY);
    1a42:	86 e0       	ldi	r24, 0x06	; 6
    1a44:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <LCD_Send_Command>
    1a48:	80 e0       	ldi	r24, 0x00	; 0
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	a0 e7       	ldi	r26, 0x70	; 112
    1a4e:	b1 e4       	ldi	r27, 0x41	; 65
    1a50:	8b 87       	std	Y+11, r24	; 0x0b
    1a52:	9c 87       	std	Y+12, r25	; 0x0c
    1a54:	ad 87       	std	Y+13, r26	; 0x0d
    1a56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a58:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a60:	20 e0       	ldi	r18, 0x00	; 0
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	4a ef       	ldi	r20, 0xFA	; 250
    1a66:	54 e4       	ldi	r21, 0x44	; 68
    1a68:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a6c:	dc 01       	movw	r26, r24
    1a6e:	cb 01       	movw	r24, r22
    1a70:	8f 83       	std	Y+7, r24	; 0x07
    1a72:	98 87       	std	Y+8, r25	; 0x08
    1a74:	a9 87       	std	Y+9, r26	; 0x09
    1a76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a78:	6f 81       	ldd	r22, Y+7	; 0x07
    1a7a:	78 85       	ldd	r23, Y+8	; 0x08
    1a7c:	89 85       	ldd	r24, Y+9	; 0x09
    1a7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a80:	20 e0       	ldi	r18, 0x00	; 0
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	40 e8       	ldi	r20, 0x80	; 128
    1a86:	5f e3       	ldi	r21, 0x3F	; 63
    1a88:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a8c:	88 23       	and	r24, r24
    1a8e:	2c f4       	brge	.+10     	; 0x1a9a <LCD_Vinit+0x5c2>
		__ticks = 1;
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	9e 83       	std	Y+6, r25	; 0x06
    1a96:	8d 83       	std	Y+5, r24	; 0x05
    1a98:	3f c0       	rjmp	.+126    	; 0x1b18 <LCD_Vinit+0x640>
	else if (__tmp > 65535)
    1a9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a9c:	78 85       	ldd	r23, Y+8	; 0x08
    1a9e:	89 85       	ldd	r24, Y+9	; 0x09
    1aa0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	3f ef       	ldi	r19, 0xFF	; 255
    1aa6:	4f e7       	ldi	r20, 0x7F	; 127
    1aa8:	57 e4       	ldi	r21, 0x47	; 71
    1aaa:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1aae:	18 16       	cp	r1, r24
    1ab0:	4c f5       	brge	.+82     	; 0x1b04 <LCD_Vinit+0x62c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ab2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ab4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ab6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ab8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	40 e2       	ldi	r20, 0x20	; 32
    1ac0:	51 e4       	ldi	r21, 0x41	; 65
    1ac2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ac6:	dc 01       	movw	r26, r24
    1ac8:	cb 01       	movw	r24, r22
    1aca:	bc 01       	movw	r22, r24
    1acc:	cd 01       	movw	r24, r26
    1ace:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ad2:	dc 01       	movw	r26, r24
    1ad4:	cb 01       	movw	r24, r22
    1ad6:	9e 83       	std	Y+6, r25	; 0x06
    1ad8:	8d 83       	std	Y+5, r24	; 0x05
    1ada:	0f c0       	rjmp	.+30     	; 0x1afa <LCD_Vinit+0x622>
    1adc:	88 ec       	ldi	r24, 0xC8	; 200
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	9c 83       	std	Y+4, r25	; 0x04
    1ae2:	8b 83       	std	Y+3, r24	; 0x03
    1ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae8:	01 97       	sbiw	r24, 0x01	; 1
    1aea:	f1 f7       	brne	.-4      	; 0x1ae8 <LCD_Vinit+0x610>
    1aec:	9c 83       	std	Y+4, r25	; 0x04
    1aee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1af0:	8d 81       	ldd	r24, Y+5	; 0x05
    1af2:	9e 81       	ldd	r25, Y+6	; 0x06
    1af4:	01 97       	sbiw	r24, 0x01	; 1
    1af6:	9e 83       	std	Y+6, r25	; 0x06
    1af8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1afa:	8d 81       	ldd	r24, Y+5	; 0x05
    1afc:	9e 81       	ldd	r25, Y+6	; 0x06
    1afe:	00 97       	sbiw	r24, 0x00	; 0
    1b00:	69 f7       	brne	.-38     	; 0x1adc <LCD_Vinit+0x604>
    1b02:	14 c0       	rjmp	.+40     	; 0x1b2c <LCD_Vinit+0x654>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b04:	6f 81       	ldd	r22, Y+7	; 0x07
    1b06:	78 85       	ldd	r23, Y+8	; 0x08
    1b08:	89 85       	ldd	r24, Y+9	; 0x09
    1b0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b10:	dc 01       	movw	r26, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	9e 83       	std	Y+6, r25	; 0x06
    1b16:	8d 83       	std	Y+5, r24	; 0x05
    1b18:	8d 81       	ldd	r24, Y+5	; 0x05
    1b1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b1c:	9a 83       	std	Y+2, r25	; 0x02
    1b1e:	89 83       	std	Y+1, r24	; 0x01
    1b20:	89 81       	ldd	r24, Y+1	; 0x01
    1b22:	9a 81       	ldd	r25, Y+2	; 0x02
    1b24:	01 97       	sbiw	r24, 0x01	; 1
    1b26:	f1 f7       	brne	.-4      	; 0x1b24 <LCD_Vinit+0x64c>
    1b28:	9a 83       	std	Y+2, r25	; 0x02
    1b2a:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(15);

}
    1b2c:	cc 5a       	subi	r28, 0xAC	; 172
    1b2e:	df 4f       	sbci	r29, 0xFF	; 255
    1b30:	0f b6       	in	r0, 0x3f	; 63
    1b32:	f8 94       	cli
    1b34:	de bf       	out	0x3e, r29	; 62
    1b36:	0f be       	out	0x3f, r0	; 63
    1b38:	cd bf       	out	0x3d, r28	; 61
    1b3a:	cf 91       	pop	r28
    1b3c:	df 91       	pop	r29
    1b3e:	1f 91       	pop	r17
    1b40:	0f 91       	pop	r16
    1b42:	08 95       	ret

00001b44 <LCD_Send_Command>:

void LCD_Send_Command(u8 command)
{
    1b44:	0f 93       	push	r16
    1b46:	1f 93       	push	r17
    1b48:	df 93       	push	r29
    1b4a:	cf 93       	push	r28
    1b4c:	cd b7       	in	r28, 0x3d	; 61
    1b4e:	de b7       	in	r29, 0x3e	; 62
    1b50:	cf 56       	subi	r28, 0x6F	; 111
    1b52:	d0 40       	sbci	r29, 0x00	; 0
    1b54:	0f b6       	in	r0, 0x3f	; 63
    1b56:	f8 94       	cli
    1b58:	de bf       	out	0x3e, r29	; 62
    1b5a:	0f be       	out	0x3f, r0	; 63
    1b5c:	cd bf       	out	0x3d, r28	; 61
    1b5e:	fe 01       	movw	r30, r28
    1b60:	e1 59       	subi	r30, 0x91	; 145
    1b62:	ff 4f       	sbci	r31, 0xFF	; 255
    1b64:	80 83       	st	Z, r24
    DIO_SetPinValue(LCD_GROUP_CONTROL , LCD_RS_PIN , LOW);
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	60 e0       	ldi	r22, 0x00	; 0
    1b6a:	40 e0       	ldi	r20, 0x00	; 0
    1b6c:	0e 94 81 07 	call	0xf02	; 0xf02 <DIO_SetPinValue>
    1b70:	fe 01       	movw	r30, r28
    1b72:	e5 59       	subi	r30, 0x95	; 149
    1b74:	ff 4f       	sbci	r31, 0xFF	; 255
    1b76:	80 e0       	ldi	r24, 0x00	; 0
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	a0 e8       	ldi	r26, 0x80	; 128
    1b7c:	bf e3       	ldi	r27, 0x3F	; 63
    1b7e:	80 83       	st	Z, r24
    1b80:	91 83       	std	Z+1, r25	; 0x01
    1b82:	a2 83       	std	Z+2, r26	; 0x02
    1b84:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b86:	8e 01       	movw	r16, r28
    1b88:	09 59       	subi	r16, 0x99	; 153
    1b8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b8c:	fe 01       	movw	r30, r28
    1b8e:	e5 59       	subi	r30, 0x95	; 149
    1b90:	ff 4f       	sbci	r31, 0xFF	; 255
    1b92:	60 81       	ld	r22, Z
    1b94:	71 81       	ldd	r23, Z+1	; 0x01
    1b96:	82 81       	ldd	r24, Z+2	; 0x02
    1b98:	93 81       	ldd	r25, Z+3	; 0x03
    1b9a:	2b ea       	ldi	r18, 0xAB	; 171
    1b9c:	3a ea       	ldi	r19, 0xAA	; 170
    1b9e:	4a e2       	ldi	r20, 0x2A	; 42
    1ba0:	50 e4       	ldi	r21, 0x40	; 64
    1ba2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ba6:	dc 01       	movw	r26, r24
    1ba8:	cb 01       	movw	r24, r22
    1baa:	f8 01       	movw	r30, r16
    1bac:	80 83       	st	Z, r24
    1bae:	91 83       	std	Z+1, r25	; 0x01
    1bb0:	a2 83       	std	Z+2, r26	; 0x02
    1bb2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bb4:	fe 01       	movw	r30, r28
    1bb6:	e9 59       	subi	r30, 0x99	; 153
    1bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bba:	60 81       	ld	r22, Z
    1bbc:	71 81       	ldd	r23, Z+1	; 0x01
    1bbe:	82 81       	ldd	r24, Z+2	; 0x02
    1bc0:	93 81       	ldd	r25, Z+3	; 0x03
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	40 e8       	ldi	r20, 0x80	; 128
    1bc8:	5f e3       	ldi	r21, 0x3F	; 63
    1bca:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1bce:	88 23       	and	r24, r24
    1bd0:	34 f4       	brge	.+12     	; 0x1bde <LCD_Send_Command+0x9a>
		__ticks = 1;
    1bd2:	fe 01       	movw	r30, r28
    1bd4:	ea 59       	subi	r30, 0x9A	; 154
    1bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	80 83       	st	Z, r24
    1bdc:	e0 c0       	rjmp	.+448    	; 0x1d9e <LCD_Send_Command+0x25a>
	else if (__tmp > 255)
    1bde:	fe 01       	movw	r30, r28
    1be0:	e9 59       	subi	r30, 0x99	; 153
    1be2:	ff 4f       	sbci	r31, 0xFF	; 255
    1be4:	60 81       	ld	r22, Z
    1be6:	71 81       	ldd	r23, Z+1	; 0x01
    1be8:	82 81       	ldd	r24, Z+2	; 0x02
    1bea:	93 81       	ldd	r25, Z+3	; 0x03
    1bec:	20 e0       	ldi	r18, 0x00	; 0
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	4f e7       	ldi	r20, 0x7F	; 127
    1bf2:	53 e4       	ldi	r21, 0x43	; 67
    1bf4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1bf8:	18 16       	cp	r1, r24
    1bfa:	0c f0       	brlt	.+2      	; 0x1bfe <LCD_Send_Command+0xba>
    1bfc:	c0 c0       	rjmp	.+384    	; 0x1d7e <LCD_Send_Command+0x23a>
	{
		_delay_ms(__us / 1000.0);
    1bfe:	fe 01       	movw	r30, r28
    1c00:	e5 59       	subi	r30, 0x95	; 149
    1c02:	ff 4f       	sbci	r31, 0xFF	; 255
    1c04:	60 81       	ld	r22, Z
    1c06:	71 81       	ldd	r23, Z+1	; 0x01
    1c08:	82 81       	ldd	r24, Z+2	; 0x02
    1c0a:	93 81       	ldd	r25, Z+3	; 0x03
    1c0c:	20 e0       	ldi	r18, 0x00	; 0
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	4a e7       	ldi	r20, 0x7A	; 122
    1c12:	54 e4       	ldi	r21, 0x44	; 68
    1c14:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1c18:	dc 01       	movw	r26, r24
    1c1a:	cb 01       	movw	r24, r22
    1c1c:	fe 01       	movw	r30, r28
    1c1e:	ee 59       	subi	r30, 0x9E	; 158
    1c20:	ff 4f       	sbci	r31, 0xFF	; 255
    1c22:	80 83       	st	Z, r24
    1c24:	91 83       	std	Z+1, r25	; 0x01
    1c26:	a2 83       	std	Z+2, r26	; 0x02
    1c28:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c2a:	8e 01       	movw	r16, r28
    1c2c:	02 5a       	subi	r16, 0xA2	; 162
    1c2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c30:	fe 01       	movw	r30, r28
    1c32:	ee 59       	subi	r30, 0x9E	; 158
    1c34:	ff 4f       	sbci	r31, 0xFF	; 255
    1c36:	60 81       	ld	r22, Z
    1c38:	71 81       	ldd	r23, Z+1	; 0x01
    1c3a:	82 81       	ldd	r24, Z+2	; 0x02
    1c3c:	93 81       	ldd	r25, Z+3	; 0x03
    1c3e:	20 e0       	ldi	r18, 0x00	; 0
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	4a ef       	ldi	r20, 0xFA	; 250
    1c44:	54 e4       	ldi	r21, 0x44	; 68
    1c46:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c4a:	dc 01       	movw	r26, r24
    1c4c:	cb 01       	movw	r24, r22
    1c4e:	f8 01       	movw	r30, r16
    1c50:	80 83       	st	Z, r24
    1c52:	91 83       	std	Z+1, r25	; 0x01
    1c54:	a2 83       	std	Z+2, r26	; 0x02
    1c56:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c58:	fe 01       	movw	r30, r28
    1c5a:	e2 5a       	subi	r30, 0xA2	; 162
    1c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5e:	60 81       	ld	r22, Z
    1c60:	71 81       	ldd	r23, Z+1	; 0x01
    1c62:	82 81       	ldd	r24, Z+2	; 0x02
    1c64:	93 81       	ldd	r25, Z+3	; 0x03
    1c66:	20 e0       	ldi	r18, 0x00	; 0
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	40 e8       	ldi	r20, 0x80	; 128
    1c6c:	5f e3       	ldi	r21, 0x3F	; 63
    1c6e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c72:	88 23       	and	r24, r24
    1c74:	44 f4       	brge	.+16     	; 0x1c86 <LCD_Send_Command+0x142>
		__ticks = 1;
    1c76:	fe 01       	movw	r30, r28
    1c78:	e4 5a       	subi	r30, 0xA4	; 164
    1c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	91 83       	std	Z+1, r25	; 0x01
    1c82:	80 83       	st	Z, r24
    1c84:	64 c0       	rjmp	.+200    	; 0x1d4e <LCD_Send_Command+0x20a>
	else if (__tmp > 65535)
    1c86:	fe 01       	movw	r30, r28
    1c88:	e2 5a       	subi	r30, 0xA2	; 162
    1c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8c:	60 81       	ld	r22, Z
    1c8e:	71 81       	ldd	r23, Z+1	; 0x01
    1c90:	82 81       	ldd	r24, Z+2	; 0x02
    1c92:	93 81       	ldd	r25, Z+3	; 0x03
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	3f ef       	ldi	r19, 0xFF	; 255
    1c98:	4f e7       	ldi	r20, 0x7F	; 127
    1c9a:	57 e4       	ldi	r21, 0x47	; 71
    1c9c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ca0:	18 16       	cp	r1, r24
    1ca2:	0c f0       	brlt	.+2      	; 0x1ca6 <LCD_Send_Command+0x162>
    1ca4:	43 c0       	rjmp	.+134    	; 0x1d2c <LCD_Send_Command+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ca6:	fe 01       	movw	r30, r28
    1ca8:	ee 59       	subi	r30, 0x9E	; 158
    1caa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cac:	60 81       	ld	r22, Z
    1cae:	71 81       	ldd	r23, Z+1	; 0x01
    1cb0:	82 81       	ldd	r24, Z+2	; 0x02
    1cb2:	93 81       	ldd	r25, Z+3	; 0x03
    1cb4:	20 e0       	ldi	r18, 0x00	; 0
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	40 e2       	ldi	r20, 0x20	; 32
    1cba:	51 e4       	ldi	r21, 0x41	; 65
    1cbc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cc0:	dc 01       	movw	r26, r24
    1cc2:	cb 01       	movw	r24, r22
    1cc4:	8e 01       	movw	r16, r28
    1cc6:	04 5a       	subi	r16, 0xA4	; 164
    1cc8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cca:	bc 01       	movw	r22, r24
    1ccc:	cd 01       	movw	r24, r26
    1cce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cd2:	dc 01       	movw	r26, r24
    1cd4:	cb 01       	movw	r24, r22
    1cd6:	f8 01       	movw	r30, r16
    1cd8:	91 83       	std	Z+1, r25	; 0x01
    1cda:	80 83       	st	Z, r24
    1cdc:	1f c0       	rjmp	.+62     	; 0x1d1c <LCD_Send_Command+0x1d8>
    1cde:	fe 01       	movw	r30, r28
    1ce0:	e6 5a       	subi	r30, 0xA6	; 166
    1ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce4:	88 ec       	ldi	r24, 0xC8	; 200
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	91 83       	std	Z+1, r25	; 0x01
    1cea:	80 83       	st	Z, r24
    1cec:	fe 01       	movw	r30, r28
    1cee:	e6 5a       	subi	r30, 0xA6	; 166
    1cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf2:	80 81       	ld	r24, Z
    1cf4:	91 81       	ldd	r25, Z+1	; 0x01
    1cf6:	01 97       	sbiw	r24, 0x01	; 1
    1cf8:	f1 f7       	brne	.-4      	; 0x1cf6 <LCD_Send_Command+0x1b2>
    1cfa:	fe 01       	movw	r30, r28
    1cfc:	e6 5a       	subi	r30, 0xA6	; 166
    1cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1d00:	91 83       	std	Z+1, r25	; 0x01
    1d02:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d04:	de 01       	movw	r26, r28
    1d06:	a4 5a       	subi	r26, 0xA4	; 164
    1d08:	bf 4f       	sbci	r27, 0xFF	; 255
    1d0a:	fe 01       	movw	r30, r28
    1d0c:	e4 5a       	subi	r30, 0xA4	; 164
    1d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d10:	80 81       	ld	r24, Z
    1d12:	91 81       	ldd	r25, Z+1	; 0x01
    1d14:	01 97       	sbiw	r24, 0x01	; 1
    1d16:	11 96       	adiw	r26, 0x01	; 1
    1d18:	9c 93       	st	X, r25
    1d1a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d1c:	fe 01       	movw	r30, r28
    1d1e:	e4 5a       	subi	r30, 0xA4	; 164
    1d20:	ff 4f       	sbci	r31, 0xFF	; 255
    1d22:	80 81       	ld	r24, Z
    1d24:	91 81       	ldd	r25, Z+1	; 0x01
    1d26:	00 97       	sbiw	r24, 0x00	; 0
    1d28:	d1 f6       	brne	.-76     	; 0x1cde <LCD_Send_Command+0x19a>
    1d2a:	4b c0       	rjmp	.+150    	; 0x1dc2 <LCD_Send_Command+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d2c:	8e 01       	movw	r16, r28
    1d2e:	04 5a       	subi	r16, 0xA4	; 164
    1d30:	1f 4f       	sbci	r17, 0xFF	; 255
    1d32:	fe 01       	movw	r30, r28
    1d34:	e2 5a       	subi	r30, 0xA2	; 162
    1d36:	ff 4f       	sbci	r31, 0xFF	; 255
    1d38:	60 81       	ld	r22, Z
    1d3a:	71 81       	ldd	r23, Z+1	; 0x01
    1d3c:	82 81       	ldd	r24, Z+2	; 0x02
    1d3e:	93 81       	ldd	r25, Z+3	; 0x03
    1d40:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d44:	dc 01       	movw	r26, r24
    1d46:	cb 01       	movw	r24, r22
    1d48:	f8 01       	movw	r30, r16
    1d4a:	91 83       	std	Z+1, r25	; 0x01
    1d4c:	80 83       	st	Z, r24
    1d4e:	de 01       	movw	r26, r28
    1d50:	a8 5a       	subi	r26, 0xA8	; 168
    1d52:	bf 4f       	sbci	r27, 0xFF	; 255
    1d54:	fe 01       	movw	r30, r28
    1d56:	e4 5a       	subi	r30, 0xA4	; 164
    1d58:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5a:	80 81       	ld	r24, Z
    1d5c:	91 81       	ldd	r25, Z+1	; 0x01
    1d5e:	11 96       	adiw	r26, 0x01	; 1
    1d60:	9c 93       	st	X, r25
    1d62:	8e 93       	st	-X, r24
    1d64:	fe 01       	movw	r30, r28
    1d66:	e8 5a       	subi	r30, 0xA8	; 168
    1d68:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6a:	80 81       	ld	r24, Z
    1d6c:	91 81       	ldd	r25, Z+1	; 0x01
    1d6e:	01 97       	sbiw	r24, 0x01	; 1
    1d70:	f1 f7       	brne	.-4      	; 0x1d6e <LCD_Send_Command+0x22a>
    1d72:	fe 01       	movw	r30, r28
    1d74:	e8 5a       	subi	r30, 0xA8	; 168
    1d76:	ff 4f       	sbci	r31, 0xFF	; 255
    1d78:	91 83       	std	Z+1, r25	; 0x01
    1d7a:	80 83       	st	Z, r24
    1d7c:	22 c0       	rjmp	.+68     	; 0x1dc2 <LCD_Send_Command+0x27e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d7e:	8e 01       	movw	r16, r28
    1d80:	0a 59       	subi	r16, 0x9A	; 154
    1d82:	1f 4f       	sbci	r17, 0xFF	; 255
    1d84:	fe 01       	movw	r30, r28
    1d86:	e9 59       	subi	r30, 0x99	; 153
    1d88:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8a:	60 81       	ld	r22, Z
    1d8c:	71 81       	ldd	r23, Z+1	; 0x01
    1d8e:	82 81       	ldd	r24, Z+2	; 0x02
    1d90:	93 81       	ldd	r25, Z+3	; 0x03
    1d92:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	f8 01       	movw	r30, r16
    1d9c:	80 83       	st	Z, r24
    1d9e:	de 01       	movw	r26, r28
    1da0:	a9 5a       	subi	r26, 0xA9	; 169
    1da2:	bf 4f       	sbci	r27, 0xFF	; 255
    1da4:	fe 01       	movw	r30, r28
    1da6:	ea 59       	subi	r30, 0x9A	; 154
    1da8:	ff 4f       	sbci	r31, 0xFF	; 255
    1daa:	80 81       	ld	r24, Z
    1dac:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1dae:	fe 01       	movw	r30, r28
    1db0:	e9 5a       	subi	r30, 0xA9	; 169
    1db2:	ff 4f       	sbci	r31, 0xFF	; 255
    1db4:	80 81       	ld	r24, Z
    1db6:	8a 95       	dec	r24
    1db8:	f1 f7       	brne	.-4      	; 0x1db6 <LCD_Send_Command+0x272>
    1dba:	fe 01       	movw	r30, r28
    1dbc:	e9 5a       	subi	r30, 0xA9	; 169
    1dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc0:	80 83       	st	Z, r24
    _delay_us(1);
    DIO_SetPinValue(LCD_GROUP_CONTROL , LCD_E_PIN, HIGH);
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	61 e0       	ldi	r22, 0x01	; 1
    1dc6:	41 e0       	ldi	r20, 0x01	; 1
    1dc8:	0e 94 81 07 	call	0xf02	; 0xf02 <DIO_SetPinValue>
    1dcc:	fe 01       	movw	r30, r28
    1dce:	ed 5a       	subi	r30, 0xAD	; 173
    1dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd2:	80 e0       	ldi	r24, 0x00	; 0
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	a0 e8       	ldi	r26, 0x80	; 128
    1dd8:	bf e3       	ldi	r27, 0x3F	; 63
    1dda:	80 83       	st	Z, r24
    1ddc:	91 83       	std	Z+1, r25	; 0x01
    1dde:	a2 83       	std	Z+2, r26	; 0x02
    1de0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1de2:	8e 01       	movw	r16, r28
    1de4:	01 5b       	subi	r16, 0xB1	; 177
    1de6:	1f 4f       	sbci	r17, 0xFF	; 255
    1de8:	fe 01       	movw	r30, r28
    1dea:	ed 5a       	subi	r30, 0xAD	; 173
    1dec:	ff 4f       	sbci	r31, 0xFF	; 255
    1dee:	60 81       	ld	r22, Z
    1df0:	71 81       	ldd	r23, Z+1	; 0x01
    1df2:	82 81       	ldd	r24, Z+2	; 0x02
    1df4:	93 81       	ldd	r25, Z+3	; 0x03
    1df6:	2b ea       	ldi	r18, 0xAB	; 171
    1df8:	3a ea       	ldi	r19, 0xAA	; 170
    1dfa:	4a e2       	ldi	r20, 0x2A	; 42
    1dfc:	50 e4       	ldi	r21, 0x40	; 64
    1dfe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e02:	dc 01       	movw	r26, r24
    1e04:	cb 01       	movw	r24, r22
    1e06:	f8 01       	movw	r30, r16
    1e08:	80 83       	st	Z, r24
    1e0a:	91 83       	std	Z+1, r25	; 0x01
    1e0c:	a2 83       	std	Z+2, r26	; 0x02
    1e0e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e10:	fe 01       	movw	r30, r28
    1e12:	e1 5b       	subi	r30, 0xB1	; 177
    1e14:	ff 4f       	sbci	r31, 0xFF	; 255
    1e16:	60 81       	ld	r22, Z
    1e18:	71 81       	ldd	r23, Z+1	; 0x01
    1e1a:	82 81       	ldd	r24, Z+2	; 0x02
    1e1c:	93 81       	ldd	r25, Z+3	; 0x03
    1e1e:	20 e0       	ldi	r18, 0x00	; 0
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	40 e8       	ldi	r20, 0x80	; 128
    1e24:	5f e3       	ldi	r21, 0x3F	; 63
    1e26:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e2a:	88 23       	and	r24, r24
    1e2c:	34 f4       	brge	.+12     	; 0x1e3a <LCD_Send_Command+0x2f6>
		__ticks = 1;
    1e2e:	fe 01       	movw	r30, r28
    1e30:	e2 5b       	subi	r30, 0xB2	; 178
    1e32:	ff 4f       	sbci	r31, 0xFF	; 255
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	80 83       	st	Z, r24
    1e38:	e0 c0       	rjmp	.+448    	; 0x1ffa <LCD_Send_Command+0x4b6>
	else if (__tmp > 255)
    1e3a:	fe 01       	movw	r30, r28
    1e3c:	e1 5b       	subi	r30, 0xB1	; 177
    1e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e40:	60 81       	ld	r22, Z
    1e42:	71 81       	ldd	r23, Z+1	; 0x01
    1e44:	82 81       	ldd	r24, Z+2	; 0x02
    1e46:	93 81       	ldd	r25, Z+3	; 0x03
    1e48:	20 e0       	ldi	r18, 0x00	; 0
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	4f e7       	ldi	r20, 0x7F	; 127
    1e4e:	53 e4       	ldi	r21, 0x43	; 67
    1e50:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e54:	18 16       	cp	r1, r24
    1e56:	0c f0       	brlt	.+2      	; 0x1e5a <LCD_Send_Command+0x316>
    1e58:	c0 c0       	rjmp	.+384    	; 0x1fda <LCD_Send_Command+0x496>
	{
		_delay_ms(__us / 1000.0);
    1e5a:	fe 01       	movw	r30, r28
    1e5c:	ed 5a       	subi	r30, 0xAD	; 173
    1e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e60:	60 81       	ld	r22, Z
    1e62:	71 81       	ldd	r23, Z+1	; 0x01
    1e64:	82 81       	ldd	r24, Z+2	; 0x02
    1e66:	93 81       	ldd	r25, Z+3	; 0x03
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	4a e7       	ldi	r20, 0x7A	; 122
    1e6e:	54 e4       	ldi	r21, 0x44	; 68
    1e70:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1e74:	dc 01       	movw	r26, r24
    1e76:	cb 01       	movw	r24, r22
    1e78:	fe 01       	movw	r30, r28
    1e7a:	e6 5b       	subi	r30, 0xB6	; 182
    1e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7e:	80 83       	st	Z, r24
    1e80:	91 83       	std	Z+1, r25	; 0x01
    1e82:	a2 83       	std	Z+2, r26	; 0x02
    1e84:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e86:	8e 01       	movw	r16, r28
    1e88:	0a 5b       	subi	r16, 0xBA	; 186
    1e8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e8c:	fe 01       	movw	r30, r28
    1e8e:	e6 5b       	subi	r30, 0xB6	; 182
    1e90:	ff 4f       	sbci	r31, 0xFF	; 255
    1e92:	60 81       	ld	r22, Z
    1e94:	71 81       	ldd	r23, Z+1	; 0x01
    1e96:	82 81       	ldd	r24, Z+2	; 0x02
    1e98:	93 81       	ldd	r25, Z+3	; 0x03
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	4a ef       	ldi	r20, 0xFA	; 250
    1ea0:	54 e4       	ldi	r21, 0x44	; 68
    1ea2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	f8 01       	movw	r30, r16
    1eac:	80 83       	st	Z, r24
    1eae:	91 83       	std	Z+1, r25	; 0x01
    1eb0:	a2 83       	std	Z+2, r26	; 0x02
    1eb2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1eb4:	fe 01       	movw	r30, r28
    1eb6:	ea 5b       	subi	r30, 0xBA	; 186
    1eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eba:	60 81       	ld	r22, Z
    1ebc:	71 81       	ldd	r23, Z+1	; 0x01
    1ebe:	82 81       	ldd	r24, Z+2	; 0x02
    1ec0:	93 81       	ldd	r25, Z+3	; 0x03
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	40 e8       	ldi	r20, 0x80	; 128
    1ec8:	5f e3       	ldi	r21, 0x3F	; 63
    1eca:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ece:	88 23       	and	r24, r24
    1ed0:	44 f4       	brge	.+16     	; 0x1ee2 <LCD_Send_Command+0x39e>
		__ticks = 1;
    1ed2:	fe 01       	movw	r30, r28
    1ed4:	ec 5b       	subi	r30, 0xBC	; 188
    1ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	91 83       	std	Z+1, r25	; 0x01
    1ede:	80 83       	st	Z, r24
    1ee0:	64 c0       	rjmp	.+200    	; 0x1faa <LCD_Send_Command+0x466>
	else if (__tmp > 65535)
    1ee2:	fe 01       	movw	r30, r28
    1ee4:	ea 5b       	subi	r30, 0xBA	; 186
    1ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee8:	60 81       	ld	r22, Z
    1eea:	71 81       	ldd	r23, Z+1	; 0x01
    1eec:	82 81       	ldd	r24, Z+2	; 0x02
    1eee:	93 81       	ldd	r25, Z+3	; 0x03
    1ef0:	20 e0       	ldi	r18, 0x00	; 0
    1ef2:	3f ef       	ldi	r19, 0xFF	; 255
    1ef4:	4f e7       	ldi	r20, 0x7F	; 127
    1ef6:	57 e4       	ldi	r21, 0x47	; 71
    1ef8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1efc:	18 16       	cp	r1, r24
    1efe:	0c f0       	brlt	.+2      	; 0x1f02 <LCD_Send_Command+0x3be>
    1f00:	43 c0       	rjmp	.+134    	; 0x1f88 <LCD_Send_Command+0x444>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f02:	fe 01       	movw	r30, r28
    1f04:	e6 5b       	subi	r30, 0xB6	; 182
    1f06:	ff 4f       	sbci	r31, 0xFF	; 255
    1f08:	60 81       	ld	r22, Z
    1f0a:	71 81       	ldd	r23, Z+1	; 0x01
    1f0c:	82 81       	ldd	r24, Z+2	; 0x02
    1f0e:	93 81       	ldd	r25, Z+3	; 0x03
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	40 e2       	ldi	r20, 0x20	; 32
    1f16:	51 e4       	ldi	r21, 0x41	; 65
    1f18:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	cb 01       	movw	r24, r22
    1f20:	8e 01       	movw	r16, r28
    1f22:	0c 5b       	subi	r16, 0xBC	; 188
    1f24:	1f 4f       	sbci	r17, 0xFF	; 255
    1f26:	bc 01       	movw	r22, r24
    1f28:	cd 01       	movw	r24, r26
    1f2a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f2e:	dc 01       	movw	r26, r24
    1f30:	cb 01       	movw	r24, r22
    1f32:	f8 01       	movw	r30, r16
    1f34:	91 83       	std	Z+1, r25	; 0x01
    1f36:	80 83       	st	Z, r24
    1f38:	1f c0       	rjmp	.+62     	; 0x1f78 <LCD_Send_Command+0x434>
    1f3a:	fe 01       	movw	r30, r28
    1f3c:	ee 5b       	subi	r30, 0xBE	; 190
    1f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f40:	88 ec       	ldi	r24, 0xC8	; 200
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	91 83       	std	Z+1, r25	; 0x01
    1f46:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f48:	fe 01       	movw	r30, r28
    1f4a:	ee 5b       	subi	r30, 0xBE	; 190
    1f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4e:	80 81       	ld	r24, Z
    1f50:	91 81       	ldd	r25, Z+1	; 0x01
    1f52:	01 97       	sbiw	r24, 0x01	; 1
    1f54:	f1 f7       	brne	.-4      	; 0x1f52 <LCD_Send_Command+0x40e>
    1f56:	fe 01       	movw	r30, r28
    1f58:	ee 5b       	subi	r30, 0xBE	; 190
    1f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5c:	91 83       	std	Z+1, r25	; 0x01
    1f5e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f60:	de 01       	movw	r26, r28
    1f62:	ac 5b       	subi	r26, 0xBC	; 188
    1f64:	bf 4f       	sbci	r27, 0xFF	; 255
    1f66:	fe 01       	movw	r30, r28
    1f68:	ec 5b       	subi	r30, 0xBC	; 188
    1f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6c:	80 81       	ld	r24, Z
    1f6e:	91 81       	ldd	r25, Z+1	; 0x01
    1f70:	01 97       	sbiw	r24, 0x01	; 1
    1f72:	11 96       	adiw	r26, 0x01	; 1
    1f74:	9c 93       	st	X, r25
    1f76:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f78:	fe 01       	movw	r30, r28
    1f7a:	ec 5b       	subi	r30, 0xBC	; 188
    1f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7e:	80 81       	ld	r24, Z
    1f80:	91 81       	ldd	r25, Z+1	; 0x01
    1f82:	00 97       	sbiw	r24, 0x00	; 0
    1f84:	d1 f6       	brne	.-76     	; 0x1f3a <LCD_Send_Command+0x3f6>
    1f86:	42 c0       	rjmp	.+132    	; 0x200c <LCD_Send_Command+0x4c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f88:	8e 01       	movw	r16, r28
    1f8a:	0c 5b       	subi	r16, 0xBC	; 188
    1f8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f8e:	fe 01       	movw	r30, r28
    1f90:	ea 5b       	subi	r30, 0xBA	; 186
    1f92:	ff 4f       	sbci	r31, 0xFF	; 255
    1f94:	60 81       	ld	r22, Z
    1f96:	71 81       	ldd	r23, Z+1	; 0x01
    1f98:	82 81       	ldd	r24, Z+2	; 0x02
    1f9a:	93 81       	ldd	r25, Z+3	; 0x03
    1f9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fa0:	dc 01       	movw	r26, r24
    1fa2:	cb 01       	movw	r24, r22
    1fa4:	f8 01       	movw	r30, r16
    1fa6:	91 83       	std	Z+1, r25	; 0x01
    1fa8:	80 83       	st	Z, r24
    1faa:	de 01       	movw	r26, r28
    1fac:	a0 5c       	subi	r26, 0xC0	; 192
    1fae:	bf 4f       	sbci	r27, 0xFF	; 255
    1fb0:	fe 01       	movw	r30, r28
    1fb2:	ec 5b       	subi	r30, 0xBC	; 188
    1fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb6:	80 81       	ld	r24, Z
    1fb8:	91 81       	ldd	r25, Z+1	; 0x01
    1fba:	11 96       	adiw	r26, 0x01	; 1
    1fbc:	9c 93       	st	X, r25
    1fbe:	8e 93       	st	-X, r24
    1fc0:	fe 01       	movw	r30, r28
    1fc2:	e0 5c       	subi	r30, 0xC0	; 192
    1fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc6:	80 81       	ld	r24, Z
    1fc8:	91 81       	ldd	r25, Z+1	; 0x01
    1fca:	01 97       	sbiw	r24, 0x01	; 1
    1fcc:	f1 f7       	brne	.-4      	; 0x1fca <LCD_Send_Command+0x486>
    1fce:	fe 01       	movw	r30, r28
    1fd0:	e0 5c       	subi	r30, 0xC0	; 192
    1fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd4:	91 83       	std	Z+1, r25	; 0x01
    1fd6:	80 83       	st	Z, r24
    1fd8:	19 c0       	rjmp	.+50     	; 0x200c <LCD_Send_Command+0x4c8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1fda:	8e 01       	movw	r16, r28
    1fdc:	02 5b       	subi	r16, 0xB2	; 178
    1fde:	1f 4f       	sbci	r17, 0xFF	; 255
    1fe0:	fe 01       	movw	r30, r28
    1fe2:	e1 5b       	subi	r30, 0xB1	; 177
    1fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe6:	60 81       	ld	r22, Z
    1fe8:	71 81       	ldd	r23, Z+1	; 0x01
    1fea:	82 81       	ldd	r24, Z+2	; 0x02
    1fec:	93 81       	ldd	r25, Z+3	; 0x03
    1fee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ff2:	dc 01       	movw	r26, r24
    1ff4:	cb 01       	movw	r24, r22
    1ff6:	f8 01       	movw	r30, r16
    1ff8:	80 83       	st	Z, r24
    1ffa:	fe 01       	movw	r30, r28
    1ffc:	e2 5b       	subi	r30, 0xB2	; 178
    1ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    2000:	80 81       	ld	r24, Z
    2002:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2004:	8f ad       	ldd	r24, Y+63	; 0x3f
    2006:	8a 95       	dec	r24
    2008:	f1 f7       	brne	.-4      	; 0x2006 <LCD_Send_Command+0x4c2>
    200a:	8f af       	std	Y+63, r24	; 0x3f
    _delay_us(1);
    DIO_SetGroupValue(LCD_GROUP_DATA , command);
    200c:	fe 01       	movw	r30, r28
    200e:	e1 59       	subi	r30, 0x91	; 145
    2010:	ff 4f       	sbci	r31, 0xFF	; 255
    2012:	83 e0       	ldi	r24, 0x03	; 3
    2014:	60 81       	ld	r22, Z
    2016:	0e 94 3d 09 	call	0x127a	; 0x127a <DIO_SetGroupValue>
    201a:	80 e0       	ldi	r24, 0x00	; 0
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	a0 e8       	ldi	r26, 0x80	; 128
    2020:	bf e3       	ldi	r27, 0x3F	; 63
    2022:	8b af       	std	Y+59, r24	; 0x3b
    2024:	9c af       	std	Y+60, r25	; 0x3c
    2026:	ad af       	std	Y+61, r26	; 0x3d
    2028:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    202a:	6b ad       	ldd	r22, Y+59	; 0x3b
    202c:	7c ad       	ldd	r23, Y+60	; 0x3c
    202e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2030:	9e ad       	ldd	r25, Y+62	; 0x3e
    2032:	2b ea       	ldi	r18, 0xAB	; 171
    2034:	3a ea       	ldi	r19, 0xAA	; 170
    2036:	4a e2       	ldi	r20, 0x2A	; 42
    2038:	50 e4       	ldi	r21, 0x40	; 64
    203a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    203e:	dc 01       	movw	r26, r24
    2040:	cb 01       	movw	r24, r22
    2042:	8f ab       	std	Y+55, r24	; 0x37
    2044:	98 af       	std	Y+56, r25	; 0x38
    2046:	a9 af       	std	Y+57, r26	; 0x39
    2048:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    204a:	6f a9       	ldd	r22, Y+55	; 0x37
    204c:	78 ad       	ldd	r23, Y+56	; 0x38
    204e:	89 ad       	ldd	r24, Y+57	; 0x39
    2050:	9a ad       	ldd	r25, Y+58	; 0x3a
    2052:	20 e0       	ldi	r18, 0x00	; 0
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	40 e8       	ldi	r20, 0x80	; 128
    2058:	5f e3       	ldi	r21, 0x3F	; 63
    205a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    205e:	88 23       	and	r24, r24
    2060:	1c f4       	brge	.+6      	; 0x2068 <LCD_Send_Command+0x524>
		__ticks = 1;
    2062:	81 e0       	ldi	r24, 0x01	; 1
    2064:	8e ab       	std	Y+54, r24	; 0x36
    2066:	91 c0       	rjmp	.+290    	; 0x218a <LCD_Send_Command+0x646>
	else if (__tmp > 255)
    2068:	6f a9       	ldd	r22, Y+55	; 0x37
    206a:	78 ad       	ldd	r23, Y+56	; 0x38
    206c:	89 ad       	ldd	r24, Y+57	; 0x39
    206e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	4f e7       	ldi	r20, 0x7F	; 127
    2076:	53 e4       	ldi	r21, 0x43	; 67
    2078:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    207c:	18 16       	cp	r1, r24
    207e:	0c f0       	brlt	.+2      	; 0x2082 <LCD_Send_Command+0x53e>
    2080:	7b c0       	rjmp	.+246    	; 0x2178 <LCD_Send_Command+0x634>
	{
		_delay_ms(__us / 1000.0);
    2082:	6b ad       	ldd	r22, Y+59	; 0x3b
    2084:	7c ad       	ldd	r23, Y+60	; 0x3c
    2086:	8d ad       	ldd	r24, Y+61	; 0x3d
    2088:	9e ad       	ldd	r25, Y+62	; 0x3e
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	4a e7       	ldi	r20, 0x7A	; 122
    2090:	54 e4       	ldi	r21, 0x44	; 68
    2092:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	8a ab       	std	Y+50, r24	; 0x32
    209c:	9b ab       	std	Y+51, r25	; 0x33
    209e:	ac ab       	std	Y+52, r26	; 0x34
    20a0:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20a2:	6a a9       	ldd	r22, Y+50	; 0x32
    20a4:	7b a9       	ldd	r23, Y+51	; 0x33
    20a6:	8c a9       	ldd	r24, Y+52	; 0x34
    20a8:	9d a9       	ldd	r25, Y+53	; 0x35
    20aa:	20 e0       	ldi	r18, 0x00	; 0
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	4a ef       	ldi	r20, 0xFA	; 250
    20b0:	54 e4       	ldi	r21, 0x44	; 68
    20b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	8e a7       	std	Y+46, r24	; 0x2e
    20bc:	9f a7       	std	Y+47, r25	; 0x2f
    20be:	a8 ab       	std	Y+48, r26	; 0x30
    20c0:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    20c2:	6e a5       	ldd	r22, Y+46	; 0x2e
    20c4:	7f a5       	ldd	r23, Y+47	; 0x2f
    20c6:	88 a9       	ldd	r24, Y+48	; 0x30
    20c8:	99 a9       	ldd	r25, Y+49	; 0x31
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	40 e8       	ldi	r20, 0x80	; 128
    20d0:	5f e3       	ldi	r21, 0x3F	; 63
    20d2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    20d6:	88 23       	and	r24, r24
    20d8:	2c f4       	brge	.+10     	; 0x20e4 <LCD_Send_Command+0x5a0>
		__ticks = 1;
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	9d a7       	std	Y+45, r25	; 0x2d
    20e0:	8c a7       	std	Y+44, r24	; 0x2c
    20e2:	3f c0       	rjmp	.+126    	; 0x2162 <LCD_Send_Command+0x61e>
	else if (__tmp > 65535)
    20e4:	6e a5       	ldd	r22, Y+46	; 0x2e
    20e6:	7f a5       	ldd	r23, Y+47	; 0x2f
    20e8:	88 a9       	ldd	r24, Y+48	; 0x30
    20ea:	99 a9       	ldd	r25, Y+49	; 0x31
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	3f ef       	ldi	r19, 0xFF	; 255
    20f0:	4f e7       	ldi	r20, 0x7F	; 127
    20f2:	57 e4       	ldi	r21, 0x47	; 71
    20f4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    20f8:	18 16       	cp	r1, r24
    20fa:	4c f5       	brge	.+82     	; 0x214e <LCD_Send_Command+0x60a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20fc:	6a a9       	ldd	r22, Y+50	; 0x32
    20fe:	7b a9       	ldd	r23, Y+51	; 0x33
    2100:	8c a9       	ldd	r24, Y+52	; 0x34
    2102:	9d a9       	ldd	r25, Y+53	; 0x35
    2104:	20 e0       	ldi	r18, 0x00	; 0
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	40 e2       	ldi	r20, 0x20	; 32
    210a:	51 e4       	ldi	r21, 0x41	; 65
    210c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2110:	dc 01       	movw	r26, r24
    2112:	cb 01       	movw	r24, r22
    2114:	bc 01       	movw	r22, r24
    2116:	cd 01       	movw	r24, r26
    2118:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    211c:	dc 01       	movw	r26, r24
    211e:	cb 01       	movw	r24, r22
    2120:	9d a7       	std	Y+45, r25	; 0x2d
    2122:	8c a7       	std	Y+44, r24	; 0x2c
    2124:	0f c0       	rjmp	.+30     	; 0x2144 <LCD_Send_Command+0x600>
    2126:	88 ec       	ldi	r24, 0xC8	; 200
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	9b a7       	std	Y+43, r25	; 0x2b
    212c:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    212e:	8a a5       	ldd	r24, Y+42	; 0x2a
    2130:	9b a5       	ldd	r25, Y+43	; 0x2b
    2132:	01 97       	sbiw	r24, 0x01	; 1
    2134:	f1 f7       	brne	.-4      	; 0x2132 <LCD_Send_Command+0x5ee>
    2136:	9b a7       	std	Y+43, r25	; 0x2b
    2138:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    213a:	8c a5       	ldd	r24, Y+44	; 0x2c
    213c:	9d a5       	ldd	r25, Y+45	; 0x2d
    213e:	01 97       	sbiw	r24, 0x01	; 1
    2140:	9d a7       	std	Y+45, r25	; 0x2d
    2142:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2144:	8c a5       	ldd	r24, Y+44	; 0x2c
    2146:	9d a5       	ldd	r25, Y+45	; 0x2d
    2148:	00 97       	sbiw	r24, 0x00	; 0
    214a:	69 f7       	brne	.-38     	; 0x2126 <LCD_Send_Command+0x5e2>
    214c:	24 c0       	rjmp	.+72     	; 0x2196 <LCD_Send_Command+0x652>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    214e:	6e a5       	ldd	r22, Y+46	; 0x2e
    2150:	7f a5       	ldd	r23, Y+47	; 0x2f
    2152:	88 a9       	ldd	r24, Y+48	; 0x30
    2154:	99 a9       	ldd	r25, Y+49	; 0x31
    2156:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    215a:	dc 01       	movw	r26, r24
    215c:	cb 01       	movw	r24, r22
    215e:	9d a7       	std	Y+45, r25	; 0x2d
    2160:	8c a7       	std	Y+44, r24	; 0x2c
    2162:	8c a5       	ldd	r24, Y+44	; 0x2c
    2164:	9d a5       	ldd	r25, Y+45	; 0x2d
    2166:	99 a7       	std	Y+41, r25	; 0x29
    2168:	88 a7       	std	Y+40, r24	; 0x28
    216a:	88 a5       	ldd	r24, Y+40	; 0x28
    216c:	99 a5       	ldd	r25, Y+41	; 0x29
    216e:	01 97       	sbiw	r24, 0x01	; 1
    2170:	f1 f7       	brne	.-4      	; 0x216e <LCD_Send_Command+0x62a>
    2172:	99 a7       	std	Y+41, r25	; 0x29
    2174:	88 a7       	std	Y+40, r24	; 0x28
    2176:	0f c0       	rjmp	.+30     	; 0x2196 <LCD_Send_Command+0x652>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2178:	6f a9       	ldd	r22, Y+55	; 0x37
    217a:	78 ad       	ldd	r23, Y+56	; 0x38
    217c:	89 ad       	ldd	r24, Y+57	; 0x39
    217e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2180:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2184:	dc 01       	movw	r26, r24
    2186:	cb 01       	movw	r24, r22
    2188:	8e ab       	std	Y+54, r24	; 0x36
    218a:	8e a9       	ldd	r24, Y+54	; 0x36
    218c:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    218e:	8f a1       	ldd	r24, Y+39	; 0x27
    2190:	8a 95       	dec	r24
    2192:	f1 f7       	brne	.-4      	; 0x2190 <LCD_Send_Command+0x64c>
    2194:	8f a3       	std	Y+39, r24	; 0x27
    _delay_us(1);
    DIO_SetPinValue(LCD_GROUP_CONTROL , LCD_E_PIN, LOW);
    2196:	81 e0       	ldi	r24, 0x01	; 1
    2198:	61 e0       	ldi	r22, 0x01	; 1
    219a:	40 e0       	ldi	r20, 0x00	; 0
    219c:	0e 94 81 07 	call	0xf02	; 0xf02 <DIO_SetPinValue>
    21a0:	80 e0       	ldi	r24, 0x00	; 0
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	a0 ea       	ldi	r26, 0xA0	; 160
    21a6:	b0 e4       	ldi	r27, 0x40	; 64
    21a8:	8b a3       	std	Y+35, r24	; 0x23
    21aa:	9c a3       	std	Y+36, r25	; 0x24
    21ac:	ad a3       	std	Y+37, r26	; 0x25
    21ae:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    21b0:	6b a1       	ldd	r22, Y+35	; 0x23
    21b2:	7c a1       	ldd	r23, Y+36	; 0x24
    21b4:	8d a1       	ldd	r24, Y+37	; 0x25
    21b6:	9e a1       	ldd	r25, Y+38	; 0x26
    21b8:	2b ea       	ldi	r18, 0xAB	; 171
    21ba:	3a ea       	ldi	r19, 0xAA	; 170
    21bc:	4a e2       	ldi	r20, 0x2A	; 42
    21be:	50 e4       	ldi	r21, 0x40	; 64
    21c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21c4:	dc 01       	movw	r26, r24
    21c6:	cb 01       	movw	r24, r22
    21c8:	8f 8f       	std	Y+31, r24	; 0x1f
    21ca:	98 a3       	std	Y+32, r25	; 0x20
    21cc:	a9 a3       	std	Y+33, r26	; 0x21
    21ce:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    21d0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    21d2:	78 a1       	ldd	r23, Y+32	; 0x20
    21d4:	89 a1       	ldd	r24, Y+33	; 0x21
    21d6:	9a a1       	ldd	r25, Y+34	; 0x22
    21d8:	20 e0       	ldi	r18, 0x00	; 0
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	40 e8       	ldi	r20, 0x80	; 128
    21de:	5f e3       	ldi	r21, 0x3F	; 63
    21e0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    21e4:	88 23       	and	r24, r24
    21e6:	1c f4       	brge	.+6      	; 0x21ee <LCD_Send_Command+0x6aa>
		__ticks = 1;
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	8e 8f       	std	Y+30, r24	; 0x1e
    21ec:	91 c0       	rjmp	.+290    	; 0x2310 <LCD_Send_Command+0x7cc>
	else if (__tmp > 255)
    21ee:	6f 8d       	ldd	r22, Y+31	; 0x1f
    21f0:	78 a1       	ldd	r23, Y+32	; 0x20
    21f2:	89 a1       	ldd	r24, Y+33	; 0x21
    21f4:	9a a1       	ldd	r25, Y+34	; 0x22
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	4f e7       	ldi	r20, 0x7F	; 127
    21fc:	53 e4       	ldi	r21, 0x43	; 67
    21fe:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2202:	18 16       	cp	r1, r24
    2204:	0c f0       	brlt	.+2      	; 0x2208 <LCD_Send_Command+0x6c4>
    2206:	7b c0       	rjmp	.+246    	; 0x22fe <LCD_Send_Command+0x7ba>
	{
		_delay_ms(__us / 1000.0);
    2208:	6b a1       	ldd	r22, Y+35	; 0x23
    220a:	7c a1       	ldd	r23, Y+36	; 0x24
    220c:	8d a1       	ldd	r24, Y+37	; 0x25
    220e:	9e a1       	ldd	r25, Y+38	; 0x26
    2210:	20 e0       	ldi	r18, 0x00	; 0
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	4a e7       	ldi	r20, 0x7A	; 122
    2216:	54 e4       	ldi	r21, 0x44	; 68
    2218:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    221c:	dc 01       	movw	r26, r24
    221e:	cb 01       	movw	r24, r22
    2220:	8a 8f       	std	Y+26, r24	; 0x1a
    2222:	9b 8f       	std	Y+27, r25	; 0x1b
    2224:	ac 8f       	std	Y+28, r26	; 0x1c
    2226:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2228:	6a 8d       	ldd	r22, Y+26	; 0x1a
    222a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    222c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    222e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2230:	20 e0       	ldi	r18, 0x00	; 0
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	4a ef       	ldi	r20, 0xFA	; 250
    2236:	54 e4       	ldi	r21, 0x44	; 68
    2238:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    223c:	dc 01       	movw	r26, r24
    223e:	cb 01       	movw	r24, r22
    2240:	8e 8b       	std	Y+22, r24	; 0x16
    2242:	9f 8b       	std	Y+23, r25	; 0x17
    2244:	a8 8f       	std	Y+24, r26	; 0x18
    2246:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2248:	6e 89       	ldd	r22, Y+22	; 0x16
    224a:	7f 89       	ldd	r23, Y+23	; 0x17
    224c:	88 8d       	ldd	r24, Y+24	; 0x18
    224e:	99 8d       	ldd	r25, Y+25	; 0x19
    2250:	20 e0       	ldi	r18, 0x00	; 0
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	40 e8       	ldi	r20, 0x80	; 128
    2256:	5f e3       	ldi	r21, 0x3F	; 63
    2258:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    225c:	88 23       	and	r24, r24
    225e:	2c f4       	brge	.+10     	; 0x226a <LCD_Send_Command+0x726>
		__ticks = 1;
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	9d 8b       	std	Y+21, r25	; 0x15
    2266:	8c 8b       	std	Y+20, r24	; 0x14
    2268:	3f c0       	rjmp	.+126    	; 0x22e8 <LCD_Send_Command+0x7a4>
	else if (__tmp > 65535)
    226a:	6e 89       	ldd	r22, Y+22	; 0x16
    226c:	7f 89       	ldd	r23, Y+23	; 0x17
    226e:	88 8d       	ldd	r24, Y+24	; 0x18
    2270:	99 8d       	ldd	r25, Y+25	; 0x19
    2272:	20 e0       	ldi	r18, 0x00	; 0
    2274:	3f ef       	ldi	r19, 0xFF	; 255
    2276:	4f e7       	ldi	r20, 0x7F	; 127
    2278:	57 e4       	ldi	r21, 0x47	; 71
    227a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    227e:	18 16       	cp	r1, r24
    2280:	4c f5       	brge	.+82     	; 0x22d4 <LCD_Send_Command+0x790>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2282:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2284:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2286:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2288:	9d 8d       	ldd	r25, Y+29	; 0x1d
    228a:	20 e0       	ldi	r18, 0x00	; 0
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	40 e2       	ldi	r20, 0x20	; 32
    2290:	51 e4       	ldi	r21, 0x41	; 65
    2292:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2296:	dc 01       	movw	r26, r24
    2298:	cb 01       	movw	r24, r22
    229a:	bc 01       	movw	r22, r24
    229c:	cd 01       	movw	r24, r26
    229e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22a2:	dc 01       	movw	r26, r24
    22a4:	cb 01       	movw	r24, r22
    22a6:	9d 8b       	std	Y+21, r25	; 0x15
    22a8:	8c 8b       	std	Y+20, r24	; 0x14
    22aa:	0f c0       	rjmp	.+30     	; 0x22ca <LCD_Send_Command+0x786>
    22ac:	88 ec       	ldi	r24, 0xC8	; 200
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	9b 8b       	std	Y+19, r25	; 0x13
    22b2:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22b4:	8a 89       	ldd	r24, Y+18	; 0x12
    22b6:	9b 89       	ldd	r25, Y+19	; 0x13
    22b8:	01 97       	sbiw	r24, 0x01	; 1
    22ba:	f1 f7       	brne	.-4      	; 0x22b8 <LCD_Send_Command+0x774>
    22bc:	9b 8b       	std	Y+19, r25	; 0x13
    22be:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22c0:	8c 89       	ldd	r24, Y+20	; 0x14
    22c2:	9d 89       	ldd	r25, Y+21	; 0x15
    22c4:	01 97       	sbiw	r24, 0x01	; 1
    22c6:	9d 8b       	std	Y+21, r25	; 0x15
    22c8:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ca:	8c 89       	ldd	r24, Y+20	; 0x14
    22cc:	9d 89       	ldd	r25, Y+21	; 0x15
    22ce:	00 97       	sbiw	r24, 0x00	; 0
    22d0:	69 f7       	brne	.-38     	; 0x22ac <LCD_Send_Command+0x768>
    22d2:	24 c0       	rjmp	.+72     	; 0x231c <LCD_Send_Command+0x7d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d4:	6e 89       	ldd	r22, Y+22	; 0x16
    22d6:	7f 89       	ldd	r23, Y+23	; 0x17
    22d8:	88 8d       	ldd	r24, Y+24	; 0x18
    22da:	99 8d       	ldd	r25, Y+25	; 0x19
    22dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22e0:	dc 01       	movw	r26, r24
    22e2:	cb 01       	movw	r24, r22
    22e4:	9d 8b       	std	Y+21, r25	; 0x15
    22e6:	8c 8b       	std	Y+20, r24	; 0x14
    22e8:	8c 89       	ldd	r24, Y+20	; 0x14
    22ea:	9d 89       	ldd	r25, Y+21	; 0x15
    22ec:	99 8b       	std	Y+17, r25	; 0x11
    22ee:	88 8b       	std	Y+16, r24	; 0x10
    22f0:	88 89       	ldd	r24, Y+16	; 0x10
    22f2:	99 89       	ldd	r25, Y+17	; 0x11
    22f4:	01 97       	sbiw	r24, 0x01	; 1
    22f6:	f1 f7       	brne	.-4      	; 0x22f4 <LCD_Send_Command+0x7b0>
    22f8:	99 8b       	std	Y+17, r25	; 0x11
    22fa:	88 8b       	std	Y+16, r24	; 0x10
    22fc:	0f c0       	rjmp	.+30     	; 0x231c <LCD_Send_Command+0x7d8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    22fe:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2300:	78 a1       	ldd	r23, Y+32	; 0x20
    2302:	89 a1       	ldd	r24, Y+33	; 0x21
    2304:	9a a1       	ldd	r25, Y+34	; 0x22
    2306:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    230a:	dc 01       	movw	r26, r24
    230c:	cb 01       	movw	r24, r22
    230e:	8e 8f       	std	Y+30, r24	; 0x1e
    2310:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2312:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2314:	8f 85       	ldd	r24, Y+15	; 0x0f
    2316:	8a 95       	dec	r24
    2318:	f1 f7       	brne	.-4      	; 0x2316 <LCD_Send_Command+0x7d2>
    231a:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_us(5);
    DIO_SetPinValue(LCD_GROUP_CONTROL , LCD_E_PIN, HIGH);
    231c:	81 e0       	ldi	r24, 0x01	; 1
    231e:	61 e0       	ldi	r22, 0x01	; 1
    2320:	41 e0       	ldi	r20, 0x01	; 1
    2322:	0e 94 81 07 	call	0xf02	; 0xf02 <DIO_SetPinValue>
    2326:	80 e0       	ldi	r24, 0x00	; 0
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	a0 e2       	ldi	r26, 0x20	; 32
    232c:	b1 e4       	ldi	r27, 0x41	; 65
    232e:	8b 87       	std	Y+11, r24	; 0x0b
    2330:	9c 87       	std	Y+12, r25	; 0x0c
    2332:	ad 87       	std	Y+13, r26	; 0x0d
    2334:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2336:	6b 85       	ldd	r22, Y+11	; 0x0b
    2338:	7c 85       	ldd	r23, Y+12	; 0x0c
    233a:	8d 85       	ldd	r24, Y+13	; 0x0d
    233c:	9e 85       	ldd	r25, Y+14	; 0x0e
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	4a ef       	ldi	r20, 0xFA	; 250
    2344:	54 e4       	ldi	r21, 0x44	; 68
    2346:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    234a:	dc 01       	movw	r26, r24
    234c:	cb 01       	movw	r24, r22
    234e:	8f 83       	std	Y+7, r24	; 0x07
    2350:	98 87       	std	Y+8, r25	; 0x08
    2352:	a9 87       	std	Y+9, r26	; 0x09
    2354:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2356:	6f 81       	ldd	r22, Y+7	; 0x07
    2358:	78 85       	ldd	r23, Y+8	; 0x08
    235a:	89 85       	ldd	r24, Y+9	; 0x09
    235c:	9a 85       	ldd	r25, Y+10	; 0x0a
    235e:	20 e0       	ldi	r18, 0x00	; 0
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	40 e8       	ldi	r20, 0x80	; 128
    2364:	5f e3       	ldi	r21, 0x3F	; 63
    2366:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    236a:	88 23       	and	r24, r24
    236c:	2c f4       	brge	.+10     	; 0x2378 <LCD_Send_Command+0x834>
		__ticks = 1;
    236e:	81 e0       	ldi	r24, 0x01	; 1
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	9e 83       	std	Y+6, r25	; 0x06
    2374:	8d 83       	std	Y+5, r24	; 0x05
    2376:	3f c0       	rjmp	.+126    	; 0x23f6 <LCD_Send_Command+0x8b2>
	else if (__tmp > 65535)
    2378:	6f 81       	ldd	r22, Y+7	; 0x07
    237a:	78 85       	ldd	r23, Y+8	; 0x08
    237c:	89 85       	ldd	r24, Y+9	; 0x09
    237e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2380:	20 e0       	ldi	r18, 0x00	; 0
    2382:	3f ef       	ldi	r19, 0xFF	; 255
    2384:	4f e7       	ldi	r20, 0x7F	; 127
    2386:	57 e4       	ldi	r21, 0x47	; 71
    2388:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    238c:	18 16       	cp	r1, r24
    238e:	4c f5       	brge	.+82     	; 0x23e2 <LCD_Send_Command+0x89e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2390:	6b 85       	ldd	r22, Y+11	; 0x0b
    2392:	7c 85       	ldd	r23, Y+12	; 0x0c
    2394:	8d 85       	ldd	r24, Y+13	; 0x0d
    2396:	9e 85       	ldd	r25, Y+14	; 0x0e
    2398:	20 e0       	ldi	r18, 0x00	; 0
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	40 e2       	ldi	r20, 0x20	; 32
    239e:	51 e4       	ldi	r21, 0x41	; 65
    23a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23a4:	dc 01       	movw	r26, r24
    23a6:	cb 01       	movw	r24, r22
    23a8:	bc 01       	movw	r22, r24
    23aa:	cd 01       	movw	r24, r26
    23ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23b0:	dc 01       	movw	r26, r24
    23b2:	cb 01       	movw	r24, r22
    23b4:	9e 83       	std	Y+6, r25	; 0x06
    23b6:	8d 83       	std	Y+5, r24	; 0x05
    23b8:	0f c0       	rjmp	.+30     	; 0x23d8 <LCD_Send_Command+0x894>
    23ba:	88 ec       	ldi	r24, 0xC8	; 200
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	9c 83       	std	Y+4, r25	; 0x04
    23c0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23c2:	8b 81       	ldd	r24, Y+3	; 0x03
    23c4:	9c 81       	ldd	r25, Y+4	; 0x04
    23c6:	01 97       	sbiw	r24, 0x01	; 1
    23c8:	f1 f7       	brne	.-4      	; 0x23c6 <LCD_Send_Command+0x882>
    23ca:	9c 83       	std	Y+4, r25	; 0x04
    23cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ce:	8d 81       	ldd	r24, Y+5	; 0x05
    23d0:	9e 81       	ldd	r25, Y+6	; 0x06
    23d2:	01 97       	sbiw	r24, 0x01	; 1
    23d4:	9e 83       	std	Y+6, r25	; 0x06
    23d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23d8:	8d 81       	ldd	r24, Y+5	; 0x05
    23da:	9e 81       	ldd	r25, Y+6	; 0x06
    23dc:	00 97       	sbiw	r24, 0x00	; 0
    23de:	69 f7       	brne	.-38     	; 0x23ba <LCD_Send_Command+0x876>
    23e0:	14 c0       	rjmp	.+40     	; 0x240a <LCD_Send_Command+0x8c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23e2:	6f 81       	ldd	r22, Y+7	; 0x07
    23e4:	78 85       	ldd	r23, Y+8	; 0x08
    23e6:	89 85       	ldd	r24, Y+9	; 0x09
    23e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23ee:	dc 01       	movw	r26, r24
    23f0:	cb 01       	movw	r24, r22
    23f2:	9e 83       	std	Y+6, r25	; 0x06
    23f4:	8d 83       	std	Y+5, r24	; 0x05
    23f6:	8d 81       	ldd	r24, Y+5	; 0x05
    23f8:	9e 81       	ldd	r25, Y+6	; 0x06
    23fa:	9a 83       	std	Y+2, r25	; 0x02
    23fc:	89 83       	std	Y+1, r24	; 0x01
    23fe:	89 81       	ldd	r24, Y+1	; 0x01
    2400:	9a 81       	ldd	r25, Y+2	; 0x02
    2402:	01 97       	sbiw	r24, 0x01	; 1
    2404:	f1 f7       	brne	.-4      	; 0x2402 <LCD_Send_Command+0x8be>
    2406:	9a 83       	std	Y+2, r25	; 0x02
    2408:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(10);
}
    240a:	c1 59       	subi	r28, 0x91	; 145
    240c:	df 4f       	sbci	r29, 0xFF	; 255
    240e:	0f b6       	in	r0, 0x3f	; 63
    2410:	f8 94       	cli
    2412:	de bf       	out	0x3e, r29	; 62
    2414:	0f be       	out	0x3f, r0	; 63
    2416:	cd bf       	out	0x3d, r28	; 61
    2418:	cf 91       	pop	r28
    241a:	df 91       	pop	r29
    241c:	1f 91       	pop	r17
    241e:	0f 91       	pop	r16
    2420:	08 95       	ret

00002422 <LCD_Send_Data>:


void LCD_Send_Data (u8 data)
{
    2422:	0f 93       	push	r16
    2424:	1f 93       	push	r17
    2426:	df 93       	push	r29
    2428:	cf 93       	push	r28
    242a:	cd b7       	in	r28, 0x3d	; 61
    242c:	de b7       	in	r29, 0x3e	; 62
    242e:	cf 56       	subi	r28, 0x6F	; 111
    2430:	d0 40       	sbci	r29, 0x00	; 0
    2432:	0f b6       	in	r0, 0x3f	; 63
    2434:	f8 94       	cli
    2436:	de bf       	out	0x3e, r29	; 62
    2438:	0f be       	out	0x3f, r0	; 63
    243a:	cd bf       	out	0x3d, r28	; 61
    243c:	fe 01       	movw	r30, r28
    243e:	e1 59       	subi	r30, 0x91	; 145
    2440:	ff 4f       	sbci	r31, 0xFF	; 255
    2442:	80 83       	st	Z, r24
    DIO_SetPinValue(LCD_GROUP_CONTROL , LCD_RS_PIN , HIGH);
    2444:	81 e0       	ldi	r24, 0x01	; 1
    2446:	60 e0       	ldi	r22, 0x00	; 0
    2448:	41 e0       	ldi	r20, 0x01	; 1
    244a:	0e 94 81 07 	call	0xf02	; 0xf02 <DIO_SetPinValue>
    244e:	fe 01       	movw	r30, r28
    2450:	e5 59       	subi	r30, 0x95	; 149
    2452:	ff 4f       	sbci	r31, 0xFF	; 255
    2454:	80 e0       	ldi	r24, 0x00	; 0
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	a0 e8       	ldi	r26, 0x80	; 128
    245a:	bf e3       	ldi	r27, 0x3F	; 63
    245c:	80 83       	st	Z, r24
    245e:	91 83       	std	Z+1, r25	; 0x01
    2460:	a2 83       	std	Z+2, r26	; 0x02
    2462:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2464:	8e 01       	movw	r16, r28
    2466:	09 59       	subi	r16, 0x99	; 153
    2468:	1f 4f       	sbci	r17, 0xFF	; 255
    246a:	fe 01       	movw	r30, r28
    246c:	e5 59       	subi	r30, 0x95	; 149
    246e:	ff 4f       	sbci	r31, 0xFF	; 255
    2470:	60 81       	ld	r22, Z
    2472:	71 81       	ldd	r23, Z+1	; 0x01
    2474:	82 81       	ldd	r24, Z+2	; 0x02
    2476:	93 81       	ldd	r25, Z+3	; 0x03
    2478:	2b ea       	ldi	r18, 0xAB	; 171
    247a:	3a ea       	ldi	r19, 0xAA	; 170
    247c:	4a e2       	ldi	r20, 0x2A	; 42
    247e:	50 e4       	ldi	r21, 0x40	; 64
    2480:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2484:	dc 01       	movw	r26, r24
    2486:	cb 01       	movw	r24, r22
    2488:	f8 01       	movw	r30, r16
    248a:	80 83       	st	Z, r24
    248c:	91 83       	std	Z+1, r25	; 0x01
    248e:	a2 83       	std	Z+2, r26	; 0x02
    2490:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2492:	fe 01       	movw	r30, r28
    2494:	e9 59       	subi	r30, 0x99	; 153
    2496:	ff 4f       	sbci	r31, 0xFF	; 255
    2498:	60 81       	ld	r22, Z
    249a:	71 81       	ldd	r23, Z+1	; 0x01
    249c:	82 81       	ldd	r24, Z+2	; 0x02
    249e:	93 81       	ldd	r25, Z+3	; 0x03
    24a0:	20 e0       	ldi	r18, 0x00	; 0
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	40 e8       	ldi	r20, 0x80	; 128
    24a6:	5f e3       	ldi	r21, 0x3F	; 63
    24a8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    24ac:	88 23       	and	r24, r24
    24ae:	34 f4       	brge	.+12     	; 0x24bc <LCD_Send_Data+0x9a>
		__ticks = 1;
    24b0:	fe 01       	movw	r30, r28
    24b2:	ea 59       	subi	r30, 0x9A	; 154
    24b4:	ff 4f       	sbci	r31, 0xFF	; 255
    24b6:	81 e0       	ldi	r24, 0x01	; 1
    24b8:	80 83       	st	Z, r24
    24ba:	e0 c0       	rjmp	.+448    	; 0x267c <LCD_Send_Data+0x25a>
	else if (__tmp > 255)
    24bc:	fe 01       	movw	r30, r28
    24be:	e9 59       	subi	r30, 0x99	; 153
    24c0:	ff 4f       	sbci	r31, 0xFF	; 255
    24c2:	60 81       	ld	r22, Z
    24c4:	71 81       	ldd	r23, Z+1	; 0x01
    24c6:	82 81       	ldd	r24, Z+2	; 0x02
    24c8:	93 81       	ldd	r25, Z+3	; 0x03
    24ca:	20 e0       	ldi	r18, 0x00	; 0
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	4f e7       	ldi	r20, 0x7F	; 127
    24d0:	53 e4       	ldi	r21, 0x43	; 67
    24d2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    24d6:	18 16       	cp	r1, r24
    24d8:	0c f0       	brlt	.+2      	; 0x24dc <LCD_Send_Data+0xba>
    24da:	c0 c0       	rjmp	.+384    	; 0x265c <LCD_Send_Data+0x23a>
	{
		_delay_ms(__us / 1000.0);
    24dc:	fe 01       	movw	r30, r28
    24de:	e5 59       	subi	r30, 0x95	; 149
    24e0:	ff 4f       	sbci	r31, 0xFF	; 255
    24e2:	60 81       	ld	r22, Z
    24e4:	71 81       	ldd	r23, Z+1	; 0x01
    24e6:	82 81       	ldd	r24, Z+2	; 0x02
    24e8:	93 81       	ldd	r25, Z+3	; 0x03
    24ea:	20 e0       	ldi	r18, 0x00	; 0
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	4a e7       	ldi	r20, 0x7A	; 122
    24f0:	54 e4       	ldi	r21, 0x44	; 68
    24f2:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    24f6:	dc 01       	movw	r26, r24
    24f8:	cb 01       	movw	r24, r22
    24fa:	fe 01       	movw	r30, r28
    24fc:	ee 59       	subi	r30, 0x9E	; 158
    24fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2500:	80 83       	st	Z, r24
    2502:	91 83       	std	Z+1, r25	; 0x01
    2504:	a2 83       	std	Z+2, r26	; 0x02
    2506:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2508:	8e 01       	movw	r16, r28
    250a:	02 5a       	subi	r16, 0xA2	; 162
    250c:	1f 4f       	sbci	r17, 0xFF	; 255
    250e:	fe 01       	movw	r30, r28
    2510:	ee 59       	subi	r30, 0x9E	; 158
    2512:	ff 4f       	sbci	r31, 0xFF	; 255
    2514:	60 81       	ld	r22, Z
    2516:	71 81       	ldd	r23, Z+1	; 0x01
    2518:	82 81       	ldd	r24, Z+2	; 0x02
    251a:	93 81       	ldd	r25, Z+3	; 0x03
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	4a ef       	ldi	r20, 0xFA	; 250
    2522:	54 e4       	ldi	r21, 0x44	; 68
    2524:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	f8 01       	movw	r30, r16
    252e:	80 83       	st	Z, r24
    2530:	91 83       	std	Z+1, r25	; 0x01
    2532:	a2 83       	std	Z+2, r26	; 0x02
    2534:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2536:	fe 01       	movw	r30, r28
    2538:	e2 5a       	subi	r30, 0xA2	; 162
    253a:	ff 4f       	sbci	r31, 0xFF	; 255
    253c:	60 81       	ld	r22, Z
    253e:	71 81       	ldd	r23, Z+1	; 0x01
    2540:	82 81       	ldd	r24, Z+2	; 0x02
    2542:	93 81       	ldd	r25, Z+3	; 0x03
    2544:	20 e0       	ldi	r18, 0x00	; 0
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	40 e8       	ldi	r20, 0x80	; 128
    254a:	5f e3       	ldi	r21, 0x3F	; 63
    254c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2550:	88 23       	and	r24, r24
    2552:	44 f4       	brge	.+16     	; 0x2564 <LCD_Send_Data+0x142>
		__ticks = 1;
    2554:	fe 01       	movw	r30, r28
    2556:	e4 5a       	subi	r30, 0xA4	; 164
    2558:	ff 4f       	sbci	r31, 0xFF	; 255
    255a:	81 e0       	ldi	r24, 0x01	; 1
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	91 83       	std	Z+1, r25	; 0x01
    2560:	80 83       	st	Z, r24
    2562:	64 c0       	rjmp	.+200    	; 0x262c <LCD_Send_Data+0x20a>
	else if (__tmp > 65535)
    2564:	fe 01       	movw	r30, r28
    2566:	e2 5a       	subi	r30, 0xA2	; 162
    2568:	ff 4f       	sbci	r31, 0xFF	; 255
    256a:	60 81       	ld	r22, Z
    256c:	71 81       	ldd	r23, Z+1	; 0x01
    256e:	82 81       	ldd	r24, Z+2	; 0x02
    2570:	93 81       	ldd	r25, Z+3	; 0x03
    2572:	20 e0       	ldi	r18, 0x00	; 0
    2574:	3f ef       	ldi	r19, 0xFF	; 255
    2576:	4f e7       	ldi	r20, 0x7F	; 127
    2578:	57 e4       	ldi	r21, 0x47	; 71
    257a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    257e:	18 16       	cp	r1, r24
    2580:	0c f0       	brlt	.+2      	; 0x2584 <LCD_Send_Data+0x162>
    2582:	43 c0       	rjmp	.+134    	; 0x260a <LCD_Send_Data+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2584:	fe 01       	movw	r30, r28
    2586:	ee 59       	subi	r30, 0x9E	; 158
    2588:	ff 4f       	sbci	r31, 0xFF	; 255
    258a:	60 81       	ld	r22, Z
    258c:	71 81       	ldd	r23, Z+1	; 0x01
    258e:	82 81       	ldd	r24, Z+2	; 0x02
    2590:	93 81       	ldd	r25, Z+3	; 0x03
    2592:	20 e0       	ldi	r18, 0x00	; 0
    2594:	30 e0       	ldi	r19, 0x00	; 0
    2596:	40 e2       	ldi	r20, 0x20	; 32
    2598:	51 e4       	ldi	r21, 0x41	; 65
    259a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    259e:	dc 01       	movw	r26, r24
    25a0:	cb 01       	movw	r24, r22
    25a2:	8e 01       	movw	r16, r28
    25a4:	04 5a       	subi	r16, 0xA4	; 164
    25a6:	1f 4f       	sbci	r17, 0xFF	; 255
    25a8:	bc 01       	movw	r22, r24
    25aa:	cd 01       	movw	r24, r26
    25ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25b0:	dc 01       	movw	r26, r24
    25b2:	cb 01       	movw	r24, r22
    25b4:	f8 01       	movw	r30, r16
    25b6:	91 83       	std	Z+1, r25	; 0x01
    25b8:	80 83       	st	Z, r24
    25ba:	1f c0       	rjmp	.+62     	; 0x25fa <LCD_Send_Data+0x1d8>
    25bc:	fe 01       	movw	r30, r28
    25be:	e6 5a       	subi	r30, 0xA6	; 166
    25c0:	ff 4f       	sbci	r31, 0xFF	; 255
    25c2:	88 ec       	ldi	r24, 0xC8	; 200
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	91 83       	std	Z+1, r25	; 0x01
    25c8:	80 83       	st	Z, r24
    25ca:	fe 01       	movw	r30, r28
    25cc:	e6 5a       	subi	r30, 0xA6	; 166
    25ce:	ff 4f       	sbci	r31, 0xFF	; 255
    25d0:	80 81       	ld	r24, Z
    25d2:	91 81       	ldd	r25, Z+1	; 0x01
    25d4:	01 97       	sbiw	r24, 0x01	; 1
    25d6:	f1 f7       	brne	.-4      	; 0x25d4 <LCD_Send_Data+0x1b2>
    25d8:	fe 01       	movw	r30, r28
    25da:	e6 5a       	subi	r30, 0xA6	; 166
    25dc:	ff 4f       	sbci	r31, 0xFF	; 255
    25de:	91 83       	std	Z+1, r25	; 0x01
    25e0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25e2:	de 01       	movw	r26, r28
    25e4:	a4 5a       	subi	r26, 0xA4	; 164
    25e6:	bf 4f       	sbci	r27, 0xFF	; 255
    25e8:	fe 01       	movw	r30, r28
    25ea:	e4 5a       	subi	r30, 0xA4	; 164
    25ec:	ff 4f       	sbci	r31, 0xFF	; 255
    25ee:	80 81       	ld	r24, Z
    25f0:	91 81       	ldd	r25, Z+1	; 0x01
    25f2:	01 97       	sbiw	r24, 0x01	; 1
    25f4:	11 96       	adiw	r26, 0x01	; 1
    25f6:	9c 93       	st	X, r25
    25f8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25fa:	fe 01       	movw	r30, r28
    25fc:	e4 5a       	subi	r30, 0xA4	; 164
    25fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2600:	80 81       	ld	r24, Z
    2602:	91 81       	ldd	r25, Z+1	; 0x01
    2604:	00 97       	sbiw	r24, 0x00	; 0
    2606:	d1 f6       	brne	.-76     	; 0x25bc <LCD_Send_Data+0x19a>
    2608:	4b c0       	rjmp	.+150    	; 0x26a0 <LCD_Send_Data+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    260a:	8e 01       	movw	r16, r28
    260c:	04 5a       	subi	r16, 0xA4	; 164
    260e:	1f 4f       	sbci	r17, 0xFF	; 255
    2610:	fe 01       	movw	r30, r28
    2612:	e2 5a       	subi	r30, 0xA2	; 162
    2614:	ff 4f       	sbci	r31, 0xFF	; 255
    2616:	60 81       	ld	r22, Z
    2618:	71 81       	ldd	r23, Z+1	; 0x01
    261a:	82 81       	ldd	r24, Z+2	; 0x02
    261c:	93 81       	ldd	r25, Z+3	; 0x03
    261e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2622:	dc 01       	movw	r26, r24
    2624:	cb 01       	movw	r24, r22
    2626:	f8 01       	movw	r30, r16
    2628:	91 83       	std	Z+1, r25	; 0x01
    262a:	80 83       	st	Z, r24
    262c:	de 01       	movw	r26, r28
    262e:	a8 5a       	subi	r26, 0xA8	; 168
    2630:	bf 4f       	sbci	r27, 0xFF	; 255
    2632:	fe 01       	movw	r30, r28
    2634:	e4 5a       	subi	r30, 0xA4	; 164
    2636:	ff 4f       	sbci	r31, 0xFF	; 255
    2638:	80 81       	ld	r24, Z
    263a:	91 81       	ldd	r25, Z+1	; 0x01
    263c:	11 96       	adiw	r26, 0x01	; 1
    263e:	9c 93       	st	X, r25
    2640:	8e 93       	st	-X, r24
    2642:	fe 01       	movw	r30, r28
    2644:	e8 5a       	subi	r30, 0xA8	; 168
    2646:	ff 4f       	sbci	r31, 0xFF	; 255
    2648:	80 81       	ld	r24, Z
    264a:	91 81       	ldd	r25, Z+1	; 0x01
    264c:	01 97       	sbiw	r24, 0x01	; 1
    264e:	f1 f7       	brne	.-4      	; 0x264c <LCD_Send_Data+0x22a>
    2650:	fe 01       	movw	r30, r28
    2652:	e8 5a       	subi	r30, 0xA8	; 168
    2654:	ff 4f       	sbci	r31, 0xFF	; 255
    2656:	91 83       	std	Z+1, r25	; 0x01
    2658:	80 83       	st	Z, r24
    265a:	22 c0       	rjmp	.+68     	; 0x26a0 <LCD_Send_Data+0x27e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    265c:	8e 01       	movw	r16, r28
    265e:	0a 59       	subi	r16, 0x9A	; 154
    2660:	1f 4f       	sbci	r17, 0xFF	; 255
    2662:	fe 01       	movw	r30, r28
    2664:	e9 59       	subi	r30, 0x99	; 153
    2666:	ff 4f       	sbci	r31, 0xFF	; 255
    2668:	60 81       	ld	r22, Z
    266a:	71 81       	ldd	r23, Z+1	; 0x01
    266c:	82 81       	ldd	r24, Z+2	; 0x02
    266e:	93 81       	ldd	r25, Z+3	; 0x03
    2670:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2674:	dc 01       	movw	r26, r24
    2676:	cb 01       	movw	r24, r22
    2678:	f8 01       	movw	r30, r16
    267a:	80 83       	st	Z, r24
    267c:	de 01       	movw	r26, r28
    267e:	a9 5a       	subi	r26, 0xA9	; 169
    2680:	bf 4f       	sbci	r27, 0xFF	; 255
    2682:	fe 01       	movw	r30, r28
    2684:	ea 59       	subi	r30, 0x9A	; 154
    2686:	ff 4f       	sbci	r31, 0xFF	; 255
    2688:	80 81       	ld	r24, Z
    268a:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    268c:	fe 01       	movw	r30, r28
    268e:	e9 5a       	subi	r30, 0xA9	; 169
    2690:	ff 4f       	sbci	r31, 0xFF	; 255
    2692:	80 81       	ld	r24, Z
    2694:	8a 95       	dec	r24
    2696:	f1 f7       	brne	.-4      	; 0x2694 <LCD_Send_Data+0x272>
    2698:	fe 01       	movw	r30, r28
    269a:	e9 5a       	subi	r30, 0xA9	; 169
    269c:	ff 4f       	sbci	r31, 0xFF	; 255
    269e:	80 83       	st	Z, r24
    _delay_us(1);
    DIO_SetPinValue(LCD_GROUP_CONTROL , LCD_E_PIN, HIGH);
    26a0:	81 e0       	ldi	r24, 0x01	; 1
    26a2:	61 e0       	ldi	r22, 0x01	; 1
    26a4:	41 e0       	ldi	r20, 0x01	; 1
    26a6:	0e 94 81 07 	call	0xf02	; 0xf02 <DIO_SetPinValue>
    26aa:	fe 01       	movw	r30, r28
    26ac:	ed 5a       	subi	r30, 0xAD	; 173
    26ae:	ff 4f       	sbci	r31, 0xFF	; 255
    26b0:	80 e0       	ldi	r24, 0x00	; 0
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	a0 e8       	ldi	r26, 0x80	; 128
    26b6:	bf e3       	ldi	r27, 0x3F	; 63
    26b8:	80 83       	st	Z, r24
    26ba:	91 83       	std	Z+1, r25	; 0x01
    26bc:	a2 83       	std	Z+2, r26	; 0x02
    26be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    26c0:	8e 01       	movw	r16, r28
    26c2:	01 5b       	subi	r16, 0xB1	; 177
    26c4:	1f 4f       	sbci	r17, 0xFF	; 255
    26c6:	fe 01       	movw	r30, r28
    26c8:	ed 5a       	subi	r30, 0xAD	; 173
    26ca:	ff 4f       	sbci	r31, 0xFF	; 255
    26cc:	60 81       	ld	r22, Z
    26ce:	71 81       	ldd	r23, Z+1	; 0x01
    26d0:	82 81       	ldd	r24, Z+2	; 0x02
    26d2:	93 81       	ldd	r25, Z+3	; 0x03
    26d4:	2b ea       	ldi	r18, 0xAB	; 171
    26d6:	3a ea       	ldi	r19, 0xAA	; 170
    26d8:	4a e2       	ldi	r20, 0x2A	; 42
    26da:	50 e4       	ldi	r21, 0x40	; 64
    26dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26e0:	dc 01       	movw	r26, r24
    26e2:	cb 01       	movw	r24, r22
    26e4:	f8 01       	movw	r30, r16
    26e6:	80 83       	st	Z, r24
    26e8:	91 83       	std	Z+1, r25	; 0x01
    26ea:	a2 83       	std	Z+2, r26	; 0x02
    26ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26ee:	fe 01       	movw	r30, r28
    26f0:	e1 5b       	subi	r30, 0xB1	; 177
    26f2:	ff 4f       	sbci	r31, 0xFF	; 255
    26f4:	60 81       	ld	r22, Z
    26f6:	71 81       	ldd	r23, Z+1	; 0x01
    26f8:	82 81       	ldd	r24, Z+2	; 0x02
    26fa:	93 81       	ldd	r25, Z+3	; 0x03
    26fc:	20 e0       	ldi	r18, 0x00	; 0
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	40 e8       	ldi	r20, 0x80	; 128
    2702:	5f e3       	ldi	r21, 0x3F	; 63
    2704:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2708:	88 23       	and	r24, r24
    270a:	34 f4       	brge	.+12     	; 0x2718 <LCD_Send_Data+0x2f6>
		__ticks = 1;
    270c:	fe 01       	movw	r30, r28
    270e:	e2 5b       	subi	r30, 0xB2	; 178
    2710:	ff 4f       	sbci	r31, 0xFF	; 255
    2712:	81 e0       	ldi	r24, 0x01	; 1
    2714:	80 83       	st	Z, r24
    2716:	e0 c0       	rjmp	.+448    	; 0x28d8 <LCD_Send_Data+0x4b6>
	else if (__tmp > 255)
    2718:	fe 01       	movw	r30, r28
    271a:	e1 5b       	subi	r30, 0xB1	; 177
    271c:	ff 4f       	sbci	r31, 0xFF	; 255
    271e:	60 81       	ld	r22, Z
    2720:	71 81       	ldd	r23, Z+1	; 0x01
    2722:	82 81       	ldd	r24, Z+2	; 0x02
    2724:	93 81       	ldd	r25, Z+3	; 0x03
    2726:	20 e0       	ldi	r18, 0x00	; 0
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	4f e7       	ldi	r20, 0x7F	; 127
    272c:	53 e4       	ldi	r21, 0x43	; 67
    272e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2732:	18 16       	cp	r1, r24
    2734:	0c f0       	brlt	.+2      	; 0x2738 <LCD_Send_Data+0x316>
    2736:	c0 c0       	rjmp	.+384    	; 0x28b8 <LCD_Send_Data+0x496>
	{
		_delay_ms(__us / 1000.0);
    2738:	fe 01       	movw	r30, r28
    273a:	ed 5a       	subi	r30, 0xAD	; 173
    273c:	ff 4f       	sbci	r31, 0xFF	; 255
    273e:	60 81       	ld	r22, Z
    2740:	71 81       	ldd	r23, Z+1	; 0x01
    2742:	82 81       	ldd	r24, Z+2	; 0x02
    2744:	93 81       	ldd	r25, Z+3	; 0x03
    2746:	20 e0       	ldi	r18, 0x00	; 0
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	4a e7       	ldi	r20, 0x7A	; 122
    274c:	54 e4       	ldi	r21, 0x44	; 68
    274e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2752:	dc 01       	movw	r26, r24
    2754:	cb 01       	movw	r24, r22
    2756:	fe 01       	movw	r30, r28
    2758:	e6 5b       	subi	r30, 0xB6	; 182
    275a:	ff 4f       	sbci	r31, 0xFF	; 255
    275c:	80 83       	st	Z, r24
    275e:	91 83       	std	Z+1, r25	; 0x01
    2760:	a2 83       	std	Z+2, r26	; 0x02
    2762:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2764:	8e 01       	movw	r16, r28
    2766:	0a 5b       	subi	r16, 0xBA	; 186
    2768:	1f 4f       	sbci	r17, 0xFF	; 255
    276a:	fe 01       	movw	r30, r28
    276c:	e6 5b       	subi	r30, 0xB6	; 182
    276e:	ff 4f       	sbci	r31, 0xFF	; 255
    2770:	60 81       	ld	r22, Z
    2772:	71 81       	ldd	r23, Z+1	; 0x01
    2774:	82 81       	ldd	r24, Z+2	; 0x02
    2776:	93 81       	ldd	r25, Z+3	; 0x03
    2778:	20 e0       	ldi	r18, 0x00	; 0
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	4a ef       	ldi	r20, 0xFA	; 250
    277e:	54 e4       	ldi	r21, 0x44	; 68
    2780:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2784:	dc 01       	movw	r26, r24
    2786:	cb 01       	movw	r24, r22
    2788:	f8 01       	movw	r30, r16
    278a:	80 83       	st	Z, r24
    278c:	91 83       	std	Z+1, r25	; 0x01
    278e:	a2 83       	std	Z+2, r26	; 0x02
    2790:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2792:	fe 01       	movw	r30, r28
    2794:	ea 5b       	subi	r30, 0xBA	; 186
    2796:	ff 4f       	sbci	r31, 0xFF	; 255
    2798:	60 81       	ld	r22, Z
    279a:	71 81       	ldd	r23, Z+1	; 0x01
    279c:	82 81       	ldd	r24, Z+2	; 0x02
    279e:	93 81       	ldd	r25, Z+3	; 0x03
    27a0:	20 e0       	ldi	r18, 0x00	; 0
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	40 e8       	ldi	r20, 0x80	; 128
    27a6:	5f e3       	ldi	r21, 0x3F	; 63
    27a8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    27ac:	88 23       	and	r24, r24
    27ae:	44 f4       	brge	.+16     	; 0x27c0 <LCD_Send_Data+0x39e>
		__ticks = 1;
    27b0:	fe 01       	movw	r30, r28
    27b2:	ec 5b       	subi	r30, 0xBC	; 188
    27b4:	ff 4f       	sbci	r31, 0xFF	; 255
    27b6:	81 e0       	ldi	r24, 0x01	; 1
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	91 83       	std	Z+1, r25	; 0x01
    27bc:	80 83       	st	Z, r24
    27be:	64 c0       	rjmp	.+200    	; 0x2888 <LCD_Send_Data+0x466>
	else if (__tmp > 65535)
    27c0:	fe 01       	movw	r30, r28
    27c2:	ea 5b       	subi	r30, 0xBA	; 186
    27c4:	ff 4f       	sbci	r31, 0xFF	; 255
    27c6:	60 81       	ld	r22, Z
    27c8:	71 81       	ldd	r23, Z+1	; 0x01
    27ca:	82 81       	ldd	r24, Z+2	; 0x02
    27cc:	93 81       	ldd	r25, Z+3	; 0x03
    27ce:	20 e0       	ldi	r18, 0x00	; 0
    27d0:	3f ef       	ldi	r19, 0xFF	; 255
    27d2:	4f e7       	ldi	r20, 0x7F	; 127
    27d4:	57 e4       	ldi	r21, 0x47	; 71
    27d6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    27da:	18 16       	cp	r1, r24
    27dc:	0c f0       	brlt	.+2      	; 0x27e0 <LCD_Send_Data+0x3be>
    27de:	43 c0       	rjmp	.+134    	; 0x2866 <LCD_Send_Data+0x444>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27e0:	fe 01       	movw	r30, r28
    27e2:	e6 5b       	subi	r30, 0xB6	; 182
    27e4:	ff 4f       	sbci	r31, 0xFF	; 255
    27e6:	60 81       	ld	r22, Z
    27e8:	71 81       	ldd	r23, Z+1	; 0x01
    27ea:	82 81       	ldd	r24, Z+2	; 0x02
    27ec:	93 81       	ldd	r25, Z+3	; 0x03
    27ee:	20 e0       	ldi	r18, 0x00	; 0
    27f0:	30 e0       	ldi	r19, 0x00	; 0
    27f2:	40 e2       	ldi	r20, 0x20	; 32
    27f4:	51 e4       	ldi	r21, 0x41	; 65
    27f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27fa:	dc 01       	movw	r26, r24
    27fc:	cb 01       	movw	r24, r22
    27fe:	8e 01       	movw	r16, r28
    2800:	0c 5b       	subi	r16, 0xBC	; 188
    2802:	1f 4f       	sbci	r17, 0xFF	; 255
    2804:	bc 01       	movw	r22, r24
    2806:	cd 01       	movw	r24, r26
    2808:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    280c:	dc 01       	movw	r26, r24
    280e:	cb 01       	movw	r24, r22
    2810:	f8 01       	movw	r30, r16
    2812:	91 83       	std	Z+1, r25	; 0x01
    2814:	80 83       	st	Z, r24
    2816:	1f c0       	rjmp	.+62     	; 0x2856 <LCD_Send_Data+0x434>
    2818:	fe 01       	movw	r30, r28
    281a:	ee 5b       	subi	r30, 0xBE	; 190
    281c:	ff 4f       	sbci	r31, 0xFF	; 255
    281e:	88 ec       	ldi	r24, 0xC8	; 200
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	91 83       	std	Z+1, r25	; 0x01
    2824:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2826:	fe 01       	movw	r30, r28
    2828:	ee 5b       	subi	r30, 0xBE	; 190
    282a:	ff 4f       	sbci	r31, 0xFF	; 255
    282c:	80 81       	ld	r24, Z
    282e:	91 81       	ldd	r25, Z+1	; 0x01
    2830:	01 97       	sbiw	r24, 0x01	; 1
    2832:	f1 f7       	brne	.-4      	; 0x2830 <LCD_Send_Data+0x40e>
    2834:	fe 01       	movw	r30, r28
    2836:	ee 5b       	subi	r30, 0xBE	; 190
    2838:	ff 4f       	sbci	r31, 0xFF	; 255
    283a:	91 83       	std	Z+1, r25	; 0x01
    283c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    283e:	de 01       	movw	r26, r28
    2840:	ac 5b       	subi	r26, 0xBC	; 188
    2842:	bf 4f       	sbci	r27, 0xFF	; 255
    2844:	fe 01       	movw	r30, r28
    2846:	ec 5b       	subi	r30, 0xBC	; 188
    2848:	ff 4f       	sbci	r31, 0xFF	; 255
    284a:	80 81       	ld	r24, Z
    284c:	91 81       	ldd	r25, Z+1	; 0x01
    284e:	01 97       	sbiw	r24, 0x01	; 1
    2850:	11 96       	adiw	r26, 0x01	; 1
    2852:	9c 93       	st	X, r25
    2854:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2856:	fe 01       	movw	r30, r28
    2858:	ec 5b       	subi	r30, 0xBC	; 188
    285a:	ff 4f       	sbci	r31, 0xFF	; 255
    285c:	80 81       	ld	r24, Z
    285e:	91 81       	ldd	r25, Z+1	; 0x01
    2860:	00 97       	sbiw	r24, 0x00	; 0
    2862:	d1 f6       	brne	.-76     	; 0x2818 <LCD_Send_Data+0x3f6>
    2864:	42 c0       	rjmp	.+132    	; 0x28ea <LCD_Send_Data+0x4c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2866:	8e 01       	movw	r16, r28
    2868:	0c 5b       	subi	r16, 0xBC	; 188
    286a:	1f 4f       	sbci	r17, 0xFF	; 255
    286c:	fe 01       	movw	r30, r28
    286e:	ea 5b       	subi	r30, 0xBA	; 186
    2870:	ff 4f       	sbci	r31, 0xFF	; 255
    2872:	60 81       	ld	r22, Z
    2874:	71 81       	ldd	r23, Z+1	; 0x01
    2876:	82 81       	ldd	r24, Z+2	; 0x02
    2878:	93 81       	ldd	r25, Z+3	; 0x03
    287a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    287e:	dc 01       	movw	r26, r24
    2880:	cb 01       	movw	r24, r22
    2882:	f8 01       	movw	r30, r16
    2884:	91 83       	std	Z+1, r25	; 0x01
    2886:	80 83       	st	Z, r24
    2888:	de 01       	movw	r26, r28
    288a:	a0 5c       	subi	r26, 0xC0	; 192
    288c:	bf 4f       	sbci	r27, 0xFF	; 255
    288e:	fe 01       	movw	r30, r28
    2890:	ec 5b       	subi	r30, 0xBC	; 188
    2892:	ff 4f       	sbci	r31, 0xFF	; 255
    2894:	80 81       	ld	r24, Z
    2896:	91 81       	ldd	r25, Z+1	; 0x01
    2898:	11 96       	adiw	r26, 0x01	; 1
    289a:	9c 93       	st	X, r25
    289c:	8e 93       	st	-X, r24
    289e:	fe 01       	movw	r30, r28
    28a0:	e0 5c       	subi	r30, 0xC0	; 192
    28a2:	ff 4f       	sbci	r31, 0xFF	; 255
    28a4:	80 81       	ld	r24, Z
    28a6:	91 81       	ldd	r25, Z+1	; 0x01
    28a8:	01 97       	sbiw	r24, 0x01	; 1
    28aa:	f1 f7       	brne	.-4      	; 0x28a8 <LCD_Send_Data+0x486>
    28ac:	fe 01       	movw	r30, r28
    28ae:	e0 5c       	subi	r30, 0xC0	; 192
    28b0:	ff 4f       	sbci	r31, 0xFF	; 255
    28b2:	91 83       	std	Z+1, r25	; 0x01
    28b4:	80 83       	st	Z, r24
    28b6:	19 c0       	rjmp	.+50     	; 0x28ea <LCD_Send_Data+0x4c8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    28b8:	8e 01       	movw	r16, r28
    28ba:	02 5b       	subi	r16, 0xB2	; 178
    28bc:	1f 4f       	sbci	r17, 0xFF	; 255
    28be:	fe 01       	movw	r30, r28
    28c0:	e1 5b       	subi	r30, 0xB1	; 177
    28c2:	ff 4f       	sbci	r31, 0xFF	; 255
    28c4:	60 81       	ld	r22, Z
    28c6:	71 81       	ldd	r23, Z+1	; 0x01
    28c8:	82 81       	ldd	r24, Z+2	; 0x02
    28ca:	93 81       	ldd	r25, Z+3	; 0x03
    28cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28d0:	dc 01       	movw	r26, r24
    28d2:	cb 01       	movw	r24, r22
    28d4:	f8 01       	movw	r30, r16
    28d6:	80 83       	st	Z, r24
    28d8:	fe 01       	movw	r30, r28
    28da:	e2 5b       	subi	r30, 0xB2	; 178
    28dc:	ff 4f       	sbci	r31, 0xFF	; 255
    28de:	80 81       	ld	r24, Z
    28e0:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    28e2:	8f ad       	ldd	r24, Y+63	; 0x3f
    28e4:	8a 95       	dec	r24
    28e6:	f1 f7       	brne	.-4      	; 0x28e4 <LCD_Send_Data+0x4c2>
    28e8:	8f af       	std	Y+63, r24	; 0x3f
    _delay_us(1);
    DIO_SetGroupValue(LCD_GROUP_DATA , data);
    28ea:	fe 01       	movw	r30, r28
    28ec:	e1 59       	subi	r30, 0x91	; 145
    28ee:	ff 4f       	sbci	r31, 0xFF	; 255
    28f0:	83 e0       	ldi	r24, 0x03	; 3
    28f2:	60 81       	ld	r22, Z
    28f4:	0e 94 3d 09 	call	0x127a	; 0x127a <DIO_SetGroupValue>
    28f8:	80 e0       	ldi	r24, 0x00	; 0
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	a0 e8       	ldi	r26, 0x80	; 128
    28fe:	bf e3       	ldi	r27, 0x3F	; 63
    2900:	8b af       	std	Y+59, r24	; 0x3b
    2902:	9c af       	std	Y+60, r25	; 0x3c
    2904:	ad af       	std	Y+61, r26	; 0x3d
    2906:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2908:	6b ad       	ldd	r22, Y+59	; 0x3b
    290a:	7c ad       	ldd	r23, Y+60	; 0x3c
    290c:	8d ad       	ldd	r24, Y+61	; 0x3d
    290e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2910:	2b ea       	ldi	r18, 0xAB	; 171
    2912:	3a ea       	ldi	r19, 0xAA	; 170
    2914:	4a e2       	ldi	r20, 0x2A	; 42
    2916:	50 e4       	ldi	r21, 0x40	; 64
    2918:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    291c:	dc 01       	movw	r26, r24
    291e:	cb 01       	movw	r24, r22
    2920:	8f ab       	std	Y+55, r24	; 0x37
    2922:	98 af       	std	Y+56, r25	; 0x38
    2924:	a9 af       	std	Y+57, r26	; 0x39
    2926:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2928:	6f a9       	ldd	r22, Y+55	; 0x37
    292a:	78 ad       	ldd	r23, Y+56	; 0x38
    292c:	89 ad       	ldd	r24, Y+57	; 0x39
    292e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2930:	20 e0       	ldi	r18, 0x00	; 0
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	40 e8       	ldi	r20, 0x80	; 128
    2936:	5f e3       	ldi	r21, 0x3F	; 63
    2938:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    293c:	88 23       	and	r24, r24
    293e:	1c f4       	brge	.+6      	; 0x2946 <LCD_Send_Data+0x524>
		__ticks = 1;
    2940:	81 e0       	ldi	r24, 0x01	; 1
    2942:	8e ab       	std	Y+54, r24	; 0x36
    2944:	91 c0       	rjmp	.+290    	; 0x2a68 <LCD_Send_Data+0x646>
	else if (__tmp > 255)
    2946:	6f a9       	ldd	r22, Y+55	; 0x37
    2948:	78 ad       	ldd	r23, Y+56	; 0x38
    294a:	89 ad       	ldd	r24, Y+57	; 0x39
    294c:	9a ad       	ldd	r25, Y+58	; 0x3a
    294e:	20 e0       	ldi	r18, 0x00	; 0
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	4f e7       	ldi	r20, 0x7F	; 127
    2954:	53 e4       	ldi	r21, 0x43	; 67
    2956:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    295a:	18 16       	cp	r1, r24
    295c:	0c f0       	brlt	.+2      	; 0x2960 <LCD_Send_Data+0x53e>
    295e:	7b c0       	rjmp	.+246    	; 0x2a56 <LCD_Send_Data+0x634>
	{
		_delay_ms(__us / 1000.0);
    2960:	6b ad       	ldd	r22, Y+59	; 0x3b
    2962:	7c ad       	ldd	r23, Y+60	; 0x3c
    2964:	8d ad       	ldd	r24, Y+61	; 0x3d
    2966:	9e ad       	ldd	r25, Y+62	; 0x3e
    2968:	20 e0       	ldi	r18, 0x00	; 0
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	4a e7       	ldi	r20, 0x7A	; 122
    296e:	54 e4       	ldi	r21, 0x44	; 68
    2970:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2974:	dc 01       	movw	r26, r24
    2976:	cb 01       	movw	r24, r22
    2978:	8a ab       	std	Y+50, r24	; 0x32
    297a:	9b ab       	std	Y+51, r25	; 0x33
    297c:	ac ab       	std	Y+52, r26	; 0x34
    297e:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2980:	6a a9       	ldd	r22, Y+50	; 0x32
    2982:	7b a9       	ldd	r23, Y+51	; 0x33
    2984:	8c a9       	ldd	r24, Y+52	; 0x34
    2986:	9d a9       	ldd	r25, Y+53	; 0x35
    2988:	20 e0       	ldi	r18, 0x00	; 0
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	4a ef       	ldi	r20, 0xFA	; 250
    298e:	54 e4       	ldi	r21, 0x44	; 68
    2990:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2994:	dc 01       	movw	r26, r24
    2996:	cb 01       	movw	r24, r22
    2998:	8e a7       	std	Y+46, r24	; 0x2e
    299a:	9f a7       	std	Y+47, r25	; 0x2f
    299c:	a8 ab       	std	Y+48, r26	; 0x30
    299e:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    29a0:	6e a5       	ldd	r22, Y+46	; 0x2e
    29a2:	7f a5       	ldd	r23, Y+47	; 0x2f
    29a4:	88 a9       	ldd	r24, Y+48	; 0x30
    29a6:	99 a9       	ldd	r25, Y+49	; 0x31
    29a8:	20 e0       	ldi	r18, 0x00	; 0
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	40 e8       	ldi	r20, 0x80	; 128
    29ae:	5f e3       	ldi	r21, 0x3F	; 63
    29b0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    29b4:	88 23       	and	r24, r24
    29b6:	2c f4       	brge	.+10     	; 0x29c2 <LCD_Send_Data+0x5a0>
		__ticks = 1;
    29b8:	81 e0       	ldi	r24, 0x01	; 1
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	9d a7       	std	Y+45, r25	; 0x2d
    29be:	8c a7       	std	Y+44, r24	; 0x2c
    29c0:	3f c0       	rjmp	.+126    	; 0x2a40 <LCD_Send_Data+0x61e>
	else if (__tmp > 65535)
    29c2:	6e a5       	ldd	r22, Y+46	; 0x2e
    29c4:	7f a5       	ldd	r23, Y+47	; 0x2f
    29c6:	88 a9       	ldd	r24, Y+48	; 0x30
    29c8:	99 a9       	ldd	r25, Y+49	; 0x31
    29ca:	20 e0       	ldi	r18, 0x00	; 0
    29cc:	3f ef       	ldi	r19, 0xFF	; 255
    29ce:	4f e7       	ldi	r20, 0x7F	; 127
    29d0:	57 e4       	ldi	r21, 0x47	; 71
    29d2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    29d6:	18 16       	cp	r1, r24
    29d8:	4c f5       	brge	.+82     	; 0x2a2c <LCD_Send_Data+0x60a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29da:	6a a9       	ldd	r22, Y+50	; 0x32
    29dc:	7b a9       	ldd	r23, Y+51	; 0x33
    29de:	8c a9       	ldd	r24, Y+52	; 0x34
    29e0:	9d a9       	ldd	r25, Y+53	; 0x35
    29e2:	20 e0       	ldi	r18, 0x00	; 0
    29e4:	30 e0       	ldi	r19, 0x00	; 0
    29e6:	40 e2       	ldi	r20, 0x20	; 32
    29e8:	51 e4       	ldi	r21, 0x41	; 65
    29ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29ee:	dc 01       	movw	r26, r24
    29f0:	cb 01       	movw	r24, r22
    29f2:	bc 01       	movw	r22, r24
    29f4:	cd 01       	movw	r24, r26
    29f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29fa:	dc 01       	movw	r26, r24
    29fc:	cb 01       	movw	r24, r22
    29fe:	9d a7       	std	Y+45, r25	; 0x2d
    2a00:	8c a7       	std	Y+44, r24	; 0x2c
    2a02:	0f c0       	rjmp	.+30     	; 0x2a22 <LCD_Send_Data+0x600>
    2a04:	88 ec       	ldi	r24, 0xC8	; 200
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	9b a7       	std	Y+43, r25	; 0x2b
    2a0a:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a0c:	8a a5       	ldd	r24, Y+42	; 0x2a
    2a0e:	9b a5       	ldd	r25, Y+43	; 0x2b
    2a10:	01 97       	sbiw	r24, 0x01	; 1
    2a12:	f1 f7       	brne	.-4      	; 0x2a10 <LCD_Send_Data+0x5ee>
    2a14:	9b a7       	std	Y+43, r25	; 0x2b
    2a16:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a18:	8c a5       	ldd	r24, Y+44	; 0x2c
    2a1a:	9d a5       	ldd	r25, Y+45	; 0x2d
    2a1c:	01 97       	sbiw	r24, 0x01	; 1
    2a1e:	9d a7       	std	Y+45, r25	; 0x2d
    2a20:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a22:	8c a5       	ldd	r24, Y+44	; 0x2c
    2a24:	9d a5       	ldd	r25, Y+45	; 0x2d
    2a26:	00 97       	sbiw	r24, 0x00	; 0
    2a28:	69 f7       	brne	.-38     	; 0x2a04 <LCD_Send_Data+0x5e2>
    2a2a:	24 c0       	rjmp	.+72     	; 0x2a74 <LCD_Send_Data+0x652>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a2c:	6e a5       	ldd	r22, Y+46	; 0x2e
    2a2e:	7f a5       	ldd	r23, Y+47	; 0x2f
    2a30:	88 a9       	ldd	r24, Y+48	; 0x30
    2a32:	99 a9       	ldd	r25, Y+49	; 0x31
    2a34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a38:	dc 01       	movw	r26, r24
    2a3a:	cb 01       	movw	r24, r22
    2a3c:	9d a7       	std	Y+45, r25	; 0x2d
    2a3e:	8c a7       	std	Y+44, r24	; 0x2c
    2a40:	8c a5       	ldd	r24, Y+44	; 0x2c
    2a42:	9d a5       	ldd	r25, Y+45	; 0x2d
    2a44:	99 a7       	std	Y+41, r25	; 0x29
    2a46:	88 a7       	std	Y+40, r24	; 0x28
    2a48:	88 a5       	ldd	r24, Y+40	; 0x28
    2a4a:	99 a5       	ldd	r25, Y+41	; 0x29
    2a4c:	01 97       	sbiw	r24, 0x01	; 1
    2a4e:	f1 f7       	brne	.-4      	; 0x2a4c <LCD_Send_Data+0x62a>
    2a50:	99 a7       	std	Y+41, r25	; 0x29
    2a52:	88 a7       	std	Y+40, r24	; 0x28
    2a54:	0f c0       	rjmp	.+30     	; 0x2a74 <LCD_Send_Data+0x652>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a56:	6f a9       	ldd	r22, Y+55	; 0x37
    2a58:	78 ad       	ldd	r23, Y+56	; 0x38
    2a5a:	89 ad       	ldd	r24, Y+57	; 0x39
    2a5c:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a62:	dc 01       	movw	r26, r24
    2a64:	cb 01       	movw	r24, r22
    2a66:	8e ab       	std	Y+54, r24	; 0x36
    2a68:	8e a9       	ldd	r24, Y+54	; 0x36
    2a6a:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a6c:	8f a1       	ldd	r24, Y+39	; 0x27
    2a6e:	8a 95       	dec	r24
    2a70:	f1 f7       	brne	.-4      	; 0x2a6e <LCD_Send_Data+0x64c>
    2a72:	8f a3       	std	Y+39, r24	; 0x27
    _delay_us(1);
    DIO_SetPinValue(LCD_GROUP_CONTROL , LCD_E_PIN, LOW);
    2a74:	81 e0       	ldi	r24, 0x01	; 1
    2a76:	61 e0       	ldi	r22, 0x01	; 1
    2a78:	40 e0       	ldi	r20, 0x00	; 0
    2a7a:	0e 94 81 07 	call	0xf02	; 0xf02 <DIO_SetPinValue>
    2a7e:	80 e0       	ldi	r24, 0x00	; 0
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	a0 ea       	ldi	r26, 0xA0	; 160
    2a84:	b0 e4       	ldi	r27, 0x40	; 64
    2a86:	8b a3       	std	Y+35, r24	; 0x23
    2a88:	9c a3       	std	Y+36, r25	; 0x24
    2a8a:	ad a3       	std	Y+37, r26	; 0x25
    2a8c:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2a8e:	6b a1       	ldd	r22, Y+35	; 0x23
    2a90:	7c a1       	ldd	r23, Y+36	; 0x24
    2a92:	8d a1       	ldd	r24, Y+37	; 0x25
    2a94:	9e a1       	ldd	r25, Y+38	; 0x26
    2a96:	2b ea       	ldi	r18, 0xAB	; 171
    2a98:	3a ea       	ldi	r19, 0xAA	; 170
    2a9a:	4a e2       	ldi	r20, 0x2A	; 42
    2a9c:	50 e4       	ldi	r21, 0x40	; 64
    2a9e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2aa2:	dc 01       	movw	r26, r24
    2aa4:	cb 01       	movw	r24, r22
    2aa6:	8f 8f       	std	Y+31, r24	; 0x1f
    2aa8:	98 a3       	std	Y+32, r25	; 0x20
    2aaa:	a9 a3       	std	Y+33, r26	; 0x21
    2aac:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2aae:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2ab0:	78 a1       	ldd	r23, Y+32	; 0x20
    2ab2:	89 a1       	ldd	r24, Y+33	; 0x21
    2ab4:	9a a1       	ldd	r25, Y+34	; 0x22
    2ab6:	20 e0       	ldi	r18, 0x00	; 0
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	40 e8       	ldi	r20, 0x80	; 128
    2abc:	5f e3       	ldi	r21, 0x3F	; 63
    2abe:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2ac2:	88 23       	and	r24, r24
    2ac4:	1c f4       	brge	.+6      	; 0x2acc <LCD_Send_Data+0x6aa>
		__ticks = 1;
    2ac6:	81 e0       	ldi	r24, 0x01	; 1
    2ac8:	8e 8f       	std	Y+30, r24	; 0x1e
    2aca:	91 c0       	rjmp	.+290    	; 0x2bee <LCD_Send_Data+0x7cc>
	else if (__tmp > 255)
    2acc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2ace:	78 a1       	ldd	r23, Y+32	; 0x20
    2ad0:	89 a1       	ldd	r24, Y+33	; 0x21
    2ad2:	9a a1       	ldd	r25, Y+34	; 0x22
    2ad4:	20 e0       	ldi	r18, 0x00	; 0
    2ad6:	30 e0       	ldi	r19, 0x00	; 0
    2ad8:	4f e7       	ldi	r20, 0x7F	; 127
    2ada:	53 e4       	ldi	r21, 0x43	; 67
    2adc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2ae0:	18 16       	cp	r1, r24
    2ae2:	0c f0       	brlt	.+2      	; 0x2ae6 <LCD_Send_Data+0x6c4>
    2ae4:	7b c0       	rjmp	.+246    	; 0x2bdc <LCD_Send_Data+0x7ba>
	{
		_delay_ms(__us / 1000.0);
    2ae6:	6b a1       	ldd	r22, Y+35	; 0x23
    2ae8:	7c a1       	ldd	r23, Y+36	; 0x24
    2aea:	8d a1       	ldd	r24, Y+37	; 0x25
    2aec:	9e a1       	ldd	r25, Y+38	; 0x26
    2aee:	20 e0       	ldi	r18, 0x00	; 0
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	4a e7       	ldi	r20, 0x7A	; 122
    2af4:	54 e4       	ldi	r21, 0x44	; 68
    2af6:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2afa:	dc 01       	movw	r26, r24
    2afc:	cb 01       	movw	r24, r22
    2afe:	8a 8f       	std	Y+26, r24	; 0x1a
    2b00:	9b 8f       	std	Y+27, r25	; 0x1b
    2b02:	ac 8f       	std	Y+28, r26	; 0x1c
    2b04:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b06:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2b08:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2b0a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2b0c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2b0e:	20 e0       	ldi	r18, 0x00	; 0
    2b10:	30 e0       	ldi	r19, 0x00	; 0
    2b12:	4a ef       	ldi	r20, 0xFA	; 250
    2b14:	54 e4       	ldi	r21, 0x44	; 68
    2b16:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b1a:	dc 01       	movw	r26, r24
    2b1c:	cb 01       	movw	r24, r22
    2b1e:	8e 8b       	std	Y+22, r24	; 0x16
    2b20:	9f 8b       	std	Y+23, r25	; 0x17
    2b22:	a8 8f       	std	Y+24, r26	; 0x18
    2b24:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2b26:	6e 89       	ldd	r22, Y+22	; 0x16
    2b28:	7f 89       	ldd	r23, Y+23	; 0x17
    2b2a:	88 8d       	ldd	r24, Y+24	; 0x18
    2b2c:	99 8d       	ldd	r25, Y+25	; 0x19
    2b2e:	20 e0       	ldi	r18, 0x00	; 0
    2b30:	30 e0       	ldi	r19, 0x00	; 0
    2b32:	40 e8       	ldi	r20, 0x80	; 128
    2b34:	5f e3       	ldi	r21, 0x3F	; 63
    2b36:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2b3a:	88 23       	and	r24, r24
    2b3c:	2c f4       	brge	.+10     	; 0x2b48 <LCD_Send_Data+0x726>
		__ticks = 1;
    2b3e:	81 e0       	ldi	r24, 0x01	; 1
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	9d 8b       	std	Y+21, r25	; 0x15
    2b44:	8c 8b       	std	Y+20, r24	; 0x14
    2b46:	3f c0       	rjmp	.+126    	; 0x2bc6 <LCD_Send_Data+0x7a4>
	else if (__tmp > 65535)
    2b48:	6e 89       	ldd	r22, Y+22	; 0x16
    2b4a:	7f 89       	ldd	r23, Y+23	; 0x17
    2b4c:	88 8d       	ldd	r24, Y+24	; 0x18
    2b4e:	99 8d       	ldd	r25, Y+25	; 0x19
    2b50:	20 e0       	ldi	r18, 0x00	; 0
    2b52:	3f ef       	ldi	r19, 0xFF	; 255
    2b54:	4f e7       	ldi	r20, 0x7F	; 127
    2b56:	57 e4       	ldi	r21, 0x47	; 71
    2b58:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2b5c:	18 16       	cp	r1, r24
    2b5e:	4c f5       	brge	.+82     	; 0x2bb2 <LCD_Send_Data+0x790>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b60:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2b62:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2b64:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2b66:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2b68:	20 e0       	ldi	r18, 0x00	; 0
    2b6a:	30 e0       	ldi	r19, 0x00	; 0
    2b6c:	40 e2       	ldi	r20, 0x20	; 32
    2b6e:	51 e4       	ldi	r21, 0x41	; 65
    2b70:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b74:	dc 01       	movw	r26, r24
    2b76:	cb 01       	movw	r24, r22
    2b78:	bc 01       	movw	r22, r24
    2b7a:	cd 01       	movw	r24, r26
    2b7c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b80:	dc 01       	movw	r26, r24
    2b82:	cb 01       	movw	r24, r22
    2b84:	9d 8b       	std	Y+21, r25	; 0x15
    2b86:	8c 8b       	std	Y+20, r24	; 0x14
    2b88:	0f c0       	rjmp	.+30     	; 0x2ba8 <LCD_Send_Data+0x786>
    2b8a:	88 ec       	ldi	r24, 0xC8	; 200
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	9b 8b       	std	Y+19, r25	; 0x13
    2b90:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b92:	8a 89       	ldd	r24, Y+18	; 0x12
    2b94:	9b 89       	ldd	r25, Y+19	; 0x13
    2b96:	01 97       	sbiw	r24, 0x01	; 1
    2b98:	f1 f7       	brne	.-4      	; 0x2b96 <LCD_Send_Data+0x774>
    2b9a:	9b 8b       	std	Y+19, r25	; 0x13
    2b9c:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b9e:	8c 89       	ldd	r24, Y+20	; 0x14
    2ba0:	9d 89       	ldd	r25, Y+21	; 0x15
    2ba2:	01 97       	sbiw	r24, 0x01	; 1
    2ba4:	9d 8b       	std	Y+21, r25	; 0x15
    2ba6:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ba8:	8c 89       	ldd	r24, Y+20	; 0x14
    2baa:	9d 89       	ldd	r25, Y+21	; 0x15
    2bac:	00 97       	sbiw	r24, 0x00	; 0
    2bae:	69 f7       	brne	.-38     	; 0x2b8a <LCD_Send_Data+0x768>
    2bb0:	24 c0       	rjmp	.+72     	; 0x2bfa <LCD_Send_Data+0x7d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bb2:	6e 89       	ldd	r22, Y+22	; 0x16
    2bb4:	7f 89       	ldd	r23, Y+23	; 0x17
    2bb6:	88 8d       	ldd	r24, Y+24	; 0x18
    2bb8:	99 8d       	ldd	r25, Y+25	; 0x19
    2bba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bbe:	dc 01       	movw	r26, r24
    2bc0:	cb 01       	movw	r24, r22
    2bc2:	9d 8b       	std	Y+21, r25	; 0x15
    2bc4:	8c 8b       	std	Y+20, r24	; 0x14
    2bc6:	8c 89       	ldd	r24, Y+20	; 0x14
    2bc8:	9d 89       	ldd	r25, Y+21	; 0x15
    2bca:	99 8b       	std	Y+17, r25	; 0x11
    2bcc:	88 8b       	std	Y+16, r24	; 0x10
    2bce:	88 89       	ldd	r24, Y+16	; 0x10
    2bd0:	99 89       	ldd	r25, Y+17	; 0x11
    2bd2:	01 97       	sbiw	r24, 0x01	; 1
    2bd4:	f1 f7       	brne	.-4      	; 0x2bd2 <LCD_Send_Data+0x7b0>
    2bd6:	99 8b       	std	Y+17, r25	; 0x11
    2bd8:	88 8b       	std	Y+16, r24	; 0x10
    2bda:	0f c0       	rjmp	.+30     	; 0x2bfa <LCD_Send_Data+0x7d8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2bdc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2bde:	78 a1       	ldd	r23, Y+32	; 0x20
    2be0:	89 a1       	ldd	r24, Y+33	; 0x21
    2be2:	9a a1       	ldd	r25, Y+34	; 0x22
    2be4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2be8:	dc 01       	movw	r26, r24
    2bea:	cb 01       	movw	r24, r22
    2bec:	8e 8f       	std	Y+30, r24	; 0x1e
    2bee:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2bf0:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2bf2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bf4:	8a 95       	dec	r24
    2bf6:	f1 f7       	brne	.-4      	; 0x2bf4 <LCD_Send_Data+0x7d2>
    2bf8:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_us(5);
    DIO_SetPinValue(LCD_GROUP_CONTROL , LCD_E_PIN, HIGH);
    2bfa:	81 e0       	ldi	r24, 0x01	; 1
    2bfc:	61 e0       	ldi	r22, 0x01	; 1
    2bfe:	41 e0       	ldi	r20, 0x01	; 1
    2c00:	0e 94 81 07 	call	0xf02	; 0xf02 <DIO_SetPinValue>
    2c04:	80 e0       	ldi	r24, 0x00	; 0
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	a0 e2       	ldi	r26, 0x20	; 32
    2c0a:	b1 e4       	ldi	r27, 0x41	; 65
    2c0c:	8b 87       	std	Y+11, r24	; 0x0b
    2c0e:	9c 87       	std	Y+12, r25	; 0x0c
    2c10:	ad 87       	std	Y+13, r26	; 0x0d
    2c12:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c14:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c16:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c18:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c1c:	20 e0       	ldi	r18, 0x00	; 0
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	4a ef       	ldi	r20, 0xFA	; 250
    2c22:	54 e4       	ldi	r21, 0x44	; 68
    2c24:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c28:	dc 01       	movw	r26, r24
    2c2a:	cb 01       	movw	r24, r22
    2c2c:	8f 83       	std	Y+7, r24	; 0x07
    2c2e:	98 87       	std	Y+8, r25	; 0x08
    2c30:	a9 87       	std	Y+9, r26	; 0x09
    2c32:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c34:	6f 81       	ldd	r22, Y+7	; 0x07
    2c36:	78 85       	ldd	r23, Y+8	; 0x08
    2c38:	89 85       	ldd	r24, Y+9	; 0x09
    2c3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c3c:	20 e0       	ldi	r18, 0x00	; 0
    2c3e:	30 e0       	ldi	r19, 0x00	; 0
    2c40:	40 e8       	ldi	r20, 0x80	; 128
    2c42:	5f e3       	ldi	r21, 0x3F	; 63
    2c44:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2c48:	88 23       	and	r24, r24
    2c4a:	2c f4       	brge	.+10     	; 0x2c56 <LCD_Send_Data+0x834>
		__ticks = 1;
    2c4c:	81 e0       	ldi	r24, 0x01	; 1
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	9e 83       	std	Y+6, r25	; 0x06
    2c52:	8d 83       	std	Y+5, r24	; 0x05
    2c54:	3f c0       	rjmp	.+126    	; 0x2cd4 <LCD_Send_Data+0x8b2>
	else if (__tmp > 65535)
    2c56:	6f 81       	ldd	r22, Y+7	; 0x07
    2c58:	78 85       	ldd	r23, Y+8	; 0x08
    2c5a:	89 85       	ldd	r24, Y+9	; 0x09
    2c5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c5e:	20 e0       	ldi	r18, 0x00	; 0
    2c60:	3f ef       	ldi	r19, 0xFF	; 255
    2c62:	4f e7       	ldi	r20, 0x7F	; 127
    2c64:	57 e4       	ldi	r21, 0x47	; 71
    2c66:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2c6a:	18 16       	cp	r1, r24
    2c6c:	4c f5       	brge	.+82     	; 0x2cc0 <LCD_Send_Data+0x89e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c70:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c72:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c74:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c76:	20 e0       	ldi	r18, 0x00	; 0
    2c78:	30 e0       	ldi	r19, 0x00	; 0
    2c7a:	40 e2       	ldi	r20, 0x20	; 32
    2c7c:	51 e4       	ldi	r21, 0x41	; 65
    2c7e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c82:	dc 01       	movw	r26, r24
    2c84:	cb 01       	movw	r24, r22
    2c86:	bc 01       	movw	r22, r24
    2c88:	cd 01       	movw	r24, r26
    2c8a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c8e:	dc 01       	movw	r26, r24
    2c90:	cb 01       	movw	r24, r22
    2c92:	9e 83       	std	Y+6, r25	; 0x06
    2c94:	8d 83       	std	Y+5, r24	; 0x05
    2c96:	0f c0       	rjmp	.+30     	; 0x2cb6 <LCD_Send_Data+0x894>
    2c98:	88 ec       	ldi	r24, 0xC8	; 200
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
    2c9c:	9c 83       	std	Y+4, r25	; 0x04
    2c9e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ca4:	01 97       	sbiw	r24, 0x01	; 1
    2ca6:	f1 f7       	brne	.-4      	; 0x2ca4 <LCD_Send_Data+0x882>
    2ca8:	9c 83       	std	Y+4, r25	; 0x04
    2caa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cac:	8d 81       	ldd	r24, Y+5	; 0x05
    2cae:	9e 81       	ldd	r25, Y+6	; 0x06
    2cb0:	01 97       	sbiw	r24, 0x01	; 1
    2cb2:	9e 83       	std	Y+6, r25	; 0x06
    2cb4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cb6:	8d 81       	ldd	r24, Y+5	; 0x05
    2cb8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cba:	00 97       	sbiw	r24, 0x00	; 0
    2cbc:	69 f7       	brne	.-38     	; 0x2c98 <LCD_Send_Data+0x876>
    2cbe:	14 c0       	rjmp	.+40     	; 0x2ce8 <LCD_Send_Data+0x8c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cc0:	6f 81       	ldd	r22, Y+7	; 0x07
    2cc2:	78 85       	ldd	r23, Y+8	; 0x08
    2cc4:	89 85       	ldd	r24, Y+9	; 0x09
    2cc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cc8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ccc:	dc 01       	movw	r26, r24
    2cce:	cb 01       	movw	r24, r22
    2cd0:	9e 83       	std	Y+6, r25	; 0x06
    2cd2:	8d 83       	std	Y+5, r24	; 0x05
    2cd4:	8d 81       	ldd	r24, Y+5	; 0x05
    2cd6:	9e 81       	ldd	r25, Y+6	; 0x06
    2cd8:	9a 83       	std	Y+2, r25	; 0x02
    2cda:	89 83       	std	Y+1, r24	; 0x01
    2cdc:	89 81       	ldd	r24, Y+1	; 0x01
    2cde:	9a 81       	ldd	r25, Y+2	; 0x02
    2ce0:	01 97       	sbiw	r24, 0x01	; 1
    2ce2:	f1 f7       	brne	.-4      	; 0x2ce0 <LCD_Send_Data+0x8be>
    2ce4:	9a 83       	std	Y+2, r25	; 0x02
    2ce6:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(10);
}
    2ce8:	c1 59       	subi	r28, 0x91	; 145
    2cea:	df 4f       	sbci	r29, 0xFF	; 255
    2cec:	0f b6       	in	r0, 0x3f	; 63
    2cee:	f8 94       	cli
    2cf0:	de bf       	out	0x3e, r29	; 62
    2cf2:	0f be       	out	0x3f, r0	; 63
    2cf4:	cd bf       	out	0x3d, r28	; 61
    2cf6:	cf 91       	pop	r28
    2cf8:	df 91       	pop	r29
    2cfa:	1f 91       	pop	r17
    2cfc:	0f 91       	pop	r16
    2cfe:	08 95       	ret

00002d00 <LCD_Send_string>:




void LCD_Send_string(u8 *ptr)
{
    2d00:	df 93       	push	r29
    2d02:	cf 93       	push	r28
    2d04:	00 d0       	rcall	.+0      	; 0x2d06 <LCD_Send_string+0x6>
    2d06:	0f 92       	push	r0
    2d08:	cd b7       	in	r28, 0x3d	; 61
    2d0a:	de b7       	in	r29, 0x3e	; 62
    2d0c:	9b 83       	std	Y+3, r25	; 0x03
    2d0e:	8a 83       	std	Y+2, r24	; 0x02
    u8 index = 0;
    2d10:	19 82       	std	Y+1, r1	; 0x01
    2d12:	0e c0       	rjmp	.+28     	; 0x2d30 <LCD_Send_string+0x30>
    while(ptr[index]  != '\0')
    {
        LCD_Send_Data(ptr[index]);
    2d14:	89 81       	ldd	r24, Y+1	; 0x01
    2d16:	28 2f       	mov	r18, r24
    2d18:	30 e0       	ldi	r19, 0x00	; 0
    2d1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d1c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d1e:	fc 01       	movw	r30, r24
    2d20:	e2 0f       	add	r30, r18
    2d22:	f3 1f       	adc	r31, r19
    2d24:	80 81       	ld	r24, Z
    2d26:	0e 94 11 12 	call	0x2422	; 0x2422 <LCD_Send_Data>
        index++;
    2d2a:	89 81       	ldd	r24, Y+1	; 0x01
    2d2c:	8f 5f       	subi	r24, 0xFF	; 255
    2d2e:	89 83       	std	Y+1, r24	; 0x01


void LCD_Send_string(u8 *ptr)
{
    u8 index = 0;
    while(ptr[index]  != '\0')
    2d30:	89 81       	ldd	r24, Y+1	; 0x01
    2d32:	28 2f       	mov	r18, r24
    2d34:	30 e0       	ldi	r19, 0x00	; 0
    2d36:	8a 81       	ldd	r24, Y+2	; 0x02
    2d38:	9b 81       	ldd	r25, Y+3	; 0x03
    2d3a:	fc 01       	movw	r30, r24
    2d3c:	e2 0f       	add	r30, r18
    2d3e:	f3 1f       	adc	r31, r19
    2d40:	80 81       	ld	r24, Z
    2d42:	88 23       	and	r24, r24
    2d44:	39 f7       	brne	.-50     	; 0x2d14 <LCD_Send_string+0x14>
    {
        LCD_Send_Data(ptr[index]);
        index++;
    }

}
    2d46:	0f 90       	pop	r0
    2d48:	0f 90       	pop	r0
    2d4a:	0f 90       	pop	r0
    2d4c:	cf 91       	pop	r28
    2d4e:	df 91       	pop	r29
    2d50:	08 95       	ret

00002d52 <LCD_Clear>:

void LCD_Clear(void)
{
    2d52:	df 93       	push	r29
    2d54:	cf 93       	push	r28
    2d56:	cd b7       	in	r28, 0x3d	; 61
    2d58:	de b7       	in	r29, 0x3e	; 62
    LCD_Send_Command(LCD_CLEAR);
    2d5a:	81 e0       	ldi	r24, 0x01	; 1
    2d5c:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <LCD_Send_Command>
}
    2d60:	cf 91       	pop	r28
    2d62:	df 91       	pop	r29
    2d64:	08 95       	ret

00002d66 <LCD_GOTOXY>:



void LCD_GOTOXY(u8 raw,u8 col)
{
    2d66:	df 93       	push	r29
    2d68:	cf 93       	push	r28
    2d6a:	00 d0       	rcall	.+0      	; 0x2d6c <LCD_GOTOXY+0x6>
    2d6c:	00 d0       	rcall	.+0      	; 0x2d6e <LCD_GOTOXY+0x8>
    2d6e:	cd b7       	in	r28, 0x3d	; 61
    2d70:	de b7       	in	r29, 0x3e	; 62
    2d72:	89 83       	std	Y+1, r24	; 0x01
    2d74:	6a 83       	std	Y+2, r22	; 0x02

	switch(raw)
    2d76:	89 81       	ldd	r24, Y+1	; 0x01
    2d78:	28 2f       	mov	r18, r24
    2d7a:	30 e0       	ldi	r19, 0x00	; 0
    2d7c:	3c 83       	std	Y+4, r19	; 0x04
    2d7e:	2b 83       	std	Y+3, r18	; 0x03
    2d80:	8b 81       	ldd	r24, Y+3	; 0x03
    2d82:	9c 81       	ldd	r25, Y+4	; 0x04
    2d84:	81 30       	cpi	r24, 0x01	; 1
    2d86:	91 05       	cpc	r25, r1
    2d88:	31 f0       	breq	.+12     	; 0x2d96 <LCD_GOTOXY+0x30>
    2d8a:	2b 81       	ldd	r18, Y+3	; 0x03
    2d8c:	3c 81       	ldd	r19, Y+4	; 0x04
    2d8e:	22 30       	cpi	r18, 0x02	; 2
    2d90:	31 05       	cpc	r19, r1
    2d92:	31 f0       	breq	.+12     	; 0x2da0 <LCD_GOTOXY+0x3a>
    2d94:	0a c0       	rjmp	.+20     	; 0x2daa <LCD_GOTOXY+0x44>
	{
	case 1:      LCD_Send_Command((0x00+col)|(0x80));        break;
    2d96:	8a 81       	ldd	r24, Y+2	; 0x02
    2d98:	80 68       	ori	r24, 0x80	; 128
    2d9a:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <LCD_Send_Command>
    2d9e:	05 c0       	rjmp	.+10     	; 0x2daa <LCD_GOTOXY+0x44>
	case 2:      LCD_Send_Command((0x40+col)|(0x80));        break;
    2da0:	8a 81       	ldd	r24, Y+2	; 0x02
    2da2:	80 5c       	subi	r24, 0xC0	; 192
    2da4:	80 68       	ori	r24, 0x80	; 128
    2da6:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <LCD_Send_Command>
	default : break;
	}


}
    2daa:	0f 90       	pop	r0
    2dac:	0f 90       	pop	r0
    2dae:	0f 90       	pop	r0
    2db0:	0f 90       	pop	r0
    2db2:	cf 91       	pop	r28
    2db4:	df 91       	pop	r29
    2db6:	08 95       	ret

00002db8 <LCD_WORK>:


void LCD_WORK (void ){
    2db8:	df 93       	push	r29
    2dba:	cf 93       	push	r28
    2dbc:	cd b7       	in	r28, 0x3d	; 61
    2dbe:	de b7       	in	r29, 0x3e	; 62
    2dc0:	a2 97       	sbiw	r28, 0x22	; 34
    2dc2:	0f b6       	in	r0, 0x3f	; 63
    2dc4:	f8 94       	cli
    2dc6:	de bf       	out	0x3e, r29	; 62
    2dc8:	0f be       	out	0x3f, r0	; 63
    2dca:	cd bf       	out	0x3d, r28	; 61


	u8 arr[16];
	u16 x = ADC_read(0);
    2dcc:	80 e0       	ldi	r24, 0x00	; 0
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	0e 94 33 0a 	call	0x1466	; 0x1466 <ADC_read>
    2dd4:	9a 8b       	std	Y+18, r25	; 0x12
    2dd6:	89 8b       	std	Y+17, r24	; 0x11
	u16 temp = x / 2;
    2dd8:	89 89       	ldd	r24, Y+17	; 0x11
    2dda:	9a 89       	ldd	r25, Y+18	; 0x12
    2ddc:	96 95       	lsr	r25
    2dde:	87 95       	ror	r24
    2de0:	98 8b       	std	Y+16, r25	; 0x10
    2de2:	8f 87       	std	Y+15, r24	; 0x0f


	itoa(temp, arr, 10);
    2de4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2de6:	98 89       	ldd	r25, Y+16	; 0x10
    2de8:	9e 01       	movw	r18, r28
    2dea:	2d 5e       	subi	r18, 0xED	; 237
    2dec:	3f 4f       	sbci	r19, 0xFF	; 255
    2dee:	b9 01       	movw	r22, r18
    2df0:	4a e0       	ldi	r20, 0x0A	; 10
    2df2:	50 e0       	ldi	r21, 0x00	; 0
    2df4:	0e 94 7e 19 	call	0x32fc	; 0x32fc <itoa>


	if (DIO_GetPinValue(GROUPC, PIN_0) == 0
    2df8:	82 e0       	ldi	r24, 0x02	; 2
    2dfa:	60 e0       	ldi	r22, 0x00	; 0
    2dfc:	0e 94 81 08 	call	0x1102	; 0x1102 <DIO_GetPinValue>
    2e00:	88 23       	and	r24, r24
    2e02:	d1 f5       	brne	.+116    	; 0x2e78 <LCD_WORK+0xc0>
    2e04:	82 e0       	ldi	r24, 0x02	; 2
    2e06:	61 e0       	ldi	r22, 0x01	; 1
    2e08:	0e 94 81 08 	call	0x1102	; 0x1102 <DIO_GetPinValue>
    2e0c:	88 23       	and	r24, r24
    2e0e:	a1 f5       	brne	.+104    	; 0x2e78 <LCD_WORK+0xc0>
			&& DIO_GetPinValue(GROUPC, PIN_1) == 0) {


	LCD_Clear();
    2e10:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <LCD_Clear>
	LCD_GOTOXY(1, 0);
    2e14:	81 e0       	ldi	r24, 0x01	; 1
    2e16:	60 e0       	ldi	r22, 0x00	; 0
    2e18:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <LCD_GOTOXY>
	LCD_Send_string("TEMP= ");
    2e1c:	80 e6       	ldi	r24, 0x60	; 96
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	0e 94 80 16 	call	0x2d00	; 0x2d00 <LCD_Send_string>
	LCD_GOTOXY(2, 0);
    2e24:	82 e0       	ldi	r24, 0x02	; 2
    2e26:	60 e0       	ldi	r22, 0x00	; 0
    2e28:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <LCD_GOTOXY>
	LCD_Send_string("STATE :");
    2e2c:	87 e6       	ldi	r24, 0x67	; 103
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	0e 94 80 16 	call	0x2d00	; 0x2d00 <LCD_Send_string>


		LCD_GOTOXY(1, 7);
    2e34:	81 e0       	ldi	r24, 0x01	; 1
    2e36:	67 e0       	ldi	r22, 0x07	; 7
    2e38:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <LCD_GOTOXY>
		LCD_Send_string(arr);
    2e3c:	ce 01       	movw	r24, r28
    2e3e:	43 96       	adiw	r24, 0x13	; 19
    2e40:	0e 94 80 16 	call	0x2d00	; 0x2d00 <LCD_Send_string>
		LCD_GOTOXY(2, 7);
    2e44:	82 e0       	ldi	r24, 0x02	; 2
    2e46:	67 e0       	ldi	r22, 0x07	; 7
    2e48:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <LCD_GOTOXY>
		LCD_Send_string(" WORKING");
    2e4c:	8f e6       	ldi	r24, 0x6F	; 111
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	0e 94 80 16 	call	0x2d00	; 0x2d00 <LCD_Send_string>
		if (temp > 300) {
    2e54:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e56:	98 89       	ldd	r25, Y+16	; 0x10
    2e58:	21 e0       	ldi	r18, 0x01	; 1
    2e5a:	8d 32       	cpi	r24, 0x2D	; 45
    2e5c:	92 07       	cpc	r25, r18
    2e5e:	30 f0       	brcs	.+12     	; 0x2e6c <LCD_WORK+0xb4>
			DIO_SetPinValue(GROUPC, PIN_7, HIGH);
    2e60:	82 e0       	ldi	r24, 0x02	; 2
    2e62:	67 e0       	ldi	r22, 0x07	; 7
    2e64:	41 e0       	ldi	r20, 0x01	; 1
    2e66:	0e 94 81 07 	call	0xf02	; 0xf02 <DIO_SetPinValue>
    2e6a:	18 c0       	rjmp	.+48     	; 0x2e9c <LCD_WORK+0xe4>

		} else {
			DIO_SetPinValue(GROUPC, PIN_7, LOW);
    2e6c:	82 e0       	ldi	r24, 0x02	; 2
    2e6e:	67 e0       	ldi	r22, 0x07	; 7
    2e70:	40 e0       	ldi	r20, 0x00	; 0
    2e72:	0e 94 81 07 	call	0xf02	; 0xf02 <DIO_SetPinValue>
    2e76:	12 c0       	rjmp	.+36     	; 0x2e9c <LCD_WORK+0xe4>
		}

	} else {
		LCD_Clear();
    2e78:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <LCD_Clear>

		LCD_GOTOXY(1,2);
    2e7c:	81 e0       	ldi	r24, 0x01	; 1
    2e7e:	62 e0       	ldi	r22, 0x02	; 2
    2e80:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <LCD_GOTOXY>
		LCD_Send_string("SYSTEM  NOT ");
    2e84:	88 e7       	ldi	r24, 0x78	; 120
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	0e 94 80 16 	call	0x2d00	; 0x2d00 <LCD_Send_string>
		LCD_GOTOXY(2, 3);
    2e8c:	82 e0       	ldi	r24, 0x02	; 2
    2e8e:	63 e0       	ldi	r22, 0x03	; 3
    2e90:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <LCD_GOTOXY>
				LCD_Send_string("CONNECTED");
    2e94:	85 e8       	ldi	r24, 0x85	; 133
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	0e 94 80 16 	call	0x2d00	; 0x2d00 <LCD_Send_string>
    2e9c:	80 e0       	ldi	r24, 0x00	; 0
    2e9e:	90 e0       	ldi	r25, 0x00	; 0
    2ea0:	aa e7       	ldi	r26, 0x7A	; 122
    2ea2:	b4 e4       	ldi	r27, 0x44	; 68
    2ea4:	8b 87       	std	Y+11, r24	; 0x0b
    2ea6:	9c 87       	std	Y+12, r25	; 0x0c
    2ea8:	ad 87       	std	Y+13, r26	; 0x0d
    2eaa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eac:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eae:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eb4:	20 e0       	ldi	r18, 0x00	; 0
    2eb6:	30 e0       	ldi	r19, 0x00	; 0
    2eb8:	4a ef       	ldi	r20, 0xFA	; 250
    2eba:	54 e4       	ldi	r21, 0x44	; 68
    2ebc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ec0:	dc 01       	movw	r26, r24
    2ec2:	cb 01       	movw	r24, r22
    2ec4:	8f 83       	std	Y+7, r24	; 0x07
    2ec6:	98 87       	std	Y+8, r25	; 0x08
    2ec8:	a9 87       	std	Y+9, r26	; 0x09
    2eca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ecc:	6f 81       	ldd	r22, Y+7	; 0x07
    2ece:	78 85       	ldd	r23, Y+8	; 0x08
    2ed0:	89 85       	ldd	r24, Y+9	; 0x09
    2ed2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ed4:	20 e0       	ldi	r18, 0x00	; 0
    2ed6:	30 e0       	ldi	r19, 0x00	; 0
    2ed8:	40 e8       	ldi	r20, 0x80	; 128
    2eda:	5f e3       	ldi	r21, 0x3F	; 63
    2edc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2ee0:	88 23       	and	r24, r24
    2ee2:	2c f4       	brge	.+10     	; 0x2eee <LCD_WORK+0x136>
		__ticks = 1;
    2ee4:	81 e0       	ldi	r24, 0x01	; 1
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	9e 83       	std	Y+6, r25	; 0x06
    2eea:	8d 83       	std	Y+5, r24	; 0x05
    2eec:	3f c0       	rjmp	.+126    	; 0x2f6c <LCD_WORK+0x1b4>
	else if (__tmp > 65535)
    2eee:	6f 81       	ldd	r22, Y+7	; 0x07
    2ef0:	78 85       	ldd	r23, Y+8	; 0x08
    2ef2:	89 85       	ldd	r24, Y+9	; 0x09
    2ef4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ef6:	20 e0       	ldi	r18, 0x00	; 0
    2ef8:	3f ef       	ldi	r19, 0xFF	; 255
    2efa:	4f e7       	ldi	r20, 0x7F	; 127
    2efc:	57 e4       	ldi	r21, 0x47	; 71
    2efe:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2f02:	18 16       	cp	r1, r24
    2f04:	4c f5       	brge	.+82     	; 0x2f58 <LCD_WORK+0x1a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f06:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f08:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f0e:	20 e0       	ldi	r18, 0x00	; 0
    2f10:	30 e0       	ldi	r19, 0x00	; 0
    2f12:	40 e2       	ldi	r20, 0x20	; 32
    2f14:	51 e4       	ldi	r21, 0x41	; 65
    2f16:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f1a:	dc 01       	movw	r26, r24
    2f1c:	cb 01       	movw	r24, r22
    2f1e:	bc 01       	movw	r22, r24
    2f20:	cd 01       	movw	r24, r26
    2f22:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f26:	dc 01       	movw	r26, r24
    2f28:	cb 01       	movw	r24, r22
    2f2a:	9e 83       	std	Y+6, r25	; 0x06
    2f2c:	8d 83       	std	Y+5, r24	; 0x05
    2f2e:	0f c0       	rjmp	.+30     	; 0x2f4e <LCD_WORK+0x196>
    2f30:	88 ec       	ldi	r24, 0xC8	; 200
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	9c 83       	std	Y+4, r25	; 0x04
    2f36:	8b 83       	std	Y+3, r24	; 0x03
    2f38:	8b 81       	ldd	r24, Y+3	; 0x03
    2f3a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f3c:	01 97       	sbiw	r24, 0x01	; 1
    2f3e:	f1 f7       	brne	.-4      	; 0x2f3c <LCD_WORK+0x184>
    2f40:	9c 83       	std	Y+4, r25	; 0x04
    2f42:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f44:	8d 81       	ldd	r24, Y+5	; 0x05
    2f46:	9e 81       	ldd	r25, Y+6	; 0x06
    2f48:	01 97       	sbiw	r24, 0x01	; 1
    2f4a:	9e 83       	std	Y+6, r25	; 0x06
    2f4c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f4e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f50:	9e 81       	ldd	r25, Y+6	; 0x06
    2f52:	00 97       	sbiw	r24, 0x00	; 0
    2f54:	69 f7       	brne	.-38     	; 0x2f30 <LCD_WORK+0x178>
    2f56:	14 c0       	rjmp	.+40     	; 0x2f80 <LCD_WORK+0x1c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f58:	6f 81       	ldd	r22, Y+7	; 0x07
    2f5a:	78 85       	ldd	r23, Y+8	; 0x08
    2f5c:	89 85       	ldd	r24, Y+9	; 0x09
    2f5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f60:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f64:	dc 01       	movw	r26, r24
    2f66:	cb 01       	movw	r24, r22
    2f68:	9e 83       	std	Y+6, r25	; 0x06
    2f6a:	8d 83       	std	Y+5, r24	; 0x05
    2f6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f70:	9a 83       	std	Y+2, r25	; 0x02
    2f72:	89 83       	std	Y+1, r24	; 0x01
    2f74:	89 81       	ldd	r24, Y+1	; 0x01
    2f76:	9a 81       	ldd	r25, Y+2	; 0x02
    2f78:	01 97       	sbiw	r24, 0x01	; 1
    2f7a:	f1 f7       	brne	.-4      	; 0x2f78 <LCD_WORK+0x1c0>
    2f7c:	9a 83       	std	Y+2, r25	; 0x02
    2f7e:	89 83       	std	Y+1, r24	; 0x01

	}

	_delay_ms(1000);

}
    2f80:	a2 96       	adiw	r28, 0x22	; 34
    2f82:	0f b6       	in	r0, 0x3f	; 63
    2f84:	f8 94       	cli
    2f86:	de bf       	out	0x3e, r29	; 62
    2f88:	0f be       	out	0x3f, r0	; 63
    2f8a:	cd bf       	out	0x3d, r28	; 61
    2f8c:	cf 91       	pop	r28
    2f8e:	df 91       	pop	r29
    2f90:	08 95       	ret

00002f92 <Get_key_pad_pressed>:
u8 key_pad_arr[4][4] = { { 1, 2, 3, 'A' }, { 4, 5, 6, 'B' }, { 7, 8, 9, 'C' }, {
		'*', 0, '#', 'D' }

};

u8 Get_key_pad_pressed() {
    2f92:	df 93       	push	r29
    2f94:	cf 93       	push	r28
    2f96:	cd b7       	in	r28, 0x3d	; 61
    2f98:	de b7       	in	r29, 0x3e	; 62
    2f9a:	60 97       	sbiw	r28, 0x10	; 16
    2f9c:	0f b6       	in	r0, 0x3f	; 63
    2f9e:	f8 94       	cli
    2fa0:	de bf       	out	0x3e, r29	; 62
    2fa2:	0f be       	out	0x3f, r0	; 63
    2fa4:	cd bf       	out	0x3d, r28	; 61
	while (1) {
		for (u8 i = 0; i < ROW_NO; i++) {
    2fa6:	18 8a       	std	Y+16, r1	; 0x10
    2fa8:	bc c0       	rjmp	.+376    	; 0x3122 <Get_key_pad_pressed+0x190>
			DIO_SetGroupDirection(KEY_PAD_GROUP, (0b00010000) << i);
    2faa:	88 89       	ldd	r24, Y+16	; 0x10
    2fac:	28 2f       	mov	r18, r24
    2fae:	30 e0       	ldi	r19, 0x00	; 0
    2fb0:	80 e1       	ldi	r24, 0x10	; 16
    2fb2:	90 e0       	ldi	r25, 0x00	; 0
    2fb4:	02 c0       	rjmp	.+4      	; 0x2fba <Get_key_pad_pressed+0x28>
    2fb6:	88 0f       	add	r24, r24
    2fb8:	99 1f       	adc	r25, r25
    2fba:	2a 95       	dec	r18
    2fbc:	e2 f7       	brpl	.-8      	; 0x2fb6 <Get_key_pad_pressed+0x24>
    2fbe:	98 2f       	mov	r25, r24
    2fc0:	83 e0       	ldi	r24, 0x03	; 3
    2fc2:	69 2f       	mov	r22, r25
    2fc4:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <DIO_SetGroupDirection>
			DIO_SetGroupValue(KEY_PAD_GROUP, (~((0b00010000) << i)));
    2fc8:	88 89       	ldd	r24, Y+16	; 0x10
    2fca:	28 2f       	mov	r18, r24
    2fcc:	30 e0       	ldi	r19, 0x00	; 0
    2fce:	80 e1       	ldi	r24, 0x10	; 16
    2fd0:	90 e0       	ldi	r25, 0x00	; 0
    2fd2:	02 c0       	rjmp	.+4      	; 0x2fd8 <Get_key_pad_pressed+0x46>
    2fd4:	88 0f       	add	r24, r24
    2fd6:	99 1f       	adc	r25, r25
    2fd8:	2a 95       	dec	r18
    2fda:	e2 f7       	brpl	.-8      	; 0x2fd4 <Get_key_pad_pressed+0x42>
    2fdc:	98 2f       	mov	r25, r24
    2fde:	90 95       	com	r25
    2fe0:	83 e0       	ldi	r24, 0x03	; 3
    2fe2:	69 2f       	mov	r22, r25
    2fe4:	0e 94 3d 09 	call	0x127a	; 0x127a <DIO_SetGroupValue>
    2fe8:	80 e0       	ldi	r24, 0x00	; 0
    2fea:	90 e0       	ldi	r25, 0x00	; 0
    2fec:	a8 e4       	ldi	r26, 0x48	; 72
    2fee:	b2 e4       	ldi	r27, 0x42	; 66
    2ff0:	8b 87       	std	Y+11, r24	; 0x0b
    2ff2:	9c 87       	std	Y+12, r25	; 0x0c
    2ff4:	ad 87       	std	Y+13, r26	; 0x0d
    2ff6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ff8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ffa:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ffc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ffe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3000:	20 e0       	ldi	r18, 0x00	; 0
    3002:	30 e0       	ldi	r19, 0x00	; 0
    3004:	4a ef       	ldi	r20, 0xFA	; 250
    3006:	54 e4       	ldi	r21, 0x44	; 68
    3008:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    300c:	dc 01       	movw	r26, r24
    300e:	cb 01       	movw	r24, r22
    3010:	8f 83       	std	Y+7, r24	; 0x07
    3012:	98 87       	std	Y+8, r25	; 0x08
    3014:	a9 87       	std	Y+9, r26	; 0x09
    3016:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3018:	6f 81       	ldd	r22, Y+7	; 0x07
    301a:	78 85       	ldd	r23, Y+8	; 0x08
    301c:	89 85       	ldd	r24, Y+9	; 0x09
    301e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3020:	20 e0       	ldi	r18, 0x00	; 0
    3022:	30 e0       	ldi	r19, 0x00	; 0
    3024:	40 e8       	ldi	r20, 0x80	; 128
    3026:	5f e3       	ldi	r21, 0x3F	; 63
    3028:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    302c:	88 23       	and	r24, r24
    302e:	2c f4       	brge	.+10     	; 0x303a <Get_key_pad_pressed+0xa8>
		__ticks = 1;
    3030:	81 e0       	ldi	r24, 0x01	; 1
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	9e 83       	std	Y+6, r25	; 0x06
    3036:	8d 83       	std	Y+5, r24	; 0x05
    3038:	3f c0       	rjmp	.+126    	; 0x30b8 <Get_key_pad_pressed+0x126>
	else if (__tmp > 65535)
    303a:	6f 81       	ldd	r22, Y+7	; 0x07
    303c:	78 85       	ldd	r23, Y+8	; 0x08
    303e:	89 85       	ldd	r24, Y+9	; 0x09
    3040:	9a 85       	ldd	r25, Y+10	; 0x0a
    3042:	20 e0       	ldi	r18, 0x00	; 0
    3044:	3f ef       	ldi	r19, 0xFF	; 255
    3046:	4f e7       	ldi	r20, 0x7F	; 127
    3048:	57 e4       	ldi	r21, 0x47	; 71
    304a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    304e:	18 16       	cp	r1, r24
    3050:	4c f5       	brge	.+82     	; 0x30a4 <Get_key_pad_pressed+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3052:	6b 85       	ldd	r22, Y+11	; 0x0b
    3054:	7c 85       	ldd	r23, Y+12	; 0x0c
    3056:	8d 85       	ldd	r24, Y+13	; 0x0d
    3058:	9e 85       	ldd	r25, Y+14	; 0x0e
    305a:	20 e0       	ldi	r18, 0x00	; 0
    305c:	30 e0       	ldi	r19, 0x00	; 0
    305e:	40 e2       	ldi	r20, 0x20	; 32
    3060:	51 e4       	ldi	r21, 0x41	; 65
    3062:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3066:	dc 01       	movw	r26, r24
    3068:	cb 01       	movw	r24, r22
    306a:	bc 01       	movw	r22, r24
    306c:	cd 01       	movw	r24, r26
    306e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3072:	dc 01       	movw	r26, r24
    3074:	cb 01       	movw	r24, r22
    3076:	9e 83       	std	Y+6, r25	; 0x06
    3078:	8d 83       	std	Y+5, r24	; 0x05
    307a:	0f c0       	rjmp	.+30     	; 0x309a <Get_key_pad_pressed+0x108>
    307c:	88 ec       	ldi	r24, 0xC8	; 200
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	9c 83       	std	Y+4, r25	; 0x04
    3082:	8b 83       	std	Y+3, r24	; 0x03
    3084:	8b 81       	ldd	r24, Y+3	; 0x03
    3086:	9c 81       	ldd	r25, Y+4	; 0x04
    3088:	01 97       	sbiw	r24, 0x01	; 1
    308a:	f1 f7       	brne	.-4      	; 0x3088 <Get_key_pad_pressed+0xf6>
    308c:	9c 83       	std	Y+4, r25	; 0x04
    308e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3090:	8d 81       	ldd	r24, Y+5	; 0x05
    3092:	9e 81       	ldd	r25, Y+6	; 0x06
    3094:	01 97       	sbiw	r24, 0x01	; 1
    3096:	9e 83       	std	Y+6, r25	; 0x06
    3098:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    309a:	8d 81       	ldd	r24, Y+5	; 0x05
    309c:	9e 81       	ldd	r25, Y+6	; 0x06
    309e:	00 97       	sbiw	r24, 0x00	; 0
    30a0:	69 f7       	brne	.-38     	; 0x307c <Get_key_pad_pressed+0xea>
    30a2:	14 c0       	rjmp	.+40     	; 0x30cc <Get_key_pad_pressed+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30a4:	6f 81       	ldd	r22, Y+7	; 0x07
    30a6:	78 85       	ldd	r23, Y+8	; 0x08
    30a8:	89 85       	ldd	r24, Y+9	; 0x09
    30aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    30ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30b0:	dc 01       	movw	r26, r24
    30b2:	cb 01       	movw	r24, r22
    30b4:	9e 83       	std	Y+6, r25	; 0x06
    30b6:	8d 83       	std	Y+5, r24	; 0x05
    30b8:	8d 81       	ldd	r24, Y+5	; 0x05
    30ba:	9e 81       	ldd	r25, Y+6	; 0x06
    30bc:	9a 83       	std	Y+2, r25	; 0x02
    30be:	89 83       	std	Y+1, r24	; 0x01
    30c0:	89 81       	ldd	r24, Y+1	; 0x01
    30c2:	9a 81       	ldd	r25, Y+2	; 0x02
    30c4:	01 97       	sbiw	r24, 0x01	; 1
    30c6:	f1 f7       	brne	.-4      	; 0x30c4 <Get_key_pad_pressed+0x132>
    30c8:	9a 83       	std	Y+2, r25	; 0x02
    30ca:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(50);

			for (u8 y = 0; y < COL_NO; y++) {
    30cc:	1f 86       	std	Y+15, r1	; 0x0f
    30ce:	23 c0       	rjmp	.+70     	; 0x3116 <Get_key_pad_pressed+0x184>
				if (DIO_GetPinValue(KEY_PAD_GROUP, y) == 0)
    30d0:	83 e0       	ldi	r24, 0x03	; 3
    30d2:	6f 85       	ldd	r22, Y+15	; 0x0f
    30d4:	0e 94 81 08 	call	0x1102	; 0x1102 <DIO_GetPinValue>
    30d8:	88 23       	and	r24, r24
    30da:	d1 f4       	brne	.+52     	; 0x3110 <Get_key_pad_pressed+0x17e>
					return key_pad_arr[i][y];
    30dc:	88 89       	ldd	r24, Y+16	; 0x10
    30de:	48 2f       	mov	r20, r24
    30e0:	50 e0       	ldi	r21, 0x00	; 0
    30e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    30e4:	28 2f       	mov	r18, r24
    30e6:	30 e0       	ldi	r19, 0x00	; 0
    30e8:	ca 01       	movw	r24, r20
    30ea:	88 0f       	add	r24, r24
    30ec:	99 1f       	adc	r25, r25
    30ee:	88 0f       	add	r24, r24
    30f0:	99 1f       	adc	r25, r25
    30f2:	82 0f       	add	r24, r18
    30f4:	93 1f       	adc	r25, r19
    30f6:	fc 01       	movw	r30, r24
    30f8:	e1 55       	subi	r30, 0x51	; 81
    30fa:	ff 4f       	sbci	r31, 0xFF	; 255
    30fc:	80 81       	ld	r24, Z

		}

	}

}
    30fe:	60 96       	adiw	r28, 0x10	; 16
    3100:	0f b6       	in	r0, 0x3f	; 63
    3102:	f8 94       	cli
    3104:	de bf       	out	0x3e, r29	; 62
    3106:	0f be       	out	0x3f, r0	; 63
    3108:	cd bf       	out	0x3d, r28	; 61
    310a:	cf 91       	pop	r28
    310c:	df 91       	pop	r29
    310e:	08 95       	ret
		for (u8 i = 0; i < ROW_NO; i++) {
			DIO_SetGroupDirection(KEY_PAD_GROUP, (0b00010000) << i);
			DIO_SetGroupValue(KEY_PAD_GROUP, (~((0b00010000) << i)));
			_delay_ms(50);

			for (u8 y = 0; y < COL_NO; y++) {
    3110:	8f 85       	ldd	r24, Y+15	; 0x0f
    3112:	8f 5f       	subi	r24, 0xFF	; 255
    3114:	8f 87       	std	Y+15, r24	; 0x0f
    3116:	8f 85       	ldd	r24, Y+15	; 0x0f
    3118:	84 30       	cpi	r24, 0x04	; 4
    311a:	d0 f2       	brcs	.-76     	; 0x30d0 <Get_key_pad_pressed+0x13e>

};

u8 Get_key_pad_pressed() {
	while (1) {
		for (u8 i = 0; i < ROW_NO; i++) {
    311c:	88 89       	ldd	r24, Y+16	; 0x10
    311e:	8f 5f       	subi	r24, 0xFF	; 255
    3120:	88 8b       	std	Y+16, r24	; 0x10
    3122:	88 89       	ldd	r24, Y+16	; 0x10
    3124:	84 30       	cpi	r24, 0x04	; 4
    3126:	08 f4       	brcc	.+2      	; 0x312a <Get_key_pad_pressed+0x198>
    3128:	40 cf       	rjmp	.-384    	; 0x2faa <Get_key_pad_pressed+0x18>
    312a:	3d cf       	rjmp	.-390    	; 0x2fa6 <Get_key_pad_pressed+0x14>

0000312c <main>:
///////////////////////////////////////////////////
#include "MCAL/ADC/ADC.h"
////////////////////////////////////////////////////////////


int main() {
    312c:	df 93       	push	r29
    312e:	cf 93       	push	r28
    3130:	cd b7       	in	r28, 0x3d	; 61
    3132:	de b7       	in	r29, 0x3e	; 62
    3134:	2e 97       	sbiw	r28, 0x0e	; 14
    3136:	0f b6       	in	r0, 0x3f	; 63
    3138:	f8 94       	cli
    313a:	de bf       	out	0x3e, r29	; 62
    313c:	0f be       	out	0x3f, r0	; 63
    313e:	cd bf       	out	0x3d, r28	; 61

	DIO_SetPinDirection(GROUPC, PIN_0, INPUT);
    3140:	82 e0       	ldi	r24, 0x02	; 2
    3142:	60 e0       	ldi	r22, 0x00	; 0
    3144:	40 e0       	ldi	r20, 0x00	; 0
    3146:	0e 94 81 06 	call	0xd02	; 0xd02 <DIO_SetPinDirection>
	DIO_SetPinValue(GROUPC, PIN_0, HIGH);
    314a:	82 e0       	ldi	r24, 0x02	; 2
    314c:	60 e0       	ldi	r22, 0x00	; 0
    314e:	41 e0       	ldi	r20, 0x01	; 1
    3150:	0e 94 81 07 	call	0xf02	; 0xf02 <DIO_SetPinValue>
	DIO_SetPinDirection(GROUPC, PIN_1, INPUT);
    3154:	82 e0       	ldi	r24, 0x02	; 2
    3156:	61 e0       	ldi	r22, 0x01	; 1
    3158:	40 e0       	ldi	r20, 0x00	; 0
    315a:	0e 94 81 06 	call	0xd02	; 0xd02 <DIO_SetPinDirection>
	DIO_SetPinValue(GROUPC, PIN_1, HIGH);
    315e:	82 e0       	ldi	r24, 0x02	; 2
    3160:	61 e0       	ldi	r22, 0x01	; 1
    3162:	41 e0       	ldi	r20, 0x01	; 1
    3164:	0e 94 81 07 	call	0xf02	; 0xf02 <DIO_SetPinValue>
	DIO_SetPinDirection(GROUPC, PIN_7, OUTPUT);
    3168:	82 e0       	ldi	r24, 0x02	; 2
    316a:	67 e0       	ldi	r22, 0x07	; 7
    316c:	41 e0       	ldi	r20, 0x01	; 1
    316e:	0e 94 81 06 	call	0xd02	; 0xd02 <DIO_SetPinDirection>
	DIO_SetPinDirection(GROUPA, PIN_0, INPUT);
    3172:	80 e0       	ldi	r24, 0x00	; 0
    3174:	60 e0       	ldi	r22, 0x00	; 0
    3176:	40 e0       	ldi	r20, 0x00	; 0
    3178:	0e 94 81 06 	call	0xd02	; 0xd02 <DIO_SetPinDirection>
	ADC_init();
    317c:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <ADC_init>

	LCD_Vinit();
    3180:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <LCD_Vinit>
	LCD_GOTOXY(1, 4);
    3184:	81 e0       	ldi	r24, 0x01	; 1
    3186:	64 e0       	ldi	r22, 0x04	; 4
    3188:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <LCD_GOTOXY>
	LCD_Send_string("WELCOME");
    318c:	8f e8       	ldi	r24, 0x8F	; 143
    318e:	90 e0       	ldi	r25, 0x00	; 0
    3190:	0e 94 80 16 	call	0x2d00	; 0x2d00 <LCD_Send_string>
	LCD_GOTOXY(2, 1);
    3194:	82 e0       	ldi	r24, 0x02	; 2
    3196:	61 e0       	ldi	r22, 0x01	; 1
    3198:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <LCD_GOTOXY>
	LCD_Send_string("PROJECT SENSOR ");
    319c:	87 e9       	ldi	r24, 0x97	; 151
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	0e 94 80 16 	call	0x2d00	; 0x2d00 <LCD_Send_string>
    31a4:	80 e0       	ldi	r24, 0x00	; 0
    31a6:	90 e0       	ldi	r25, 0x00	; 0
    31a8:	aa ef       	ldi	r26, 0xFA	; 250
    31aa:	b4 e4       	ldi	r27, 0x44	; 68
    31ac:	8b 87       	std	Y+11, r24	; 0x0b
    31ae:	9c 87       	std	Y+12, r25	; 0x0c
    31b0:	ad 87       	std	Y+13, r26	; 0x0d
    31b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    31b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    31b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    31ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    31bc:	20 e0       	ldi	r18, 0x00	; 0
    31be:	30 e0       	ldi	r19, 0x00	; 0
    31c0:	4a ef       	ldi	r20, 0xFA	; 250
    31c2:	54 e4       	ldi	r21, 0x44	; 68
    31c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    31c8:	dc 01       	movw	r26, r24
    31ca:	cb 01       	movw	r24, r22
    31cc:	8f 83       	std	Y+7, r24	; 0x07
    31ce:	98 87       	std	Y+8, r25	; 0x08
    31d0:	a9 87       	std	Y+9, r26	; 0x09
    31d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31d4:	6f 81       	ldd	r22, Y+7	; 0x07
    31d6:	78 85       	ldd	r23, Y+8	; 0x08
    31d8:	89 85       	ldd	r24, Y+9	; 0x09
    31da:	9a 85       	ldd	r25, Y+10	; 0x0a
    31dc:	20 e0       	ldi	r18, 0x00	; 0
    31de:	30 e0       	ldi	r19, 0x00	; 0
    31e0:	40 e8       	ldi	r20, 0x80	; 128
    31e2:	5f e3       	ldi	r21, 0x3F	; 63
    31e4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    31e8:	88 23       	and	r24, r24
    31ea:	2c f4       	brge	.+10     	; 0x31f6 <main+0xca>
		__ticks = 1;
    31ec:	81 e0       	ldi	r24, 0x01	; 1
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	9e 83       	std	Y+6, r25	; 0x06
    31f2:	8d 83       	std	Y+5, r24	; 0x05
    31f4:	3f c0       	rjmp	.+126    	; 0x3274 <main+0x148>
	else if (__tmp > 65535)
    31f6:	6f 81       	ldd	r22, Y+7	; 0x07
    31f8:	78 85       	ldd	r23, Y+8	; 0x08
    31fa:	89 85       	ldd	r24, Y+9	; 0x09
    31fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    31fe:	20 e0       	ldi	r18, 0x00	; 0
    3200:	3f ef       	ldi	r19, 0xFF	; 255
    3202:	4f e7       	ldi	r20, 0x7F	; 127
    3204:	57 e4       	ldi	r21, 0x47	; 71
    3206:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    320a:	18 16       	cp	r1, r24
    320c:	4c f5       	brge	.+82     	; 0x3260 <main+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    320e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3210:	7c 85       	ldd	r23, Y+12	; 0x0c
    3212:	8d 85       	ldd	r24, Y+13	; 0x0d
    3214:	9e 85       	ldd	r25, Y+14	; 0x0e
    3216:	20 e0       	ldi	r18, 0x00	; 0
    3218:	30 e0       	ldi	r19, 0x00	; 0
    321a:	40 e2       	ldi	r20, 0x20	; 32
    321c:	51 e4       	ldi	r21, 0x41	; 65
    321e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3222:	dc 01       	movw	r26, r24
    3224:	cb 01       	movw	r24, r22
    3226:	bc 01       	movw	r22, r24
    3228:	cd 01       	movw	r24, r26
    322a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    322e:	dc 01       	movw	r26, r24
    3230:	cb 01       	movw	r24, r22
    3232:	9e 83       	std	Y+6, r25	; 0x06
    3234:	8d 83       	std	Y+5, r24	; 0x05
    3236:	0f c0       	rjmp	.+30     	; 0x3256 <main+0x12a>
    3238:	88 ec       	ldi	r24, 0xC8	; 200
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	9c 83       	std	Y+4, r25	; 0x04
    323e:	8b 83       	std	Y+3, r24	; 0x03
    3240:	8b 81       	ldd	r24, Y+3	; 0x03
    3242:	9c 81       	ldd	r25, Y+4	; 0x04
    3244:	01 97       	sbiw	r24, 0x01	; 1
    3246:	f1 f7       	brne	.-4      	; 0x3244 <main+0x118>
    3248:	9c 83       	std	Y+4, r25	; 0x04
    324a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    324c:	8d 81       	ldd	r24, Y+5	; 0x05
    324e:	9e 81       	ldd	r25, Y+6	; 0x06
    3250:	01 97       	sbiw	r24, 0x01	; 1
    3252:	9e 83       	std	Y+6, r25	; 0x06
    3254:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3256:	8d 81       	ldd	r24, Y+5	; 0x05
    3258:	9e 81       	ldd	r25, Y+6	; 0x06
    325a:	00 97       	sbiw	r24, 0x00	; 0
    325c:	69 f7       	brne	.-38     	; 0x3238 <main+0x10c>
    325e:	14 c0       	rjmp	.+40     	; 0x3288 <main+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3260:	6f 81       	ldd	r22, Y+7	; 0x07
    3262:	78 85       	ldd	r23, Y+8	; 0x08
    3264:	89 85       	ldd	r24, Y+9	; 0x09
    3266:	9a 85       	ldd	r25, Y+10	; 0x0a
    3268:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    326c:	dc 01       	movw	r26, r24
    326e:	cb 01       	movw	r24, r22
    3270:	9e 83       	std	Y+6, r25	; 0x06
    3272:	8d 83       	std	Y+5, r24	; 0x05
    3274:	8d 81       	ldd	r24, Y+5	; 0x05
    3276:	9e 81       	ldd	r25, Y+6	; 0x06
    3278:	9a 83       	std	Y+2, r25	; 0x02
    327a:	89 83       	std	Y+1, r24	; 0x01
    327c:	89 81       	ldd	r24, Y+1	; 0x01
    327e:	9a 81       	ldd	r25, Y+2	; 0x02
    3280:	01 97       	sbiw	r24, 0x01	; 1
    3282:	f1 f7       	brne	.-4      	; 0x3280 <main+0x154>
    3284:	9a 83       	std	Y+2, r25	; 0x02
    3286:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);

	while (1) {

		LCD_WORK( );
    3288:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <LCD_WORK>
    328c:	fd cf       	rjmp	.-6      	; 0x3288 <main+0x15c>

0000328e <__prologue_saves__>:
    328e:	2f 92       	push	r2
    3290:	3f 92       	push	r3
    3292:	4f 92       	push	r4
    3294:	5f 92       	push	r5
    3296:	6f 92       	push	r6
    3298:	7f 92       	push	r7
    329a:	8f 92       	push	r8
    329c:	9f 92       	push	r9
    329e:	af 92       	push	r10
    32a0:	bf 92       	push	r11
    32a2:	cf 92       	push	r12
    32a4:	df 92       	push	r13
    32a6:	ef 92       	push	r14
    32a8:	ff 92       	push	r15
    32aa:	0f 93       	push	r16
    32ac:	1f 93       	push	r17
    32ae:	cf 93       	push	r28
    32b0:	df 93       	push	r29
    32b2:	cd b7       	in	r28, 0x3d	; 61
    32b4:	de b7       	in	r29, 0x3e	; 62
    32b6:	ca 1b       	sub	r28, r26
    32b8:	db 0b       	sbc	r29, r27
    32ba:	0f b6       	in	r0, 0x3f	; 63
    32bc:	f8 94       	cli
    32be:	de bf       	out	0x3e, r29	; 62
    32c0:	0f be       	out	0x3f, r0	; 63
    32c2:	cd bf       	out	0x3d, r28	; 61
    32c4:	09 94       	ijmp

000032c6 <__epilogue_restores__>:
    32c6:	2a 88       	ldd	r2, Y+18	; 0x12
    32c8:	39 88       	ldd	r3, Y+17	; 0x11
    32ca:	48 88       	ldd	r4, Y+16	; 0x10
    32cc:	5f 84       	ldd	r5, Y+15	; 0x0f
    32ce:	6e 84       	ldd	r6, Y+14	; 0x0e
    32d0:	7d 84       	ldd	r7, Y+13	; 0x0d
    32d2:	8c 84       	ldd	r8, Y+12	; 0x0c
    32d4:	9b 84       	ldd	r9, Y+11	; 0x0b
    32d6:	aa 84       	ldd	r10, Y+10	; 0x0a
    32d8:	b9 84       	ldd	r11, Y+9	; 0x09
    32da:	c8 84       	ldd	r12, Y+8	; 0x08
    32dc:	df 80       	ldd	r13, Y+7	; 0x07
    32de:	ee 80       	ldd	r14, Y+6	; 0x06
    32e0:	fd 80       	ldd	r15, Y+5	; 0x05
    32e2:	0c 81       	ldd	r16, Y+4	; 0x04
    32e4:	1b 81       	ldd	r17, Y+3	; 0x03
    32e6:	aa 81       	ldd	r26, Y+2	; 0x02
    32e8:	b9 81       	ldd	r27, Y+1	; 0x01
    32ea:	ce 0f       	add	r28, r30
    32ec:	d1 1d       	adc	r29, r1
    32ee:	0f b6       	in	r0, 0x3f	; 63
    32f0:	f8 94       	cli
    32f2:	de bf       	out	0x3e, r29	; 62
    32f4:	0f be       	out	0x3f, r0	; 63
    32f6:	cd bf       	out	0x3d, r28	; 61
    32f8:	ed 01       	movw	r28, r26
    32fa:	08 95       	ret

000032fc <itoa>:
    32fc:	fb 01       	movw	r30, r22
    32fe:	9f 01       	movw	r18, r30
    3300:	e8 94       	clt
    3302:	42 30       	cpi	r20, 0x02	; 2
    3304:	c4 f0       	brlt	.+48     	; 0x3336 <itoa+0x3a>
    3306:	45 32       	cpi	r20, 0x25	; 37
    3308:	b4 f4       	brge	.+44     	; 0x3336 <itoa+0x3a>
    330a:	4a 30       	cpi	r20, 0x0A	; 10
    330c:	29 f4       	brne	.+10     	; 0x3318 <itoa+0x1c>
    330e:	97 fb       	bst	r25, 7
    3310:	1e f4       	brtc	.+6      	; 0x3318 <itoa+0x1c>
    3312:	90 95       	com	r25
    3314:	81 95       	neg	r24
    3316:	9f 4f       	sbci	r25, 0xFF	; 255
    3318:	64 2f       	mov	r22, r20
    331a:	77 27       	eor	r23, r23
    331c:	0e 94 af 19 	call	0x335e	; 0x335e <__udivmodhi4>
    3320:	80 5d       	subi	r24, 0xD0	; 208
    3322:	8a 33       	cpi	r24, 0x3A	; 58
    3324:	0c f0       	brlt	.+2      	; 0x3328 <itoa+0x2c>
    3326:	89 5d       	subi	r24, 0xD9	; 217
    3328:	81 93       	st	Z+, r24
    332a:	cb 01       	movw	r24, r22
    332c:	00 97       	sbiw	r24, 0x00	; 0
    332e:	a1 f7       	brne	.-24     	; 0x3318 <itoa+0x1c>
    3330:	16 f4       	brtc	.+4      	; 0x3336 <itoa+0x3a>
    3332:	5d e2       	ldi	r21, 0x2D	; 45
    3334:	51 93       	st	Z+, r21
    3336:	10 82       	st	Z, r1
    3338:	c9 01       	movw	r24, r18
    333a:	0c 94 9f 19 	jmp	0x333e	; 0x333e <strrev>

0000333e <strrev>:
    333e:	dc 01       	movw	r26, r24
    3340:	fc 01       	movw	r30, r24
    3342:	67 2f       	mov	r22, r23
    3344:	71 91       	ld	r23, Z+
    3346:	77 23       	and	r23, r23
    3348:	e1 f7       	brne	.-8      	; 0x3342 <strrev+0x4>
    334a:	32 97       	sbiw	r30, 0x02	; 2
    334c:	04 c0       	rjmp	.+8      	; 0x3356 <strrev+0x18>
    334e:	7c 91       	ld	r23, X
    3350:	6d 93       	st	X+, r22
    3352:	70 83       	st	Z, r23
    3354:	62 91       	ld	r22, -Z
    3356:	ae 17       	cp	r26, r30
    3358:	bf 07       	cpc	r27, r31
    335a:	c8 f3       	brcs	.-14     	; 0x334e <strrev+0x10>
    335c:	08 95       	ret

0000335e <__udivmodhi4>:
    335e:	aa 1b       	sub	r26, r26
    3360:	bb 1b       	sub	r27, r27
    3362:	51 e1       	ldi	r21, 0x11	; 17
    3364:	07 c0       	rjmp	.+14     	; 0x3374 <__udivmodhi4_ep>

00003366 <__udivmodhi4_loop>:
    3366:	aa 1f       	adc	r26, r26
    3368:	bb 1f       	adc	r27, r27
    336a:	a6 17       	cp	r26, r22
    336c:	b7 07       	cpc	r27, r23
    336e:	10 f0       	brcs	.+4      	; 0x3374 <__udivmodhi4_ep>
    3370:	a6 1b       	sub	r26, r22
    3372:	b7 0b       	sbc	r27, r23

00003374 <__udivmodhi4_ep>:
    3374:	88 1f       	adc	r24, r24
    3376:	99 1f       	adc	r25, r25
    3378:	5a 95       	dec	r21
    337a:	a9 f7       	brne	.-22     	; 0x3366 <__udivmodhi4_loop>
    337c:	80 95       	com	r24
    337e:	90 95       	com	r25
    3380:	bc 01       	movw	r22, r24
    3382:	cd 01       	movw	r24, r26
    3384:	08 95       	ret

00003386 <_exit>:
    3386:	f8 94       	cli

00003388 <__stop_program>:
    3388:	ff cf       	rjmp	.-2      	; 0x3388 <__stop_program>
